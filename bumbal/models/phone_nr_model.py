# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class PhoneNrModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'address_id': 'int',
        'country_code': 'str',
        'phone_nr_type_name': 'str',
        'nr': 'str',
        'description': 'str',
        'primary': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'address_id': 'address_id',
        'country_code': 'country_code',
        'phone_nr_type_name': 'phone_nr_type_name',
        'nr': 'nr',
        'description': 'description',
        'primary': 'primary'
    }

    def __init__(self, id=None, address_id=None, country_code=None, phone_nr_type_name=None, nr=None, description=None, primary=None, _configuration=None):  # noqa: E501
        """PhoneNrModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._address_id = None
        self._country_code = None
        self._phone_nr_type_name = None
        self._nr = None
        self._description = None
        self._primary = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address_id is not None:
            self.address_id = address_id
        if country_code is not None:
            self.country_code = country_code
        if phone_nr_type_name is not None:
            self.phone_nr_type_name = phone_nr_type_name
        if nr is not None:
            self.nr = nr
        if description is not None:
            self.description = description
        if primary is not None:
            self.primary = primary

    @property
    def id(self):
        """Gets the id of this PhoneNrModel.  # noqa: E501

        Unique ID  # noqa: E501

        :return: The id of this PhoneNrModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneNrModel.

        Unique ID  # noqa: E501

        :param id: The id of this PhoneNrModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def address_id(self):
        """Gets the address_id of this PhoneNrModel.  # noqa: E501

        Address ID asociated with this email address  # noqa: E501

        :return: The address_id of this PhoneNrModel.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this PhoneNrModel.

        Address ID asociated with this email address  # noqa: E501

        :param address_id: The address_id of this PhoneNrModel.  # noqa: E501
        :type: int
        """

        self._address_id = address_id

    @property
    def country_code(self):
        """Gets the country_code of this PhoneNrModel.  # noqa: E501

        Phone number Country Code  # noqa: E501

        :return: The country_code of this PhoneNrModel.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PhoneNrModel.

        Phone number Country Code  # noqa: E501

        :param country_code: The country_code of this PhoneNrModel.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def phone_nr_type_name(self):
        """Gets the phone_nr_type_name of this PhoneNrModel.  # noqa: E501

        Phone number type name  # noqa: E501

        :return: The phone_nr_type_name of this PhoneNrModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_nr_type_name

    @phone_nr_type_name.setter
    def phone_nr_type_name(self, phone_nr_type_name):
        """Sets the phone_nr_type_name of this PhoneNrModel.

        Phone number type name  # noqa: E501

        :param phone_nr_type_name: The phone_nr_type_name of this PhoneNrModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["mobile", "landline", "fax"]  # noqa: E501
        if (self._configuration.client_side_validation and
                phone_nr_type_name not in allowed_values):
            raise ValueError(
                "Invalid value for `phone_nr_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(phone_nr_type_name, allowed_values)
            )

        self._phone_nr_type_name = phone_nr_type_name

    @property
    def nr(self):
        """Gets the nr of this PhoneNrModel.  # noqa: E501

        Phone number  # noqa: E501

        :return: The nr of this PhoneNrModel.  # noqa: E501
        :rtype: str
        """
        return self._nr

    @nr.setter
    def nr(self, nr):
        """Sets the nr of this PhoneNrModel.

        Phone number  # noqa: E501

        :param nr: The nr of this PhoneNrModel.  # noqa: E501
        :type: str
        """

        self._nr = nr

    @property
    def description(self):
        """Gets the description of this PhoneNrModel.  # noqa: E501

        Phone number description  # noqa: E501

        :return: The description of this PhoneNrModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PhoneNrModel.

        Phone number description  # noqa: E501

        :param description: The description of this PhoneNrModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def primary(self):
        """Gets the primary of this PhoneNrModel.  # noqa: E501

        primary phone number  # noqa: E501

        :return: The primary of this PhoneNrModel.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this PhoneNrModel.

        primary phone number  # noqa: E501

        :param primary: The primary of this PhoneNrModel.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneNrModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneNrModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhoneNrModel):
            return True

        return self.to_dict() != other.to_dict()
