# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class LinkFiltersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_id': 'list[str]',
        'object_type': 'list[int]',
        'object_type_name': 'list[str]',
        'provider_id': 'list[int]'
    }

    attribute_map = {
        'link_id': 'link_id',
        'object_type': 'object_type',
        'object_type_name': 'object_type_name',
        'provider_id': 'provider_id'
    }

    def __init__(self, link_id=None, object_type=None, object_type_name=None, provider_id=None, _configuration=None):  # noqa: E501
        """LinkFiltersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._link_id = None
        self._object_type = None
        self._object_type_name = None
        self._provider_id = None
        self.discriminator = None

        if link_id is not None:
            self.link_id = link_id
        if object_type is not None:
            self.object_type = object_type
        if object_type_name is not None:
            self.object_type_name = object_type_name
        if provider_id is not None:
            self.provider_id = provider_id

    @property
    def link_id(self):
        """Gets the link_id of this LinkFiltersModel.  # noqa: E501

        Unique Link Identifier(s)  # noqa: E501

        :return: The link_id of this LinkFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this LinkFiltersModel.

        Unique Link Identifier(s)  # noqa: E501

        :param link_id: The link_id of this LinkFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._link_id = link_id

    @property
    def object_type(self):
        """Gets the object_type of this LinkFiltersModel.  # noqa: E501

        array of object type id(s)  # noqa: E501

        :return: The object_type of this LinkFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this LinkFiltersModel.

        array of object type id(s)  # noqa: E501

        :param object_type: The object_type of this LinkFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._object_type = object_type

    @property
    def object_type_name(self):
        """Gets the object_type_name of this LinkFiltersModel.  # noqa: E501

        Object type names  # noqa: E501

        :return: The object_type_name of this LinkFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this LinkFiltersModel.

        Object type names  # noqa: E501

        :param object_type_name: The object_type_name of this LinkFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._object_type_name = object_type_name

    @property
    def provider_id(self):
        """Gets the provider_id of this LinkFiltersModel.  # noqa: E501

        array of provider id(s)  # noqa: E501

        :return: The provider_id of this LinkFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this LinkFiltersModel.

        array of provider id(s)  # noqa: E501

        :param provider_id: The provider_id of this LinkFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._provider_id = provider_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkFiltersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkFiltersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LinkFiltersModel):
            return True

        return self.to_dict() != other.to_dict()
