# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class SayWhenConfigModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'planner_reference_mapping': 'str',
        'meta_data': 'str',
        'key_ring': 'str',
        'visit_type_map': 'str'
    }

    attribute_map = {
        'planner_reference_mapping': 'plannerReferenceMapping',
        'meta_data': 'metaData',
        'key_ring': 'keyRing',
        'visit_type_map': 'visitTypeMap'
    }

    def __init__(self, planner_reference_mapping=None, meta_data=None, key_ring=None, visit_type_map=None, _configuration=None):  # noqa: E501
        """SayWhenConfigModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._planner_reference_mapping = None
        self._meta_data = None
        self._key_ring = None
        self._visit_type_map = None
        self.discriminator = None

        if planner_reference_mapping is not None:
            self.planner_reference_mapping = planner_reference_mapping
        if meta_data is not None:
            self.meta_data = meta_data
        if key_ring is not None:
            self.key_ring = key_ring
        if visit_type_map is not None:
            self.visit_type_map = visit_type_map

    @property
    def planner_reference_mapping(self):
        """Gets the planner_reference_mapping of this SayWhenConfigModel.  # noqa: E501

          # noqa: E501

        :return: The planner_reference_mapping of this SayWhenConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._planner_reference_mapping

    @planner_reference_mapping.setter
    def planner_reference_mapping(self, planner_reference_mapping):
        """Sets the planner_reference_mapping of this SayWhenConfigModel.

          # noqa: E501

        :param planner_reference_mapping: The planner_reference_mapping of this SayWhenConfigModel.  # noqa: E501
        :type: str
        """

        self._planner_reference_mapping = planner_reference_mapping

    @property
    def meta_data(self):
        """Gets the meta_data of this SayWhenConfigModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this SayWhenConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this SayWhenConfigModel.

          # noqa: E501

        :param meta_data: The meta_data of this SayWhenConfigModel.  # noqa: E501
        :type: str
        """

        self._meta_data = meta_data

    @property
    def key_ring(self):
        """Gets the key_ring of this SayWhenConfigModel.  # noqa: E501

          # noqa: E501

        :return: The key_ring of this SayWhenConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._key_ring

    @key_ring.setter
    def key_ring(self, key_ring):
        """Sets the key_ring of this SayWhenConfigModel.

          # noqa: E501

        :param key_ring: The key_ring of this SayWhenConfigModel.  # noqa: E501
        :type: str
        """

        self._key_ring = key_ring

    @property
    def visit_type_map(self):
        """Gets the visit_type_map of this SayWhenConfigModel.  # noqa: E501

          # noqa: E501

        :return: The visit_type_map of this SayWhenConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._visit_type_map

    @visit_type_map.setter
    def visit_type_map(self, visit_type_map):
        """Sets the visit_type_map of this SayWhenConfigModel.

          # noqa: E501

        :param visit_type_map: The visit_type_map of this SayWhenConfigModel.  # noqa: E501
        :type: str
        """

        self._visit_type_map = visit_type_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SayWhenConfigModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SayWhenConfigModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SayWhenConfigModel):
            return True

        return self.to_dict() != other.to_dict()
