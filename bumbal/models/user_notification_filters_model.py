# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class UserNotificationFiltersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'list[int]',
        'user_id': 'list[int]',
        'notification_id': 'list[int]',
        'unread': 'int',
        'pinned': 'int',
        'archived': 'int',
        'notification_category_id': 'list[int]',
        'notification_category_name': 'list[str]',
        'object_type': 'list[int]',
        'object_type_name': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'notification_id': 'notification_id',
        'unread': 'unread',
        'pinned': 'pinned',
        'archived': 'archived',
        'notification_category_id': 'notification_category_id',
        'notification_category_name': 'notification_category_name',
        'object_type': 'object_type',
        'object_type_name': 'object_type_name'
    }

    def __init__(self, id=None, user_id=None, notification_id=None, unread=None, pinned=None, archived=None, notification_category_id=None, notification_category_name=None, object_type=None, object_type_name=None, _configuration=None):  # noqa: E501
        """UserNotificationFiltersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._notification_id = None
        self._unread = None
        self._pinned = None
        self._archived = None
        self._notification_category_id = None
        self._notification_category_name = None
        self._object_type = None
        self._object_type_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if notification_id is not None:
            self.notification_id = notification_id
        if unread is not None:
            self.unread = unread
        if pinned is not None:
            self.pinned = pinned
        if archived is not None:
            self.archived = archived
        if notification_category_id is not None:
            self.notification_category_id = notification_category_id
        if notification_category_name is not None:
            self.notification_category_name = notification_category_name
        if object_type is not None:
            self.object_type = object_type
        if object_type_name is not None:
            self.object_type_name = object_type_name

    @property
    def id(self):
        """Gets the id of this UserNotificationFiltersModel.  # noqa: E501

        UserNotification id's  # noqa: E501

        :return: The id of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserNotificationFiltersModel.

        UserNotification id's  # noqa: E501

        :param id: The id of this UserNotificationFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this UserNotificationFiltersModel.  # noqa: E501

        User id's  # noqa: E501

        :return: The user_id of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserNotificationFiltersModel.

        User id's  # noqa: E501

        :param user_id: The user_id of this UserNotificationFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._user_id = user_id

    @property
    def notification_id(self):
        """Gets the notification_id of this UserNotificationFiltersModel.  # noqa: E501

        Notification id's  # noqa: E501

        :return: The notification_id of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this UserNotificationFiltersModel.

        Notification id's  # noqa: E501

        :param notification_id: The notification_id of this UserNotificationFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._notification_id = notification_id

    @property
    def unread(self):
        """Gets the unread of this UserNotificationFiltersModel.  # noqa: E501

        Unread status  # noqa: E501

        :return: The unread of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this UserNotificationFiltersModel.

        Unread status  # noqa: E501

        :param unread: The unread of this UserNotificationFiltersModel.  # noqa: E501
        :type: int
        """

        self._unread = unread

    @property
    def pinned(self):
        """Gets the pinned of this UserNotificationFiltersModel.  # noqa: E501

        Pinned status  # noqa: E501

        :return: The pinned of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this UserNotificationFiltersModel.

        Pinned status  # noqa: E501

        :param pinned: The pinned of this UserNotificationFiltersModel.  # noqa: E501
        :type: int
        """

        self._pinned = pinned

    @property
    def archived(self):
        """Gets the archived of this UserNotificationFiltersModel.  # noqa: E501

        Archived status  # noqa: E501

        :return: The archived of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this UserNotificationFiltersModel.

        Archived status  # noqa: E501

        :param archived: The archived of this UserNotificationFiltersModel.  # noqa: E501
        :type: int
        """

        self._archived = archived

    @property
    def notification_category_id(self):
        """Gets the notification_category_id of this UserNotificationFiltersModel.  # noqa: E501

        Notification category id  # noqa: E501

        :return: The notification_category_id of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._notification_category_id

    @notification_category_id.setter
    def notification_category_id(self, notification_category_id):
        """Sets the notification_category_id of this UserNotificationFiltersModel.

        Notification category id  # noqa: E501

        :param notification_category_id: The notification_category_id of this UserNotificationFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._notification_category_id = notification_category_id

    @property
    def notification_category_name(self):
        """Gets the notification_category_name of this UserNotificationFiltersModel.  # noqa: E501

        Notification category name  # noqa: E501

        :return: The notification_category_name of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_category_name

    @notification_category_name.setter
    def notification_category_name(self, notification_category_name):
        """Sets the notification_category_name of this UserNotificationFiltersModel.

        Notification category name  # noqa: E501

        :param notification_category_name: The notification_category_name of this UserNotificationFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._notification_category_name = notification_category_name

    @property
    def object_type(self):
        """Gets the object_type of this UserNotificationFiltersModel.  # noqa: E501

        Object type ID  # noqa: E501

        :return: The object_type of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this UserNotificationFiltersModel.

        Object type ID  # noqa: E501

        :param object_type: The object_type of this UserNotificationFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._object_type = object_type

    @property
    def object_type_name(self):
        """Gets the object_type_name of this UserNotificationFiltersModel.  # noqa: E501

        Object type name  # noqa: E501

        :return: The object_type_name of this UserNotificationFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this UserNotificationFiltersModel.

        Object type name  # noqa: E501

        :param object_type_name: The object_type_name of this UserNotificationFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._object_type_name = object_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserNotificationFiltersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserNotificationFiltersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserNotificationFiltersModel):
            return True

        return self.to_dict() != other.to_dict()
