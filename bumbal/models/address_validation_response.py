# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class AddressValidationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid': 'bool',
        'certainty': 'int',
        'address': 'AddressModel'
    }

    attribute_map = {
        'valid': 'valid',
        'certainty': 'certainty',
        'address': 'address'
    }

    def __init__(self, valid=None, certainty=None, address=None, _configuration=None):  # noqa: E501
        """AddressValidationResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._valid = None
        self._certainty = None
        self._address = None
        self.discriminator = None

        if valid is not None:
            self.valid = valid
        if certainty is not None:
            self.certainty = certainty
        if address is not None:
            self.address = address

    @property
    def valid(self):
        """Gets the valid of this AddressValidationResponse.  # noqa: E501

        Indicates if a location was found for the address and the minimum_certainty requirement was met.  # noqa: E501

        :return: The valid of this AddressValidationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this AddressValidationResponse.

        Indicates if a location was found for the address and the minimum_certainty requirement was met.  # noqa: E501

        :param valid: The valid of this AddressValidationResponse.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def certainty(self):
        """Gets the certainty of this AddressValidationResponse.  # noqa: E501

        Certainty that latitude/longitude fields in address are accurate expressed as an integer between 0 and 100. When the valid field is false, certainty will always be set to 0  # noqa: E501

        :return: The certainty of this AddressValidationResponse.  # noqa: E501
        :rtype: int
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this AddressValidationResponse.

        Certainty that latitude/longitude fields in address are accurate expressed as an integer between 0 and 100. When the valid field is false, certainty will always be set to 0  # noqa: E501

        :param certainty: The certainty of this AddressValidationResponse.  # noqa: E501
        :type: int
        """

        self._certainty = certainty

    @property
    def address(self):
        """Gets the address of this AddressValidationResponse.  # noqa: E501

        Address model containing the latitude and longitude fields  # noqa: E501

        :return: The address of this AddressValidationResponse.  # noqa: E501
        :rtype: AddressModel
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AddressValidationResponse.

        Address model containing the latitude and longitude fields  # noqa: E501

        :param address: The address of this AddressValidationResponse.  # noqa: E501
        :type: AddressModel
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressValidationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressValidationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressValidationResponse):
            return True

        return self.to_dict() != other.to_dict()
