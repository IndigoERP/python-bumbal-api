# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class GetExecutableActivitiesArguments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'GetExecutableActivitiesDataModel',
        'options': 'GetExecutableActivitiesOptionsModel',
        'filters': 'GetExecutableActivitiesFiltersModel'
    }

    attribute_map = {
        'data': 'data',
        'options': 'options',
        'filters': 'filters'
    }

    def __init__(self, data=None, options=None, filters=None, _configuration=None):  # noqa: E501
        """GetExecutableActivitiesArguments - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data = None
        self._options = None
        self._filters = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if options is not None:
            self.options = options
        if filters is not None:
            self.filters = filters

    @property
    def data(self):
        """Gets the data of this GetExecutableActivitiesArguments.  # noqa: E501

          # noqa: E501

        :return: The data of this GetExecutableActivitiesArguments.  # noqa: E501
        :rtype: GetExecutableActivitiesDataModel
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetExecutableActivitiesArguments.

          # noqa: E501

        :param data: The data of this GetExecutableActivitiesArguments.  # noqa: E501
        :type: GetExecutableActivitiesDataModel
        """

        self._data = data

    @property
    def options(self):
        """Gets the options of this GetExecutableActivitiesArguments.  # noqa: E501

          # noqa: E501

        :return: The options of this GetExecutableActivitiesArguments.  # noqa: E501
        :rtype: GetExecutableActivitiesOptionsModel
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this GetExecutableActivitiesArguments.

          # noqa: E501

        :param options: The options of this GetExecutableActivitiesArguments.  # noqa: E501
        :type: GetExecutableActivitiesOptionsModel
        """

        self._options = options

    @property
    def filters(self):
        """Gets the filters of this GetExecutableActivitiesArguments.  # noqa: E501

          # noqa: E501

        :return: The filters of this GetExecutableActivitiesArguments.  # noqa: E501
        :rtype: GetExecutableActivitiesFiltersModel
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GetExecutableActivitiesArguments.

          # noqa: E501

        :param filters: The filters of this GetExecutableActivitiesArguments.  # noqa: E501
        :type: GetExecutableActivitiesFiltersModel
        """

        self._filters = filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetExecutableActivitiesArguments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetExecutableActivitiesArguments):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetExecutableActivitiesArguments):
            return True

        return self.to_dict() != other.to_dict()
