# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class PackageLineModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'activity_id': 'int',
        'activity_ids': 'list[int]',
        'nr': 'str',
        'status_id': 'int',
        'status_name': 'str',
        'nr_of_packages': 'float',
        'package_type_name': 'str',
        'package_type_id': 'int',
        'barcode': 'str',
        'barcodes': 'list[str]',
        'action_type_id': 'str',
        'action_type_name': 'str',
        'checked_by_driver': 'bool',
        'adr': 'bool',
        'adr_class': 'int',
        'adr_un_nr': 'int',
        'temp': 'bool',
        'temp_min': 'float',
        'temp_max': 'float',
        'hs_code': 'str',
        'description': 'str',
        'compartments': 'list[CompartmentModel]',
        'active': 'bool',
        'applied_capacities': 'object',
        'capacities': 'list[CapacityModel]',
        'activity_links': 'list[LinkModel]',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]',
        'notes': 'list[NoteModel]',
        'files': 'list[FileModel]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'package_line_created_at': 'datetime',
        'package_line_updated_at': 'datetime',
        'package_line_created_by': 'int',
        'package_line_updated_by': 'int'
    }

    attribute_map = {
        'id': 'id',
        'activity_id': 'activity_id',
        'activity_ids': 'activity_ids',
        'nr': 'nr',
        'status_id': 'status_id',
        'status_name': 'status_name',
        'nr_of_packages': 'nr_of_packages',
        'package_type_name': 'package_type_name',
        'package_type_id': 'package_type_id',
        'barcode': 'barcode',
        'barcodes': 'barcodes',
        'action_type_id': 'action_type_id',
        'action_type_name': 'action_type_name',
        'checked_by_driver': 'checked_by_driver',
        'adr': 'ADR',
        'adr_class': 'ADR_class',
        'adr_un_nr': 'ADR_UN_nr',
        'temp': 'temp',
        'temp_min': 'temp_min',
        'temp_max': 'temp_max',
        'hs_code': 'hs_code',
        'description': 'description',
        'compartments': 'compartments',
        'active': 'active',
        'applied_capacities': 'applied_capacities',
        'capacities': 'capacities',
        'activity_links': 'activity_links',
        'links': 'links',
        'meta_data': 'meta_data',
        'notes': 'notes',
        'files': 'files',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'package_line_created_at': 'package_line_created_at',
        'package_line_updated_at': 'package_line_updated_at',
        'package_line_created_by': 'package_line_created_by',
        'package_line_updated_by': 'package_line_updated_by'
    }

    def __init__(self, id=None, activity_id=None, activity_ids=None, nr=None, status_id=None, status_name=None, nr_of_packages=None, package_type_name=None, package_type_id=None, barcode=None, barcodes=None, action_type_id=None, action_type_name=None, checked_by_driver=None, adr=None, adr_class=None, adr_un_nr=None, temp=None, temp_min=None, temp_max=None, hs_code=None, description=None, compartments=None, active=None, applied_capacities=None, capacities=None, activity_links=None, links=None, meta_data=None, notes=None, files=None, created_at=None, updated_at=None, package_line_created_at=None, package_line_updated_at=None, package_line_created_by=None, package_line_updated_by=None, _configuration=None):  # noqa: E501
        """PackageLineModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._activity_id = None
        self._activity_ids = None
        self._nr = None
        self._status_id = None
        self._status_name = None
        self._nr_of_packages = None
        self._package_type_name = None
        self._package_type_id = None
        self._barcode = None
        self._barcodes = None
        self._action_type_id = None
        self._action_type_name = None
        self._checked_by_driver = None
        self._adr = None
        self._adr_class = None
        self._adr_un_nr = None
        self._temp = None
        self._temp_min = None
        self._temp_max = None
        self._hs_code = None
        self._description = None
        self._compartments = None
        self._active = None
        self._applied_capacities = None
        self._capacities = None
        self._activity_links = None
        self._links = None
        self._meta_data = None
        self._notes = None
        self._files = None
        self._created_at = None
        self._updated_at = None
        self._package_line_created_at = None
        self._package_line_updated_at = None
        self._package_line_created_by = None
        self._package_line_updated_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if activity_id is not None:
            self.activity_id = activity_id
        if activity_ids is not None:
            self.activity_ids = activity_ids
        if nr is not None:
            self.nr = nr
        if status_id is not None:
            self.status_id = status_id
        if status_name is not None:
            self.status_name = status_name
        if nr_of_packages is not None:
            self.nr_of_packages = nr_of_packages
        if package_type_name is not None:
            self.package_type_name = package_type_name
        if package_type_id is not None:
            self.package_type_id = package_type_id
        if barcode is not None:
            self.barcode = barcode
        if barcodes is not None:
            self.barcodes = barcodes
        if action_type_id is not None:
            self.action_type_id = action_type_id
        if action_type_name is not None:
            self.action_type_name = action_type_name
        if checked_by_driver is not None:
            self.checked_by_driver = checked_by_driver
        if adr is not None:
            self.adr = adr
        if adr_class is not None:
            self.adr_class = adr_class
        if adr_un_nr is not None:
            self.adr_un_nr = adr_un_nr
        if temp is not None:
            self.temp = temp
        if temp_min is not None:
            self.temp_min = temp_min
        if temp_max is not None:
            self.temp_max = temp_max
        if hs_code is not None:
            self.hs_code = hs_code
        if description is not None:
            self.description = description
        if compartments is not None:
            self.compartments = compartments
        if active is not None:
            self.active = active
        if applied_capacities is not None:
            self.applied_capacities = applied_capacities
        if capacities is not None:
            self.capacities = capacities
        if activity_links is not None:
            self.activity_links = activity_links
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data
        if notes is not None:
            self.notes = notes
        if files is not None:
            self.files = files
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if package_line_created_at is not None:
            self.package_line_created_at = package_line_created_at
        if package_line_updated_at is not None:
            self.package_line_updated_at = package_line_updated_at
        if package_line_created_by is not None:
            self.package_line_created_by = package_line_created_by
        if package_line_updated_by is not None:
            self.package_line_updated_by = package_line_updated_by

    @property
    def id(self):
        """Gets the id of this PackageLineModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PackageLineModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def activity_id(self):
        """Gets the activity_id of this PackageLineModel.  # noqa: E501

        Unique Identifier for activity where this packageline is related to  # noqa: E501

        :return: The activity_id of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this PackageLineModel.

        Unique Identifier for activity where this packageline is related to  # noqa: E501

        :param activity_id: The activity_id of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._activity_id = activity_id

    @property
    def activity_ids(self):
        """Gets the activity_ids of this PackageLineModel.  # noqa: E501

        Unique Identifier for activities where this packageline is related to  # noqa: E501

        :return: The activity_ids of this PackageLineModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._activity_ids

    @activity_ids.setter
    def activity_ids(self, activity_ids):
        """Sets the activity_ids of this PackageLineModel.

        Unique Identifier for activities where this packageline is related to  # noqa: E501

        :param activity_ids: The activity_ids of this PackageLineModel.  # noqa: E501
        :type: list[int]
        """

        self._activity_ids = activity_ids

    @property
    def nr(self):
        """Gets the nr of this PackageLineModel.  # noqa: E501

        Number of this PackageLine  # noqa: E501

        :return: The nr of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._nr

    @nr.setter
    def nr(self, nr):
        """Sets the nr of this PackageLineModel.

        Number of this PackageLine  # noqa: E501

        :param nr: The nr of this PackageLineModel.  # noqa: E501
        :type: str
        """

        self._nr = nr

    @property
    def status_id(self):
        """Gets the status_id of this PackageLineModel.  # noqa: E501

        StatusId of this PackageLine, 31: package_line_cancelled, 23: package_line_incomplete, 24: package_line_new, 42: package_line_awaiting, 25: package_line_accepted, 10: package_line_planned, 11: package_line_in_progress, 12: package_line_executed  # noqa: E501

        :return: The status_id of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this PackageLineModel.

        StatusId of this PackageLine, 31: package_line_cancelled, 23: package_line_incomplete, 24: package_line_new, 42: package_line_awaiting, 25: package_line_accepted, 10: package_line_planned, 11: package_line_in_progress, 12: package_line_executed  # noqa: E501

        :param status_id: The status_id of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def status_name(self):
        """Gets the status_name of this PackageLineModel.  # noqa: E501

        PackageLine Status  # noqa: E501

        :return: The status_name of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this PackageLineModel.

        PackageLine Status  # noqa: E501

        :param status_name: The status_name of this PackageLineModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["package_line_cancelled", "package_line_incomplete", "package_line_new", "package_line_awaiting", "package_line_accepted", "package_line_planned", "package_line_in_progress", "package_line_executed"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status_name not in allowed_values):
            raise ValueError(
                "Invalid value for `status_name` ({0}), must be one of {1}"  # noqa: E501
                .format(status_name, allowed_values)
            )

        self._status_name = status_name

    @property
    def nr_of_packages(self):
        """Gets the nr_of_packages of this PackageLineModel.  # noqa: E501

        Number of packages in package line  # noqa: E501

        :return: The nr_of_packages of this PackageLineModel.  # noqa: E501
        :rtype: float
        """
        return self._nr_of_packages

    @nr_of_packages.setter
    def nr_of_packages(self, nr_of_packages):
        """Sets the nr_of_packages of this PackageLineModel.

        Number of packages in package line  # noqa: E501

        :param nr_of_packages: The nr_of_packages of this PackageLineModel.  # noqa: E501
        :type: float
        """

        self._nr_of_packages = nr_of_packages

    @property
    def package_type_name(self):
        """Gets the package_type_name of this PackageLineModel.  # noqa: E501

        Type of the Packages in the package line  # noqa: E501

        :return: The package_type_name of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._package_type_name

    @package_type_name.setter
    def package_type_name(self, package_type_name):
        """Sets the package_type_name of this PackageLineModel.

        Type of the Packages in the package line  # noqa: E501

        :param package_type_name: The package_type_name of this PackageLineModel.  # noqa: E501
        :type: str
        """

        self._package_type_name = package_type_name

    @property
    def package_type_id(self):
        """Gets the package_type_id of this PackageLineModel.  # noqa: E501

        ID of the package type for the packages in this PackageLine  # noqa: E501

        :return: The package_type_id of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._package_type_id

    @package_type_id.setter
    def package_type_id(self, package_type_id):
        """Sets the package_type_id of this PackageLineModel.

        ID of the package type for the packages in this PackageLine  # noqa: E501

        :param package_type_id: The package_type_id of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._package_type_id = package_type_id

    @property
    def barcode(self):
        """Gets the barcode of this PackageLineModel.  # noqa: E501

        Barcode of this packageline  # noqa: E501

        :return: The barcode of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this PackageLineModel.

        Barcode of this packageline  # noqa: E501

        :param barcode: The barcode of this PackageLineModel.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def barcodes(self):
        """Gets the barcodes of this PackageLineModel.  # noqa: E501

        For every barcode in this array, a seperate packageline will be created  # noqa: E501

        :return: The barcodes of this PackageLineModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes):
        """Sets the barcodes of this PackageLineModel.

        For every barcode in this array, a seperate packageline will be created  # noqa: E501

        :param barcodes: The barcodes of this PackageLineModel.  # noqa: E501
        :type: list[str]
        """

        self._barcodes = barcodes

    @property
    def action_type_id(self):
        """Gets the action_type_id of this PackageLineModel.  # noqa: E501

        Action type name, 1:inbound, 2:outbound, 3:assess  # noqa: E501

        :return: The action_type_id of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this PackageLineModel.

        Action type name, 1:inbound, 2:outbound, 3:assess  # noqa: E501

        :param action_type_id: The action_type_id of this PackageLineModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "3"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action_type_id not in allowed_values):
            raise ValueError(
                "Invalid value for `action_type_id` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type_id, allowed_values)
            )

        self._action_type_id = action_type_id

    @property
    def action_type_name(self):
        """Gets the action_type_name of this PackageLineModel.  # noqa: E501

        Action type name  # noqa: E501

        :return: The action_type_name of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._action_type_name

    @action_type_name.setter
    def action_type_name(self, action_type_name):
        """Sets the action_type_name of this PackageLineModel.

        Action type name  # noqa: E501

        :param action_type_name: The action_type_name of this PackageLineModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["inbound", "outbound", "assess"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action_type_name not in allowed_values):
            raise ValueError(
                "Invalid value for `action_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type_name, allowed_values)
            )

        self._action_type_name = action_type_name

    @property
    def checked_by_driver(self):
        """Gets the checked_by_driver of this PackageLineModel.  # noqa: E501

        boolean for whether or not the packages have been checked by the driver  # noqa: E501

        :return: The checked_by_driver of this PackageLineModel.  # noqa: E501
        :rtype: bool
        """
        return self._checked_by_driver

    @checked_by_driver.setter
    def checked_by_driver(self, checked_by_driver):
        """Sets the checked_by_driver of this PackageLineModel.

        boolean for whether or not the packages have been checked by the driver  # noqa: E501

        :param checked_by_driver: The checked_by_driver of this PackageLineModel.  # noqa: E501
        :type: bool
        """

        self._checked_by_driver = checked_by_driver

    @property
    def adr(self):
        """Gets the adr of this PackageLineModel.  # noqa: E501

        boolean for whether or not the packages in this package line should be considered as ADR  # noqa: E501

        :return: The adr of this PackageLineModel.  # noqa: E501
        :rtype: bool
        """
        return self._adr

    @adr.setter
    def adr(self, adr):
        """Sets the adr of this PackageLineModel.

        boolean for whether or not the packages in this package line should be considered as ADR  # noqa: E501

        :param adr: The adr of this PackageLineModel.  # noqa: E501
        :type: bool
        """

        self._adr = adr

    @property
    def adr_class(self):
        """Gets the adr_class of this PackageLineModel.  # noqa: E501

        ADR class of packages in package line  # noqa: E501

        :return: The adr_class of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._adr_class

    @adr_class.setter
    def adr_class(self, adr_class):
        """Sets the adr_class of this PackageLineModel.

        ADR class of packages in package line  # noqa: E501

        :param adr_class: The adr_class of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._adr_class = adr_class

    @property
    def adr_un_nr(self):
        """Gets the adr_un_nr of this PackageLineModel.  # noqa: E501

        ADR UN Nr of packages in package line  # noqa: E501

        :return: The adr_un_nr of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._adr_un_nr

    @adr_un_nr.setter
    def adr_un_nr(self, adr_un_nr):
        """Sets the adr_un_nr of this PackageLineModel.

        ADR UN Nr of packages in package line  # noqa: E501

        :param adr_un_nr: The adr_un_nr of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._adr_un_nr = adr_un_nr

    @property
    def temp(self):
        """Gets the temp of this PackageLineModel.  # noqa: E501

        boolean for whether or not the packages in this package line should be considered as temperature dependent  # noqa: E501

        :return: The temp of this PackageLineModel.  # noqa: E501
        :rtype: bool
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this PackageLineModel.

        boolean for whether or not the packages in this package line should be considered as temperature dependent  # noqa: E501

        :param temp: The temp of this PackageLineModel.  # noqa: E501
        :type: bool
        """

        self._temp = temp

    @property
    def temp_min(self):
        """Gets the temp_min of this PackageLineModel.  # noqa: E501

        minimum temperature for packages in package line  # noqa: E501

        :return: The temp_min of this PackageLineModel.  # noqa: E501
        :rtype: float
        """
        return self._temp_min

    @temp_min.setter
    def temp_min(self, temp_min):
        """Sets the temp_min of this PackageLineModel.

        minimum temperature for packages in package line  # noqa: E501

        :param temp_min: The temp_min of this PackageLineModel.  # noqa: E501
        :type: float
        """

        self._temp_min = temp_min

    @property
    def temp_max(self):
        """Gets the temp_max of this PackageLineModel.  # noqa: E501

        maximum temperature for packages in package line  # noqa: E501

        :return: The temp_max of this PackageLineModel.  # noqa: E501
        :rtype: float
        """
        return self._temp_max

    @temp_max.setter
    def temp_max(self, temp_max):
        """Sets the temp_max of this PackageLineModel.

        maximum temperature for packages in package line  # noqa: E501

        :param temp_max: The temp_max of this PackageLineModel.  # noqa: E501
        :type: float
        """

        self._temp_max = temp_max

    @property
    def hs_code(self):
        """Gets the hs_code of this PackageLineModel.  # noqa: E501

        Harmonized System code for packages in this package line  # noqa: E501

        :return: The hs_code of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """Sets the hs_code of this PackageLineModel.

        Harmonized System code for packages in this package line  # noqa: E501

        :param hs_code: The hs_code of this PackageLineModel.  # noqa: E501
        :type: str
        """

        self._hs_code = hs_code

    @property
    def description(self):
        """Gets the description of this PackageLineModel.  # noqa: E501

        description of this package_line  # noqa: E501

        :return: The description of this PackageLineModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PackageLineModel.

        description of this package_line  # noqa: E501

        :param description: The description of this PackageLineModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def compartments(self):
        """Gets the compartments of this PackageLineModel.  # noqa: E501

          # noqa: E501

        :return: The compartments of this PackageLineModel.  # noqa: E501
        :rtype: list[CompartmentModel]
        """
        return self._compartments

    @compartments.setter
    def compartments(self, compartments):
        """Sets the compartments of this PackageLineModel.

          # noqa: E501

        :param compartments: The compartments of this PackageLineModel.  # noqa: E501
        :type: list[CompartmentModel]
        """

        self._compartments = compartments

    @property
    def active(self):
        """Gets the active of this PackageLineModel.  # noqa: E501

        if active=0: package line has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this PackageLineModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PackageLineModel.

        if active=0: package line has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this PackageLineModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def applied_capacities(self):
        """Gets the applied_capacities of this PackageLineModel.  # noqa: E501

          # noqa: E501

        :return: The applied_capacities of this PackageLineModel.  # noqa: E501
        :rtype: object
        """
        return self._applied_capacities

    @applied_capacities.setter
    def applied_capacities(self, applied_capacities):
        """Sets the applied_capacities of this PackageLineModel.

          # noqa: E501

        :param applied_capacities: The applied_capacities of this PackageLineModel.  # noqa: E501
        :type: object
        """

        self._applied_capacities = applied_capacities

    @property
    def capacities(self):
        """Gets the capacities of this PackageLineModel.  # noqa: E501

          # noqa: E501

        :return: The capacities of this PackageLineModel.  # noqa: E501
        :rtype: list[CapacityModel]
        """
        return self._capacities

    @capacities.setter
    def capacities(self, capacities):
        """Sets the capacities of this PackageLineModel.

          # noqa: E501

        :param capacities: The capacities of this PackageLineModel.  # noqa: E501
        :type: list[CapacityModel]
        """

        self._capacities = capacities

    @property
    def activity_links(self):
        """Gets the activity_links of this PackageLineModel.  # noqa: E501

        links to activities connected to this package_line  # noqa: E501

        :return: The activity_links of this PackageLineModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._activity_links

    @activity_links.setter
    def activity_links(self, activity_links):
        """Sets the activity_links of this PackageLineModel.

        links to activities connected to this package_line  # noqa: E501

        :param activity_links: The activity_links of this PackageLineModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._activity_links = activity_links

    @property
    def links(self):
        """Gets the links of this PackageLineModel.  # noqa: E501

          # noqa: E501

        :return: The links of this PackageLineModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PackageLineModel.

          # noqa: E501

        :param links: The links of this PackageLineModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this PackageLineModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this PackageLineModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this PackageLineModel.

          # noqa: E501

        :param meta_data: The meta_data of this PackageLineModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def notes(self):
        """Gets the notes of this PackageLineModel.  # noqa: E501

          # noqa: E501

        :return: The notes of this PackageLineModel.  # noqa: E501
        :rtype: list[NoteModel]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PackageLineModel.

          # noqa: E501

        :param notes: The notes of this PackageLineModel.  # noqa: E501
        :type: list[NoteModel]
        """

        self._notes = notes

    @property
    def files(self):
        """Gets the files of this PackageLineModel.  # noqa: E501

          # noqa: E501

        :return: The files of this PackageLineModel.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this PackageLineModel.

          # noqa: E501

        :param files: The files of this PackageLineModel.  # noqa: E501
        :type: list[FileModel]
        """

        self._files = files

    @property
    def created_at(self):
        """Gets the created_at of this PackageLineModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The created_at of this PackageLineModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PackageLineModel.

        created_at date time  # noqa: E501

        :param created_at: The created_at of this PackageLineModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PackageLineModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The updated_at of this PackageLineModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PackageLineModel.

        updated_at date time  # noqa: E501

        :param updated_at: The updated_at of this PackageLineModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def package_line_created_at(self):
        """Gets the package_line_created_at of this PackageLineModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The package_line_created_at of this PackageLineModel.  # noqa: E501
        :rtype: datetime
        """
        return self._package_line_created_at

    @package_line_created_at.setter
    def package_line_created_at(self, package_line_created_at):
        """Sets the package_line_created_at of this PackageLineModel.

        created_at date time  # noqa: E501

        :param package_line_created_at: The package_line_created_at of this PackageLineModel.  # noqa: E501
        :type: datetime
        """

        self._package_line_created_at = package_line_created_at

    @property
    def package_line_updated_at(self):
        """Gets the package_line_updated_at of this PackageLineModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The package_line_updated_at of this PackageLineModel.  # noqa: E501
        :rtype: datetime
        """
        return self._package_line_updated_at

    @package_line_updated_at.setter
    def package_line_updated_at(self, package_line_updated_at):
        """Sets the package_line_updated_at of this PackageLineModel.

        updated_at date time  # noqa: E501

        :param package_line_updated_at: The package_line_updated_at of this PackageLineModel.  # noqa: E501
        :type: datetime
        """

        self._package_line_updated_at = package_line_updated_at

    @property
    def package_line_created_by(self):
        """Gets the package_line_created_by of this PackageLineModel.  # noqa: E501

        created_by user id  # noqa: E501

        :return: The package_line_created_by of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._package_line_created_by

    @package_line_created_by.setter
    def package_line_created_by(self, package_line_created_by):
        """Sets the package_line_created_by of this PackageLineModel.

        created_by user id  # noqa: E501

        :param package_line_created_by: The package_line_created_by of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._package_line_created_by = package_line_created_by

    @property
    def package_line_updated_by(self):
        """Gets the package_line_updated_by of this PackageLineModel.  # noqa: E501

        updated_by user id  # noqa: E501

        :return: The package_line_updated_by of this PackageLineModel.  # noqa: E501
        :rtype: int
        """
        return self._package_line_updated_by

    @package_line_updated_by.setter
    def package_line_updated_by(self, package_line_updated_by):
        """Sets the package_line_updated_by of this PackageLineModel.

        updated_by user id  # noqa: E501

        :param package_line_updated_by: The package_line_updated_by of this PackageLineModel.  # noqa: E501
        :type: int
        """

        self._package_line_updated_by = package_line_updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageLineModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageLineModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageLineModel):
            return True

        return self.to_dict() != other.to_dict()
