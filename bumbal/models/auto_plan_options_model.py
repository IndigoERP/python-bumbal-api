# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class AutoPlanOptionsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'synchronous': 'bool',
        'respond_after_apply_planning': 'bool',
        'allow_unplanned_activities': 'bool',
        'consider_historic_traffic_info': 'bool',
        'in_sequence': 'bool',
        'do_not_apply_planning': 'bool'
    }

    attribute_map = {
        'synchronous': 'synchronous',
        'respond_after_apply_planning': 'respond_after_apply_planning',
        'allow_unplanned_activities': 'allow_unplanned_activities',
        'consider_historic_traffic_info': 'consider_historic_traffic_info',
        'in_sequence': 'in_sequence',
        'do_not_apply_planning': 'do_not_apply_planning'
    }

    def __init__(self, synchronous=None, respond_after_apply_planning=None, allow_unplanned_activities=None, consider_historic_traffic_info=None, in_sequence=None, do_not_apply_planning=None, _configuration=None):  # noqa: E501
        """AutoPlanOptionsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._synchronous = None
        self._respond_after_apply_planning = None
        self._allow_unplanned_activities = None
        self._consider_historic_traffic_info = None
        self._in_sequence = None
        self._do_not_apply_planning = None
        self.discriminator = None

        if synchronous is not None:
            self.synchronous = synchronous
        if respond_after_apply_planning is not None:
            self.respond_after_apply_planning = respond_after_apply_planning
        if allow_unplanned_activities is not None:
            self.allow_unplanned_activities = allow_unplanned_activities
        if consider_historic_traffic_info is not None:
            self.consider_historic_traffic_info = consider_historic_traffic_info
        if in_sequence is not None:
            self.in_sequence = in_sequence
        if do_not_apply_planning is not None:
            self.do_not_apply_planning = do_not_apply_planning

    @property
    def synchronous(self):
        """Gets the synchronous of this AutoPlanOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The synchronous of this AutoPlanOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._synchronous

    @synchronous.setter
    def synchronous(self, synchronous):
        """Sets the synchronous of this AutoPlanOptionsModel.

          # noqa: E501

        :param synchronous: The synchronous of this AutoPlanOptionsModel.  # noqa: E501
        :type: bool
        """

        self._synchronous = synchronous

    @property
    def respond_after_apply_planning(self):
        """Gets the respond_after_apply_planning of this AutoPlanOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The respond_after_apply_planning of this AutoPlanOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._respond_after_apply_planning

    @respond_after_apply_planning.setter
    def respond_after_apply_planning(self, respond_after_apply_planning):
        """Sets the respond_after_apply_planning of this AutoPlanOptionsModel.

          # noqa: E501

        :param respond_after_apply_planning: The respond_after_apply_planning of this AutoPlanOptionsModel.  # noqa: E501
        :type: bool
        """

        self._respond_after_apply_planning = respond_after_apply_planning

    @property
    def allow_unplanned_activities(self):
        """Gets the allow_unplanned_activities of this AutoPlanOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The allow_unplanned_activities of this AutoPlanOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unplanned_activities

    @allow_unplanned_activities.setter
    def allow_unplanned_activities(self, allow_unplanned_activities):
        """Sets the allow_unplanned_activities of this AutoPlanOptionsModel.

          # noqa: E501

        :param allow_unplanned_activities: The allow_unplanned_activities of this AutoPlanOptionsModel.  # noqa: E501
        :type: bool
        """

        self._allow_unplanned_activities = allow_unplanned_activities

    @property
    def consider_historic_traffic_info(self):
        """Gets the consider_historic_traffic_info of this AutoPlanOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The consider_historic_traffic_info of this AutoPlanOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._consider_historic_traffic_info

    @consider_historic_traffic_info.setter
    def consider_historic_traffic_info(self, consider_historic_traffic_info):
        """Sets the consider_historic_traffic_info of this AutoPlanOptionsModel.

          # noqa: E501

        :param consider_historic_traffic_info: The consider_historic_traffic_info of this AutoPlanOptionsModel.  # noqa: E501
        :type: bool
        """

        self._consider_historic_traffic_info = consider_historic_traffic_info

    @property
    def in_sequence(self):
        """Gets the in_sequence of this AutoPlanOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The in_sequence of this AutoPlanOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._in_sequence

    @in_sequence.setter
    def in_sequence(self, in_sequence):
        """Sets the in_sequence of this AutoPlanOptionsModel.

          # noqa: E501

        :param in_sequence: The in_sequence of this AutoPlanOptionsModel.  # noqa: E501
        :type: bool
        """

        self._in_sequence = in_sequence

    @property
    def do_not_apply_planning(self):
        """Gets the do_not_apply_planning of this AutoPlanOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The do_not_apply_planning of this AutoPlanOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._do_not_apply_planning

    @do_not_apply_planning.setter
    def do_not_apply_planning(self, do_not_apply_planning):
        """Sets the do_not_apply_planning of this AutoPlanOptionsModel.

          # noqa: E501

        :param do_not_apply_planning: The do_not_apply_planning of this AutoPlanOptionsModel.  # noqa: E501
        :type: bool
        """

        self._do_not_apply_planning = do_not_apply_planning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoPlanOptionsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoPlanOptionsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutoPlanOptionsModel):
            return True

        return self.to_dict() != other.to_dict()
