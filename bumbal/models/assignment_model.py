# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class AssignmentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'party_id': 'int',
        'booking_account_id': 'int',
        'tag_names': 'list[str]',
        'tag_ids': 'list[int]',
        'activities': 'list[ActivityModel]',
        'booking_account': 'PartyModel',
        'status_id': 'int',
        'nr': 'str',
        'party_link': 'list[LinkModel]',
        'account_name': 'str',
        'party_name': 'str',
        'reference': 'str',
        'description': 'str',
        'remarks': 'str',
        'date_time_from': 'datetime',
        'date_time_to': 'datetime',
        'multi_day': 'bool',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]',
        'notes': 'list[NoteModel]',
        'files': 'list[FileModel]',
        'assignment_created_at': 'datetime',
        'assignment_updated_at': 'datetime',
        'assignment_created_by': 'int',
        'assignment_updated_by': 'int',
        'assignment_created_by_user': 'UsersModel',
        'assignment_updated_by_user': 'UsersModel',
        'assignment_active': 'bool',
        'assignment_removed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'party_id': 'party_id',
        'booking_account_id': 'booking_account_id',
        'tag_names': 'tag_names',
        'tag_ids': 'tag_ids',
        'activities': 'activities',
        'booking_account': 'booking_account',
        'status_id': 'status_id',
        'nr': 'nr',
        'party_link': 'party_link',
        'account_name': 'account_name',
        'party_name': 'party_name',
        'reference': 'reference',
        'description': 'description',
        'remarks': 'remarks',
        'date_time_from': 'date_time_from',
        'date_time_to': 'date_time_to',
        'multi_day': 'multi_day',
        'links': 'links',
        'meta_data': 'meta_data',
        'notes': 'notes',
        'files': 'files',
        'assignment_created_at': 'assignment_created_at',
        'assignment_updated_at': 'assignment_updated_at',
        'assignment_created_by': 'assignment_created_by',
        'assignment_updated_by': 'assignment_updated_by',
        'assignment_created_by_user': 'assignment_created_by_user',
        'assignment_updated_by_user': 'assignment_updated_by_user',
        'assignment_active': 'assignment_active',
        'assignment_removed': 'assignment_removed'
    }

    def __init__(self, id=None, party_id=None, booking_account_id=None, tag_names=None, tag_ids=None, activities=None, booking_account=None, status_id=None, nr=None, party_link=None, account_name=None, party_name=None, reference=None, description=None, remarks=None, date_time_from=None, date_time_to=None, multi_day=None, links=None, meta_data=None, notes=None, files=None, assignment_created_at=None, assignment_updated_at=None, assignment_created_by=None, assignment_updated_by=None, assignment_created_by_user=None, assignment_updated_by_user=None, assignment_active=None, assignment_removed=None, _configuration=None):  # noqa: E501
        """AssignmentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._party_id = None
        self._booking_account_id = None
        self._tag_names = None
        self._tag_ids = None
        self._activities = None
        self._booking_account = None
        self._status_id = None
        self._nr = None
        self._party_link = None
        self._account_name = None
        self._party_name = None
        self._reference = None
        self._description = None
        self._remarks = None
        self._date_time_from = None
        self._date_time_to = None
        self._multi_day = None
        self._links = None
        self._meta_data = None
        self._notes = None
        self._files = None
        self._assignment_created_at = None
        self._assignment_updated_at = None
        self._assignment_created_by = None
        self._assignment_updated_by = None
        self._assignment_created_by_user = None
        self._assignment_updated_by_user = None
        self._assignment_active = None
        self._assignment_removed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if party_id is not None:
            self.party_id = party_id
        if booking_account_id is not None:
            self.booking_account_id = booking_account_id
        if tag_names is not None:
            self.tag_names = tag_names
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if activities is not None:
            self.activities = activities
        if booking_account is not None:
            self.booking_account = booking_account
        if status_id is not None:
            self.status_id = status_id
        if nr is not None:
            self.nr = nr
        if party_link is not None:
            self.party_link = party_link
        if account_name is not None:
            self.account_name = account_name
        if party_name is not None:
            self.party_name = party_name
        if reference is not None:
            self.reference = reference
        if description is not None:
            self.description = description
        if remarks is not None:
            self.remarks = remarks
        if date_time_from is not None:
            self.date_time_from = date_time_from
        if date_time_to is not None:
            self.date_time_to = date_time_to
        if multi_day is not None:
            self.multi_day = multi_day
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data
        if notes is not None:
            self.notes = notes
        if files is not None:
            self.files = files
        if assignment_created_at is not None:
            self.assignment_created_at = assignment_created_at
        if assignment_updated_at is not None:
            self.assignment_updated_at = assignment_updated_at
        if assignment_created_by is not None:
            self.assignment_created_by = assignment_created_by
        if assignment_updated_by is not None:
            self.assignment_updated_by = assignment_updated_by
        if assignment_created_by_user is not None:
            self.assignment_created_by_user = assignment_created_by_user
        if assignment_updated_by_user is not None:
            self.assignment_updated_by_user = assignment_updated_by_user
        if assignment_active is not None:
            self.assignment_active = assignment_active
        if assignment_removed is not None:
            self.assignment_removed = assignment_removed

    @property
    def id(self):
        """Gets the id of this AssignmentModel.  # noqa: E501

        Unique ID of this Assignment  # noqa: E501

        :return: The id of this AssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentModel.

        Unique ID of this Assignment  # noqa: E501

        :param id: The id of this AssignmentModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def party_id(self):
        """Gets the party_id of this AssignmentModel.  # noqa: E501

        Party ID  # noqa: E501

        :return: The party_id of this AssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """Sets the party_id of this AssignmentModel.

        Party ID  # noqa: E501

        :param party_id: The party_id of this AssignmentModel.  # noqa: E501
        :type: int
        """

        self._party_id = party_id

    @property
    def booking_account_id(self):
        """Gets the booking_account_id of this AssignmentModel.  # noqa: E501

        Booking account ID  # noqa: E501

        :return: The booking_account_id of this AssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._booking_account_id

    @booking_account_id.setter
    def booking_account_id(self, booking_account_id):
        """Sets the booking_account_id of this AssignmentModel.

        Booking account ID  # noqa: E501

        :param booking_account_id: The booking_account_id of this AssignmentModel.  # noqa: E501
        :type: int
        """

        self._booking_account_id = booking_account_id

    @property
    def tag_names(self):
        """Gets the tag_names of this AssignmentModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this AssignmentModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this AssignmentModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this AssignmentModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def tag_ids(self):
        """Gets the tag_ids of this AssignmentModel.  # noqa: E501

        Tag ids  # noqa: E501

        :return: The tag_ids of this AssignmentModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this AssignmentModel.

        Tag ids  # noqa: E501

        :param tag_ids: The tag_ids of this AssignmentModel.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def activities(self):
        """Gets the activities of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The activities of this AssignmentModel.  # noqa: E501
        :rtype: list[ActivityModel]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this AssignmentModel.

          # noqa: E501

        :param activities: The activities of this AssignmentModel.  # noqa: E501
        :type: list[ActivityModel]
        """

        self._activities = activities

    @property
    def booking_account(self):
        """Gets the booking_account of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The booking_account of this AssignmentModel.  # noqa: E501
        :rtype: PartyModel
        """
        return self._booking_account

    @booking_account.setter
    def booking_account(self, booking_account):
        """Sets the booking_account of this AssignmentModel.

          # noqa: E501

        :param booking_account: The booking_account of this AssignmentModel.  # noqa: E501
        :type: PartyModel
        """

        self._booking_account = booking_account

    @property
    def status_id(self):
        """Gets the status_id of this AssignmentModel.  # noqa: E501

        Status ID of this Assignment  # noqa: E501

        :return: The status_id of this AssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this AssignmentModel.

        Status ID of this Assignment  # noqa: E501

        :param status_id: The status_id of this AssignmentModel.  # noqa: E501
        :type: int
        """
        allowed_values = [13, 14, 19, 30, 40]  # noqa: E501
        if (self._configuration.client_side_validation and
                status_id not in allowed_values):
            raise ValueError(
                "Invalid value for `status_id` ({0}), must be one of {1}"  # noqa: E501
                .format(status_id, allowed_values)
            )

        self._status_id = status_id

    @property
    def nr(self):
        """Gets the nr of this AssignmentModel.  # noqa: E501

        Non-Unique number of this Assignment  # noqa: E501

        :return: The nr of this AssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._nr

    @nr.setter
    def nr(self, nr):
        """Sets the nr of this AssignmentModel.

        Non-Unique number of this Assignment  # noqa: E501

        :param nr: The nr of this AssignmentModel.  # noqa: E501
        :type: str
        """

        self._nr = nr

    @property
    def party_link(self):
        """Gets the party_link of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The party_link of this AssignmentModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._party_link

    @party_link.setter
    def party_link(self, party_link):
        """Sets the party_link of this AssignmentModel.

          # noqa: E501

        :param party_link: The party_link of this AssignmentModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._party_link = party_link

    @property
    def account_name(self):
        """Gets the account_name of this AssignmentModel.  # noqa: E501

        Account Name associated with this Assignment  # noqa: E501

        :return: The account_name of this AssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AssignmentModel.

        Account Name associated with this Assignment  # noqa: E501

        :param account_name: The account_name of this AssignmentModel.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def party_name(self):
        """Gets the party_name of this AssignmentModel.  # noqa: E501

        Party Name associated with this Assignment  # noqa: E501

        :return: The party_name of this AssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._party_name

    @party_name.setter
    def party_name(self, party_name):
        """Sets the party_name of this AssignmentModel.

        Party Name associated with this Assignment  # noqa: E501

        :param party_name: The party_name of this AssignmentModel.  # noqa: E501
        :type: str
        """

        self._party_name = party_name

    @property
    def reference(self):
        """Gets the reference of this AssignmentModel.  # noqa: E501

        Reference text of this Assignment  # noqa: E501

        :return: The reference of this AssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AssignmentModel.

        Reference text of this Assignment  # noqa: E501

        :param reference: The reference of this AssignmentModel.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def description(self):
        """Gets the description of this AssignmentModel.  # noqa: E501

        Description text of this Assignment  # noqa: E501

        :return: The description of this AssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssignmentModel.

        Description text of this Assignment  # noqa: E501

        :param description: The description of this AssignmentModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def remarks(self):
        """Gets the remarks of this AssignmentModel.  # noqa: E501

        Remarks about this Assignment  # noqa: E501

        :return: The remarks of this AssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this AssignmentModel.

        Remarks about this Assignment  # noqa: E501

        :param remarks: The remarks of this AssignmentModel.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def date_time_from(self):
        """Gets the date_time_from of this AssignmentModel.  # noqa: E501

        Earliest start time of all Activities is this Assignment  # noqa: E501

        :return: The date_time_from of this AssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_from

    @date_time_from.setter
    def date_time_from(self, date_time_from):
        """Sets the date_time_from of this AssignmentModel.

        Earliest start time of all Activities is this Assignment  # noqa: E501

        :param date_time_from: The date_time_from of this AssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_from = date_time_from

    @property
    def date_time_to(self):
        """Gets the date_time_to of this AssignmentModel.  # noqa: E501

        Latest end time of all Activities is this Assignment  # noqa: E501

        :return: The date_time_to of this AssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_to

    @date_time_to.setter
    def date_time_to(self, date_time_to):
        """Sets the date_time_to of this AssignmentModel.

        Latest end time of all Activities is this Assignment  # noqa: E501

        :param date_time_to: The date_time_to of this AssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_to = date_time_to

    @property
    def multi_day(self):
        """Gets the multi_day of this AssignmentModel.  # noqa: E501

        Multi day type assignment  # noqa: E501

        :return: The multi_day of this AssignmentModel.  # noqa: E501
        :rtype: bool
        """
        return self._multi_day

    @multi_day.setter
    def multi_day(self, multi_day):
        """Sets the multi_day of this AssignmentModel.

        Multi day type assignment  # noqa: E501

        :param multi_day: The multi_day of this AssignmentModel.  # noqa: E501
        :type: bool
        """

        self._multi_day = multi_day

    @property
    def links(self):
        """Gets the links of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The links of this AssignmentModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AssignmentModel.

          # noqa: E501

        :param links: The links of this AssignmentModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this AssignmentModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this AssignmentModel.

          # noqa: E501

        :param meta_data: The meta_data of this AssignmentModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def notes(self):
        """Gets the notes of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The notes of this AssignmentModel.  # noqa: E501
        :rtype: list[NoteModel]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AssignmentModel.

          # noqa: E501

        :param notes: The notes of this AssignmentModel.  # noqa: E501
        :type: list[NoteModel]
        """

        self._notes = notes

    @property
    def files(self):
        """Gets the files of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The files of this AssignmentModel.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this AssignmentModel.

          # noqa: E501

        :param files: The files of this AssignmentModel.  # noqa: E501
        :type: list[FileModel]
        """

        self._files = files

    @property
    def assignment_created_at(self):
        """Gets the assignment_created_at of this AssignmentModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The assignment_created_at of this AssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._assignment_created_at

    @assignment_created_at.setter
    def assignment_created_at(self, assignment_created_at):
        """Sets the assignment_created_at of this AssignmentModel.

        created_at date time  # noqa: E501

        :param assignment_created_at: The assignment_created_at of this AssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._assignment_created_at = assignment_created_at

    @property
    def assignment_updated_at(self):
        """Gets the assignment_updated_at of this AssignmentModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The assignment_updated_at of this AssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._assignment_updated_at

    @assignment_updated_at.setter
    def assignment_updated_at(self, assignment_updated_at):
        """Sets the assignment_updated_at of this AssignmentModel.

        updated_at date time  # noqa: E501

        :param assignment_updated_at: The assignment_updated_at of this AssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._assignment_updated_at = assignment_updated_at

    @property
    def assignment_created_by(self):
        """Gets the assignment_created_by of this AssignmentModel.  # noqa: E501

        created_by user id  # noqa: E501

        :return: The assignment_created_by of this AssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._assignment_created_by

    @assignment_created_by.setter
    def assignment_created_by(self, assignment_created_by):
        """Sets the assignment_created_by of this AssignmentModel.

        created_by user id  # noqa: E501

        :param assignment_created_by: The assignment_created_by of this AssignmentModel.  # noqa: E501
        :type: int
        """

        self._assignment_created_by = assignment_created_by

    @property
    def assignment_updated_by(self):
        """Gets the assignment_updated_by of this AssignmentModel.  # noqa: E501

        updated_by user id  # noqa: E501

        :return: The assignment_updated_by of this AssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._assignment_updated_by

    @assignment_updated_by.setter
    def assignment_updated_by(self, assignment_updated_by):
        """Sets the assignment_updated_by of this AssignmentModel.

        updated_by user id  # noqa: E501

        :param assignment_updated_by: The assignment_updated_by of this AssignmentModel.  # noqa: E501
        :type: int
        """

        self._assignment_updated_by = assignment_updated_by

    @property
    def assignment_created_by_user(self):
        """Gets the assignment_created_by_user of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The assignment_created_by_user of this AssignmentModel.  # noqa: E501
        :rtype: UsersModel
        """
        return self._assignment_created_by_user

    @assignment_created_by_user.setter
    def assignment_created_by_user(self, assignment_created_by_user):
        """Sets the assignment_created_by_user of this AssignmentModel.

          # noqa: E501

        :param assignment_created_by_user: The assignment_created_by_user of this AssignmentModel.  # noqa: E501
        :type: UsersModel
        """

        self._assignment_created_by_user = assignment_created_by_user

    @property
    def assignment_updated_by_user(self):
        """Gets the assignment_updated_by_user of this AssignmentModel.  # noqa: E501

          # noqa: E501

        :return: The assignment_updated_by_user of this AssignmentModel.  # noqa: E501
        :rtype: UsersModel
        """
        return self._assignment_updated_by_user

    @assignment_updated_by_user.setter
    def assignment_updated_by_user(self, assignment_updated_by_user):
        """Sets the assignment_updated_by_user of this AssignmentModel.

          # noqa: E501

        :param assignment_updated_by_user: The assignment_updated_by_user of this AssignmentModel.  # noqa: E501
        :type: UsersModel
        """

        self._assignment_updated_by_user = assignment_updated_by_user

    @property
    def assignment_active(self):
        """Gets the assignment_active of this AssignmentModel.  # noqa: E501

        Assignment is active (=true). Inactive assignments are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui.  # noqa: E501

        :return: The assignment_active of this AssignmentModel.  # noqa: E501
        :rtype: bool
        """
        return self._assignment_active

    @assignment_active.setter
    def assignment_active(self, assignment_active):
        """Sets the assignment_active of this AssignmentModel.

        Assignment is active (=true). Inactive assignments are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui.  # noqa: E501

        :param assignment_active: The assignment_active of this AssignmentModel.  # noqa: E501
        :type: bool
        """

        self._assignment_active = assignment_active

    @property
    def assignment_removed(self):
        """Gets the assignment_removed of this AssignmentModel.  # noqa: E501

        Assignment is removed (=true). Removed assignments are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui. Removed assignments are usually irrepairable.  # noqa: E501

        :return: The assignment_removed of this AssignmentModel.  # noqa: E501
        :rtype: bool
        """
        return self._assignment_removed

    @assignment_removed.setter
    def assignment_removed(self, assignment_removed):
        """Sets the assignment_removed of this AssignmentModel.

        Assignment is removed (=true). Removed assignments are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui. Removed assignments are usually irrepairable.  # noqa: E501

        :param assignment_removed: The assignment_removed of this AssignmentModel.  # noqa: E501
        :type: bool
        """

        self._assignment_removed = assignment_removed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssignmentModel):
            return True

        return self.to_dict() != other.to_dict()
