# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class NoteCategoryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'sys': 'bool',
        'show_in_app': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sys': 'sys',
        'show_in_app': 'show_in_app'
    }

    def __init__(self, id=None, name=None, sys=None, show_in_app=None, _configuration=None):  # noqa: E501
        """NoteCategoryModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._sys = None
        self._show_in_app = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if sys is not None:
            self.sys = sys
        if show_in_app is not None:
            self.show_in_app = show_in_app

    @property
    def id(self):
        """Gets the id of this NoteCategoryModel.  # noqa: E501

        Unique ID  # noqa: E501

        :return: The id of this NoteCategoryModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteCategoryModel.

        Unique ID  # noqa: E501

        :param id: The id of this NoteCategoryModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NoteCategoryModel.  # noqa: E501

        name of note category  # noqa: E501

        :return: The name of this NoteCategoryModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NoteCategoryModel.

        name of note category  # noqa: E501

        :param name: The name of this NoteCategoryModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sys(self):
        """Gets the sys of this NoteCategoryModel.  # noqa: E501

        system type categories can not be edited or deleted  # noqa: E501

        :return: The sys of this NoteCategoryModel.  # noqa: E501
        :rtype: bool
        """
        return self._sys

    @sys.setter
    def sys(self, sys):
        """Sets the sys of this NoteCategoryModel.

        system type categories can not be edited or deleted  # noqa: E501

        :param sys: The sys of this NoteCategoryModel.  # noqa: E501
        :type: bool
        """

        self._sys = sys

    @property
    def show_in_app(self):
        """Gets the show_in_app of this NoteCategoryModel.  # noqa: E501

        Whether the note category notes should be visible for teh drivers usign the bumbal mobile app  # noqa: E501

        :return: The show_in_app of this NoteCategoryModel.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_app

    @show_in_app.setter
    def show_in_app(self, show_in_app):
        """Sets the show_in_app of this NoteCategoryModel.

        Whether the note category notes should be visible for teh drivers usign the bumbal mobile app  # noqa: E501

        :param show_in_app: The show_in_app of this NoteCategoryModel.  # noqa: E501
        :type: bool
        """

        self._show_in_app = show_in_app

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteCategoryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteCategoryModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NoteCategoryModel):
            return True

        return self.to_dict() != other.to_dict()
