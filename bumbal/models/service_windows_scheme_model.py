# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ServiceWindowsSchemeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'even_weeks': 'bool',
        'odd_weeks': 'bool',
        'tags': 'list[TagModel]',
        'zones': 'list[ZoneModel]',
        'brands': 'list[BrandModel]',
        'no_tags': 'bool',
        'no_zones': 'bool',
        'monday': 'object',
        'tuesday': 'object',
        'wednesday': 'object',
        'thursday': 'object',
        'friday': 'object',
        'saturday': 'object',
        'sunday': 'object',
        'min_days_ahead': 'int',
        'max_days_ahead': 'int',
        'service_windows': 'list[ServiceWindowModel]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'even_weeks': 'even_weeks',
        'odd_weeks': 'odd_weeks',
        'tags': 'tags',
        'zones': 'zones',
        'brands': 'brands',
        'no_tags': 'no_tags',
        'no_zones': 'no_zones',
        'monday': 'monday',
        'tuesday': 'tuesday',
        'wednesday': 'wednesday',
        'thursday': 'thursday',
        'friday': 'friday',
        'saturday': 'saturday',
        'sunday': 'sunday',
        'min_days_ahead': 'min_days_ahead',
        'max_days_ahead': 'max_days_ahead',
        'service_windows': 'service_windows'
    }

    def __init__(self, id=None, name=None, even_weeks=None, odd_weeks=None, tags=None, zones=None, brands=None, no_tags=None, no_zones=None, monday=None, tuesday=None, wednesday=None, thursday=None, friday=None, saturday=None, sunday=None, min_days_ahead=None, max_days_ahead=None, service_windows=None, _configuration=None):  # noqa: E501
        """ServiceWindowsSchemeModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._even_weeks = None
        self._odd_weeks = None
        self._tags = None
        self._zones = None
        self._brands = None
        self._no_tags = None
        self._no_zones = None
        self._monday = None
        self._tuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self._sunday = None
        self._min_days_ahead = None
        self._max_days_ahead = None
        self._service_windows = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if even_weeks is not None:
            self.even_weeks = even_weeks
        if odd_weeks is not None:
            self.odd_weeks = odd_weeks
        if tags is not None:
            self.tags = tags
        if zones is not None:
            self.zones = zones
        if brands is not None:
            self.brands = brands
        if no_tags is not None:
            self.no_tags = no_tags
        if no_zones is not None:
            self.no_zones = no_zones
        if monday is not None:
            self.monday = monday
        if tuesday is not None:
            self.tuesday = tuesday
        if wednesday is not None:
            self.wednesday = wednesday
        if thursday is not None:
            self.thursday = thursday
        if friday is not None:
            self.friday = friday
        if saturday is not None:
            self.saturday = saturday
        if sunday is not None:
            self.sunday = sunday
        if min_days_ahead is not None:
            self.min_days_ahead = min_days_ahead
        if max_days_ahead is not None:
            self.max_days_ahead = max_days_ahead
        if service_windows is not None:
            self.service_windows = service_windows

    @property
    def id(self):
        """Gets the id of this ServiceWindowsSchemeModel.  # noqa: E501

        Unique ID  # noqa: E501

        :return: The id of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceWindowsSchemeModel.

        Unique ID  # noqa: E501

        :param id: The id of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceWindowsSchemeModel.  # noqa: E501

        Service windows scheme name  # noqa: E501

        :return: The name of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceWindowsSchemeModel.

        Service windows scheme name  # noqa: E501

        :param name: The name of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def even_weeks(self):
        """Gets the even_weeks of this ServiceWindowsSchemeModel.  # noqa: E501

        even weeks  # noqa: E501

        :return: The even_weeks of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: bool
        """
        return self._even_weeks

    @even_weeks.setter
    def even_weeks(self, even_weeks):
        """Sets the even_weeks of this ServiceWindowsSchemeModel.

        even weeks  # noqa: E501

        :param even_weeks: The even_weeks of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: bool
        """

        self._even_weeks = even_weeks

    @property
    def odd_weeks(self):
        """Gets the odd_weeks of this ServiceWindowsSchemeModel.  # noqa: E501

        odd weeks  # noqa: E501

        :return: The odd_weeks of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: bool
        """
        return self._odd_weeks

    @odd_weeks.setter
    def odd_weeks(self, odd_weeks):
        """Sets the odd_weeks of this ServiceWindowsSchemeModel.

        odd weeks  # noqa: E501

        :param odd_weeks: The odd_weeks of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: bool
        """

        self._odd_weeks = odd_weeks

    @property
    def tags(self):
        """Gets the tags of this ServiceWindowsSchemeModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServiceWindowsSchemeModel.

          # noqa: E501

        :param tags: The tags of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def zones(self):
        """Gets the zones of this ServiceWindowsSchemeModel.  # noqa: E501

          # noqa: E501

        :return: The zones of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: list[ZoneModel]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this ServiceWindowsSchemeModel.

          # noqa: E501

        :param zones: The zones of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: list[ZoneModel]
        """

        self._zones = zones

    @property
    def brands(self):
        """Gets the brands of this ServiceWindowsSchemeModel.  # noqa: E501

          # noqa: E501

        :return: The brands of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: list[BrandModel]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this ServiceWindowsSchemeModel.

          # noqa: E501

        :param brands: The brands of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: list[BrandModel]
        """

        self._brands = brands

    @property
    def no_tags(self):
        """Gets the no_tags of this ServiceWindowsSchemeModel.  # noqa: E501

        No tags boolean value  # noqa: E501

        :return: The no_tags of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: bool
        """
        return self._no_tags

    @no_tags.setter
    def no_tags(self, no_tags):
        """Sets the no_tags of this ServiceWindowsSchemeModel.

        No tags boolean value  # noqa: E501

        :param no_tags: The no_tags of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: bool
        """

        self._no_tags = no_tags

    @property
    def no_zones(self):
        """Gets the no_zones of this ServiceWindowsSchemeModel.  # noqa: E501

        No zones boolean value  # noqa: E501

        :return: The no_zones of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: bool
        """
        return self._no_zones

    @no_zones.setter
    def no_zones(self, no_zones):
        """Sets the no_zones of this ServiceWindowsSchemeModel.

        No zones boolean value  # noqa: E501

        :param no_zones: The no_zones of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: bool
        """

        self._no_zones = no_zones

    @property
    def monday(self):
        """Gets the monday of this ServiceWindowsSchemeModel.  # noqa: E501

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :return: The monday of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: object
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this ServiceWindowsSchemeModel.

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :param monday: The monday of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: object
        """

        self._monday = monday

    @property
    def tuesday(self):
        """Gets the tuesday of this ServiceWindowsSchemeModel.  # noqa: E501

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :return: The tuesday of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: object
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this ServiceWindowsSchemeModel.

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :param tuesday: The tuesday of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: object
        """

        self._tuesday = tuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this ServiceWindowsSchemeModel.  # noqa: E501

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :return: The wednesday of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: object
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this ServiceWindowsSchemeModel.

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :param wednesday: The wednesday of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: object
        """

        self._wednesday = wednesday

    @property
    def thursday(self):
        """Gets the thursday of this ServiceWindowsSchemeModel.  # noqa: E501

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :return: The thursday of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: object
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this ServiceWindowsSchemeModel.

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :param thursday: The thursday of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: object
        """

        self._thursday = thursday

    @property
    def friday(self):
        """Gets the friday of this ServiceWindowsSchemeModel.  # noqa: E501

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :return: The friday of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: object
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this ServiceWindowsSchemeModel.

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :param friday: The friday of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: object
        """

        self._friday = friday

    @property
    def saturday(self):
        """Gets the saturday of this ServiceWindowsSchemeModel.  # noqa: E501

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :return: The saturday of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: object
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this ServiceWindowsSchemeModel.

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :param saturday: The saturday of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: object
        """

        self._saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this ServiceWindowsSchemeModel.  # noqa: E501

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :return: The sunday of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: object
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this ServiceWindowsSchemeModel.

        ServiceWindowDayModel containing the cut off information  # noqa: E501

        :param sunday: The sunday of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: object
        """

        self._sunday = sunday

    @property
    def min_days_ahead(self):
        """Gets the min_days_ahead of this ServiceWindowsSchemeModel.  # noqa: E501

        Number of min. days ahead  # noqa: E501

        :return: The min_days_ahead of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: int
        """
        return self._min_days_ahead

    @min_days_ahead.setter
    def min_days_ahead(self, min_days_ahead):
        """Sets the min_days_ahead of this ServiceWindowsSchemeModel.

        Number of min. days ahead  # noqa: E501

        :param min_days_ahead: The min_days_ahead of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: int
        """

        self._min_days_ahead = min_days_ahead

    @property
    def max_days_ahead(self):
        """Gets the max_days_ahead of this ServiceWindowsSchemeModel.  # noqa: E501

        Number of max. days ahead  # noqa: E501

        :return: The max_days_ahead of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: int
        """
        return self._max_days_ahead

    @max_days_ahead.setter
    def max_days_ahead(self, max_days_ahead):
        """Sets the max_days_ahead of this ServiceWindowsSchemeModel.

        Number of max. days ahead  # noqa: E501

        :param max_days_ahead: The max_days_ahead of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: int
        """

        self._max_days_ahead = max_days_ahead

    @property
    def service_windows(self):
        """Gets the service_windows of this ServiceWindowsSchemeModel.  # noqa: E501

          # noqa: E501

        :return: The service_windows of this ServiceWindowsSchemeModel.  # noqa: E501
        :rtype: list[ServiceWindowModel]
        """
        return self._service_windows

    @service_windows.setter
    def service_windows(self, service_windows):
        """Sets the service_windows of this ServiceWindowsSchemeModel.

          # noqa: E501

        :param service_windows: The service_windows of this ServiceWindowsSchemeModel.  # noqa: E501
        :type: list[ServiceWindowModel]
        """

        self._service_windows = service_windows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceWindowsSchemeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceWindowsSchemeModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceWindowsSchemeModel):
            return True

        return self.to_dict() != other.to_dict()
