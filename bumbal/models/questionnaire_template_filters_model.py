# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class QuestionnaireTemplateFiltersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'list[int]',
        'tag_names': 'list[str]',
        'zone_names': 'list[str]',
        'link': 'list[object]',
        'links': 'list[object]',
        'search_text': 'str',
        'zone_id': 'int',
        'brand_id': 'int',
        'updated_at_since': 'datetime',
        'updated_at_till': 'datetime',
        'questionnaire_type_name': 'object'
    }

    attribute_map = {
        'id': 'id',
        'tag_names': 'tag_names',
        'zone_names': 'zone_names',
        'link': 'link',
        'links': 'links',
        'search_text': 'search_text',
        'zone_id': 'zone_id',
        'brand_id': 'brand_id',
        'updated_at_since': 'updated_at_since',
        'updated_at_till': 'updated_at_till',
        'questionnaire_type_name': 'questionnaire_type_name'
    }

    def __init__(self, id=None, tag_names=None, zone_names=None, link=None, links=None, search_text=None, zone_id=None, brand_id=None, updated_at_since=None, updated_at_till=None, questionnaire_type_name=None, _configuration=None):  # noqa: E501
        """QuestionnaireTemplateFiltersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._tag_names = None
        self._zone_names = None
        self._link = None
        self._links = None
        self._search_text = None
        self._zone_id = None
        self._brand_id = None
        self._updated_at_since = None
        self._updated_at_till = None
        self._questionnaire_type_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tag_names is not None:
            self.tag_names = tag_names
        if zone_names is not None:
            self.zone_names = zone_names
        if link is not None:
            self.link = link
        if links is not None:
            self.links = links
        if search_text is not None:
            self.search_text = search_text
        if zone_id is not None:
            self.zone_id = zone_id
        if brand_id is not None:
            self.brand_id = brand_id
        if updated_at_since is not None:
            self.updated_at_since = updated_at_since
        if updated_at_till is not None:
            self.updated_at_till = updated_at_till
        if questionnaire_type_name is not None:
            self.questionnaire_type_name = questionnaire_type_name

    @property
    def id(self):
        """Gets the id of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        QuestionnaireTemplate id's  # noqa: E501

        :return: The id of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionnaireTemplateFiltersModel.

        QuestionnaireTemplate id's  # noqa: E501

        :param id: The id of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._id = id

    @property
    def tag_names(self):
        """Gets the tag_names of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this QuestionnaireTemplateFiltersModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def zone_names(self):
        """Gets the zone_names of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Zone names  # noqa: E501

        :return: The zone_names of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_names

    @zone_names.setter
    def zone_names(self, zone_names):
        """Sets the zone_names of this QuestionnaireTemplateFiltersModel.

        Zone names  # noqa: E501

        :param zone_names: The zone_names of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._zone_names = zone_names

    @property
    def link(self):
        """Gets the link of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Activity Link ids  # noqa: E501

        :return: The link of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this QuestionnaireTemplateFiltersModel.

        Activity Link ids  # noqa: E501

        :param link: The link of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: list[object]
        """

        self._link = link

    @property
    def links(self):
        """Gets the links of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Activity Link ids  # noqa: E501

        :return: The links of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this QuestionnaireTemplateFiltersModel.

        Activity Link ids  # noqa: E501

        :param links: The links of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: list[object]
        """

        self._links = links

    @property
    def search_text(self):
        """Gets the search_text of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        free search through text and numeric type columns  # noqa: E501

        :return: The search_text of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this QuestionnaireTemplateFiltersModel.

        free search through text and numeric type columns  # noqa: E501

        :param search_text: The search_text of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def zone_id(self):
        """Gets the zone_id of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Zone ID  # noqa: E501

        :return: The zone_id of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this QuestionnaireTemplateFiltersModel.

        Zone ID  # noqa: E501

        :param zone_id: The zone_id of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: int
        """

        self._zone_id = zone_id

    @property
    def brand_id(self):
        """Gets the brand_id of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Brand ID  # noqa: E501

        :return: The brand_id of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this QuestionnaireTemplateFiltersModel.

        Brand ID  # noqa: E501

        :param brand_id: The brand_id of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: int
        """

        self._brand_id = brand_id

    @property
    def updated_at_since(self):
        """Gets the updated_at_since of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Show updated since  # noqa: E501

        :return: The updated_at_since of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_since

    @updated_at_since.setter
    def updated_at_since(self, updated_at_since):
        """Sets the updated_at_since of this QuestionnaireTemplateFiltersModel.

        Show updated since  # noqa: E501

        :param updated_at_since: The updated_at_since of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at_since = updated_at_since

    @property
    def updated_at_till(self):
        """Gets the updated_at_till of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Show updated till  # noqa: E501

        :return: The updated_at_till of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_till

    @updated_at_till.setter
    def updated_at_till(self, updated_at_till):
        """Sets the updated_at_till of this QuestionnaireTemplateFiltersModel.

        Show updated till  # noqa: E501

        :param updated_at_till: The updated_at_till of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at_till = updated_at_till

    @property
    def questionnaire_type_name(self):
        """Gets the questionnaire_type_name of this QuestionnaireTemplateFiltersModel.  # noqa: E501

        Questionnaire type name  # noqa: E501

        :return: The questionnaire_type_name of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :rtype: object
        """
        return self._questionnaire_type_name

    @questionnaire_type_name.setter
    def questionnaire_type_name(self, questionnaire_type_name):
        """Sets the questionnaire_type_name of this QuestionnaireTemplateFiltersModel.

        Questionnaire type name  # noqa: E501

        :param questionnaire_type_name: The questionnaire_type_name of this QuestionnaireTemplateFiltersModel.  # noqa: E501
        :type: object
        """

        self._questionnaire_type_name = questionnaire_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionnaireTemplateFiltersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionnaireTemplateFiltersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuestionnaireTemplateFiltersModel):
            return True

        return self.to_dict() != other.to_dict()
