# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class LogModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_message': 'str',
        'message': 'str',
        'full_message': 'object',
        'channel': 'str',
        'level_text': 'str',
        'http_method': 'str',
        'api_endpoint': 'str',
        'client_ip': 'str',
        'request_id': 'str',
        'log_type': 'str',
        'timestamp': 'str',
        'user': 'object'
    }

    attribute_map = {
        'original_message': 'original_message',
        'message': 'message',
        'full_message': 'full_message',
        'channel': 'channel',
        'level_text': 'level_text',
        'http_method': 'http_method',
        'api_endpoint': 'api_endpoint',
        'client_ip': 'client_ip',
        'request_id': 'request_id',
        'log_type': 'log_type',
        'timestamp': 'timestamp',
        'user': 'user'
    }

    def __init__(self, original_message=None, message=None, full_message=None, channel=None, level_text=None, http_method=None, api_endpoint=None, client_ip=None, request_id=None, log_type=None, timestamp=None, user=None, _configuration=None):  # noqa: E501
        """LogModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._original_message = None
        self._message = None
        self._full_message = None
        self._channel = None
        self._level_text = None
        self._http_method = None
        self._api_endpoint = None
        self._client_ip = None
        self._request_id = None
        self._log_type = None
        self._timestamp = None
        self._user = None
        self.discriminator = None

        if original_message is not None:
            self.original_message = original_message
        if message is not None:
            self.message = message
        if full_message is not None:
            self.full_message = full_message
        if channel is not None:
            self.channel = channel
        if level_text is not None:
            self.level_text = level_text
        if http_method is not None:
            self.http_method = http_method
        if api_endpoint is not None:
            self.api_endpoint = api_endpoint
        if client_ip is not None:
            self.client_ip = client_ip
        if request_id is not None:
            self.request_id = request_id
        if log_type is not None:
            self.log_type = log_type
        if timestamp is not None:
            self.timestamp = timestamp
        if user is not None:
            self.user = user

    @property
    def original_message(self):
        """Gets the original_message of this LogModel.  # noqa: E501

        The log message.  # noqa: E501

        :return: The original_message of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._original_message

    @original_message.setter
    def original_message(self, original_message):
        """Sets the original_message of this LogModel.

        The log message.  # noqa: E501

        :param original_message: The original_message of this LogModel.  # noqa: E501
        :type: str
        """

        self._original_message = original_message

    @property
    def message(self):
        """Gets the message of this LogModel.  # noqa: E501

        The log message. Can be decorated with extra data  # noqa: E501

        :return: The message of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogModel.

        The log message. Can be decorated with extra data  # noqa: E501

        :param message: The message of this LogModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def full_message(self):
        """Gets the full_message of this LogModel.  # noqa: E501

        Any additional data you want to store about this log message  # noqa: E501

        :return: The full_message of this LogModel.  # noqa: E501
        :rtype: object
        """
        return self._full_message

    @full_message.setter
    def full_message(self, full_message):
        """Sets the full_message of this LogModel.

        Any additional data you want to store about this log message  # noqa: E501

        :param full_message: The full_message of this LogModel.  # noqa: E501
        :type: object
        """

        self._full_message = full_message

    @property
    def channel(self):
        """Gets the channel of this LogModel.  # noqa: E501

        Groups log messages  # noqa: E501

        :return: The channel of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this LogModel.

        Groups log messages  # noqa: E501

        :param channel: The channel of this LogModel.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def level_text(self):
        """Gets the level_text of this LogModel.  # noqa: E501

        Log level  # noqa: E501

        :return: The level_text of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._level_text

    @level_text.setter
    def level_text(self, level_text):
        """Sets the level_text of this LogModel.

        Log level  # noqa: E501

        :param level_text: The level_text of this LogModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]  # noqa: E501
        if (self._configuration.client_side_validation and
                level_text not in allowed_values):
            raise ValueError(
                "Invalid value for `level_text` ({0}), must be one of {1}"  # noqa: E501
                .format(level_text, allowed_values)
            )

        self._level_text = level_text

    @property
    def http_method(self):
        """Gets the http_method of this LogModel.  # noqa: E501

        HTTP method  # noqa: E501

        :return: The http_method of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this LogModel.

        HTTP method  # noqa: E501

        :param http_method: The http_method of this LogModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["POST", "GET", "PATCH", "DELETE", "PUT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                http_method not in allowed_values):
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"  # noqa: E501
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def api_endpoint(self):
        """Gets the api_endpoint of this LogModel.  # noqa: E501

        Path of API endpoint  # noqa: E501

        :return: The api_endpoint of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._api_endpoint

    @api_endpoint.setter
    def api_endpoint(self, api_endpoint):
        """Sets the api_endpoint of this LogModel.

        Path of API endpoint  # noqa: E501

        :param api_endpoint: The api_endpoint of this LogModel.  # noqa: E501
        :type: str
        """

        self._api_endpoint = api_endpoint

    @property
    def client_ip(self):
        """Gets the client_ip of this LogModel.  # noqa: E501

        Client IP  # noqa: E501

        :return: The client_ip of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this LogModel.

        Client IP  # noqa: E501

        :param client_ip: The client_ip of this LogModel.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def request_id(self):
        """Gets the request_id of this LogModel.  # noqa: E501

        Identifier to relate different log messages  # noqa: E501

        :return: The request_id of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this LogModel.

        Identifier to relate different log messages  # noqa: E501

        :param request_id: The request_id of this LogModel.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def log_type(self):
        """Gets the log_type of this LogModel.  # noqa: E501

        Type of log message  # noqa: E501

        :return: The log_type of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this LogModel.

        Type of log message  # noqa: E501

        :param log_type: The log_type of this LogModel.  # noqa: E501
        :type: str
        """

        self._log_type = log_type

    @property
    def timestamp(self):
        """Gets the timestamp of this LogModel.  # noqa: E501

        Datetime of log message  # noqa: E501

        :return: The timestamp of this LogModel.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LogModel.

        Datetime of log message  # noqa: E501

        :param timestamp: The timestamp of this LogModel.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this LogModel.  # noqa: E501

        User details  # noqa: E501

        :return: The user of this LogModel.  # noqa: E501
        :rtype: object
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LogModel.

        User details  # noqa: E501

        :param user: The user of this LogModel.  # noqa: E501
        :type: object
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogModel):
            return True

        return self.to_dict() != other.to_dict()
