# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class CapacityTypeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'properties': 'list[str]',
        'uom_id': 'str',
        'uom_name': 'str',
        'uom': 'UomModel',
        'values_uom': 'UomModel',
        'sys': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'properties': 'properties',
        'uom_id': 'uom_id',
        'uom_name': 'uom_name',
        'uom': 'uom',
        'values_uom': 'values_uom',
        'sys': 'sys'
    }

    def __init__(self, id=None, name=None, properties=None, uom_id=None, uom_name=None, uom=None, values_uom=None, sys=None, _configuration=None):  # noqa: E501
        """CapacityTypeModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._properties = None
        self._uom_id = None
        self._uom_name = None
        self._uom = None
        self._values_uom = None
        self._sys = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if properties is not None:
            self.properties = properties
        if uom_id is not None:
            self.uom_id = uom_id
        if uom_name is not None:
            self.uom_name = uom_name
        if uom is not None:
            self.uom = uom
        if values_uom is not None:
            self.values_uom = values_uom
        if sys is not None:
            self.sys = sys

    @property
    def id(self):
        """Gets the id of this CapacityTypeModel.  # noqa: E501

        Unique ID  # noqa: E501

        :return: The id of this CapacityTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CapacityTypeModel.

        Unique ID  # noqa: E501

        :param id: The id of this CapacityTypeModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CapacityTypeModel.  # noqa: E501

        name of capacity type  # noqa: E501

        :return: The name of this CapacityTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CapacityTypeModel.

        name of capacity type  # noqa: E501

        :param name: The name of this CapacityTypeModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this CapacityTypeModel.  # noqa: E501

        extra properties of capacity type  # noqa: E501

        :return: The properties of this CapacityTypeModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CapacityTypeModel.

        extra properties of capacity type  # noqa: E501

        :param properties: The properties of this CapacityTypeModel.  # noqa: E501
        :type: list[str]
        """

        self._properties = properties

    @property
    def uom_id(self):
        """Gets the uom_id of this CapacityTypeModel.  # noqa: E501

        Unit of Measurement ID  # noqa: E501

        :return: The uom_id of this CapacityTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._uom_id

    @uom_id.setter
    def uom_id(self, uom_id):
        """Sets the uom_id of this CapacityTypeModel.

        Unit of Measurement ID  # noqa: E501

        :param uom_id: The uom_id of this CapacityTypeModel.  # noqa: E501
        :type: str
        """

        self._uom_id = uom_id

    @property
    def uom_name(self):
        """Gets the uom_name of this CapacityTypeModel.  # noqa: E501

        Unit of Measurement Name  # noqa: E501

        :return: The uom_name of this CapacityTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._uom_name

    @uom_name.setter
    def uom_name(self, uom_name):
        """Sets the uom_name of this CapacityTypeModel.

        Unit of Measurement Name  # noqa: E501

        :param uom_name: The uom_name of this CapacityTypeModel.  # noqa: E501
        :type: str
        """

        self._uom_name = uom_name

    @property
    def uom(self):
        """Gets the uom of this CapacityTypeModel.  # noqa: E501

          # noqa: E501

        :return: The uom of this CapacityTypeModel.  # noqa: E501
        :rtype: UomModel
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this CapacityTypeModel.

          # noqa: E501

        :param uom: The uom of this CapacityTypeModel.  # noqa: E501
        :type: UomModel
        """

        self._uom = uom

    @property
    def values_uom(self):
        """Gets the values_uom of this CapacityTypeModel.  # noqa: E501

          # noqa: E501

        :return: The values_uom of this CapacityTypeModel.  # noqa: E501
        :rtype: UomModel
        """
        return self._values_uom

    @values_uom.setter
    def values_uom(self, values_uom):
        """Sets the values_uom of this CapacityTypeModel.

          # noqa: E501

        :param values_uom: The values_uom of this CapacityTypeModel.  # noqa: E501
        :type: UomModel
        """

        self._values_uom = values_uom

    @property
    def sys(self):
        """Gets the sys of this CapacityTypeModel.  # noqa: E501

        created by system boolean  # noqa: E501

        :return: The sys of this CapacityTypeModel.  # noqa: E501
        :rtype: bool
        """
        return self._sys

    @sys.setter
    def sys(self, sys):
        """Sets the sys of this CapacityTypeModel.

        created by system boolean  # noqa: E501

        :param sys: The sys of this CapacityTypeModel.  # noqa: E501
        :type: bool
        """

        self._sys = sys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CapacityTypeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityTypeModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CapacityTypeModel):
            return True

        return self.to_dict() != other.to_dict()
