# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class RouteEtaModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activities_eta': 'list[ActivityEtaModel]',
        'id': 'int',
        'nr': 'str',
        'name': 'str',
        'status_name': 'str',
        'status_id': 'int',
        'nr_of_stops': 'int',
        'pause_id': 'int',
        'pause': 'PauseModel',
        'driver_id': 'int',
        'driver_link': 'LinkModel',
        'driver_links': 'list[LinkModel]',
        'driver': 'UsersModel',
        'user_link': 'list[LinkModel]',
        'co_driver_ids': 'list[int]',
        'co_drivers': 'list[UsersModel]',
        'car_id': 'int',
        'vehicle_id': 'int',
        'vehicle_link': 'list[LinkModel]',
        'vehicle': 'VehicleModel',
        'car_link': 'list[LinkModel]',
        'car': 'VehicleModel',
        'trailer_id': 'int',
        'trailer_link': 'list[LinkModel]',
        'trailer': 'TrailerModel',
        'equipment': 'list[EquipmentModel]',
        'equipment_ids': 'list[int]',
        'planned_start_duration': 'int',
        'planned_end_duration': 'int',
        'max_speed': 'int',
        'speed_factor': 'float',
        'duration_factor': 'float',
        'cost_per_meter': 'float',
        'cost_per_route': 'float',
        'cost_per_driving_minute': 'float',
        'cost_per_waiting_minute': 'float',
        'cost_per_service_minute': 'float',
        'earliest_date_time': 'datetime',
        'latest_date_time': 'datetime',
        'planned_date_time_from': 'datetime',
        'planned_date_time_to': 'datetime',
        'executed_date_time_from': 'datetime',
        'executed_date_time_to': 'datetime',
        'planned_driving_distance': 'int',
        'planned_driving_duration': 'int',
        'planned_waiting_duration': 'int',
        'planned_activity_duration': 'int',
        'planned_total_duration': 'int',
        'gps_locations': 'list[GPSLocationModel]',
        'latest_known_position': 'GPSLocationModel',
        'recurrence_id': 'int',
        'recurrence_nr': 'int',
        'recurrence': 'RecurrenceModel',
        'overdue': 'bool',
        'optimized': 'bool',
        'blocked': 'bool',
        'active': 'bool',
        'start_address': 'AddressModel',
        'end_address': 'AddressModel',
        'planned_capacities': 'object',
        'applied_capacities': 'AppliedCapacitiesModel',
        'capacities': 'list[CapacityModel]',
        'activity_ids': 'list[int]',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]',
        'notes': 'list[NoteModel]',
        'files': 'list[FileModel]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'tags': 'list[TagModel]',
        'tag_names': 'list[str]',
        'zones': 'list[ZoneModel]',
        'zone_names': 'list[str]'
    }

    attribute_map = {
        'activities_eta': 'activities_eta',
        'id': 'id',
        'nr': 'nr',
        'name': 'name',
        'status_name': 'status_name',
        'status_id': 'status_id',
        'nr_of_stops': 'nr_of_stops',
        'pause_id': 'pause_id',
        'pause': 'pause',
        'driver_id': 'driver_id',
        'driver_link': 'driver_link',
        'driver_links': 'driver_links',
        'driver': 'driver',
        'user_link': 'user_link',
        'co_driver_ids': 'co_driver_ids',
        'co_drivers': 'co_drivers',
        'car_id': 'car_id',
        'vehicle_id': 'vehicle_id',
        'vehicle_link': 'vehicle_link',
        'vehicle': 'vehicle',
        'car_link': 'car_link',
        'car': 'car',
        'trailer_id': 'trailer_id',
        'trailer_link': 'trailer_link',
        'trailer': 'trailer',
        'equipment': 'equipment',
        'equipment_ids': 'equipment_ids',
        'planned_start_duration': 'planned_start_duration',
        'planned_end_duration': 'planned_end_duration',
        'max_speed': 'max_speed',
        'speed_factor': 'speed_factor',
        'duration_factor': 'duration_factor',
        'cost_per_meter': 'cost_per_meter',
        'cost_per_route': 'cost_per_route',
        'cost_per_driving_minute': 'cost_per_driving_minute',
        'cost_per_waiting_minute': 'cost_per_waiting_minute',
        'cost_per_service_minute': 'cost_per_service_minute',
        'earliest_date_time': 'earliest_date_time',
        'latest_date_time': 'latest_date_time',
        'planned_date_time_from': 'planned_date_time_from',
        'planned_date_time_to': 'planned_date_time_to',
        'executed_date_time_from': 'executed_date_time_from',
        'executed_date_time_to': 'executed_date_time_to',
        'planned_driving_distance': 'planned_driving_distance',
        'planned_driving_duration': 'planned_driving_duration',
        'planned_waiting_duration': 'planned_waiting_duration',
        'planned_activity_duration': 'planned_activity_duration',
        'planned_total_duration': 'planned_total_duration',
        'gps_locations': 'gps_locations',
        'latest_known_position': 'latest_known_position',
        'recurrence_id': 'recurrence_id',
        'recurrence_nr': 'recurrence_nr',
        'recurrence': 'recurrence',
        'overdue': 'overdue',
        'optimized': 'optimized',
        'blocked': 'blocked',
        'active': 'active',
        'start_address': 'start_address',
        'end_address': 'end_address',
        'planned_capacities': 'planned_capacities',
        'applied_capacities': 'applied_capacities',
        'capacities': 'capacities',
        'activity_ids': 'activity_ids',
        'links': 'links',
        'meta_data': 'meta_data',
        'notes': 'notes',
        'files': 'files',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'tags': 'tags',
        'tag_names': 'tag_names',
        'zones': 'zones',
        'zone_names': 'zone_names'
    }

    def __init__(self, activities_eta=None, id=None, nr=None, name=None, status_name=None, status_id=None, nr_of_stops=None, pause_id=None, pause=None, driver_id=None, driver_link=None, driver_links=None, driver=None, user_link=None, co_driver_ids=None, co_drivers=None, car_id=None, vehicle_id=None, vehicle_link=None, vehicle=None, car_link=None, car=None, trailer_id=None, trailer_link=None, trailer=None, equipment=None, equipment_ids=None, planned_start_duration=None, planned_end_duration=None, max_speed=None, speed_factor=None, duration_factor=None, cost_per_meter=None, cost_per_route=None, cost_per_driving_minute=None, cost_per_waiting_minute=None, cost_per_service_minute=None, earliest_date_time=None, latest_date_time=None, planned_date_time_from=None, planned_date_time_to=None, executed_date_time_from=None, executed_date_time_to=None, planned_driving_distance=None, planned_driving_duration=None, planned_waiting_duration=None, planned_activity_duration=None, planned_total_duration=None, gps_locations=None, latest_known_position=None, recurrence_id=None, recurrence_nr=None, recurrence=None, overdue=None, optimized=None, blocked=None, active=None, start_address=None, end_address=None, planned_capacities=None, applied_capacities=None, capacities=None, activity_ids=None, links=None, meta_data=None, notes=None, files=None, created_at=None, updated_at=None, tags=None, tag_names=None, zones=None, zone_names=None, _configuration=None):  # noqa: E501
        """RouteEtaModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._activities_eta = None
        self._id = None
        self._nr = None
        self._name = None
        self._status_name = None
        self._status_id = None
        self._nr_of_stops = None
        self._pause_id = None
        self._pause = None
        self._driver_id = None
        self._driver_link = None
        self._driver_links = None
        self._driver = None
        self._user_link = None
        self._co_driver_ids = None
        self._co_drivers = None
        self._car_id = None
        self._vehicle_id = None
        self._vehicle_link = None
        self._vehicle = None
        self._car_link = None
        self._car = None
        self._trailer_id = None
        self._trailer_link = None
        self._trailer = None
        self._equipment = None
        self._equipment_ids = None
        self._planned_start_duration = None
        self._planned_end_duration = None
        self._max_speed = None
        self._speed_factor = None
        self._duration_factor = None
        self._cost_per_meter = None
        self._cost_per_route = None
        self._cost_per_driving_minute = None
        self._cost_per_waiting_minute = None
        self._cost_per_service_minute = None
        self._earliest_date_time = None
        self._latest_date_time = None
        self._planned_date_time_from = None
        self._planned_date_time_to = None
        self._executed_date_time_from = None
        self._executed_date_time_to = None
        self._planned_driving_distance = None
        self._planned_driving_duration = None
        self._planned_waiting_duration = None
        self._planned_activity_duration = None
        self._planned_total_duration = None
        self._gps_locations = None
        self._latest_known_position = None
        self._recurrence_id = None
        self._recurrence_nr = None
        self._recurrence = None
        self._overdue = None
        self._optimized = None
        self._blocked = None
        self._active = None
        self._start_address = None
        self._end_address = None
        self._planned_capacities = None
        self._applied_capacities = None
        self._capacities = None
        self._activity_ids = None
        self._links = None
        self._meta_data = None
        self._notes = None
        self._files = None
        self._created_at = None
        self._updated_at = None
        self._tags = None
        self._tag_names = None
        self._zones = None
        self._zone_names = None
        self.discriminator = None

        if activities_eta is not None:
            self.activities_eta = activities_eta
        if id is not None:
            self.id = id
        if nr is not None:
            self.nr = nr
        if name is not None:
            self.name = name
        if status_name is not None:
            self.status_name = status_name
        if status_id is not None:
            self.status_id = status_id
        if nr_of_stops is not None:
            self.nr_of_stops = nr_of_stops
        if pause_id is not None:
            self.pause_id = pause_id
        if pause is not None:
            self.pause = pause
        if driver_id is not None:
            self.driver_id = driver_id
        if driver_link is not None:
            self.driver_link = driver_link
        if driver_links is not None:
            self.driver_links = driver_links
        if driver is not None:
            self.driver = driver
        if user_link is not None:
            self.user_link = user_link
        if co_driver_ids is not None:
            self.co_driver_ids = co_driver_ids
        if co_drivers is not None:
            self.co_drivers = co_drivers
        if car_id is not None:
            self.car_id = car_id
        if vehicle_id is not None:
            self.vehicle_id = vehicle_id
        if vehicle_link is not None:
            self.vehicle_link = vehicle_link
        if vehicle is not None:
            self.vehicle = vehicle
        if car_link is not None:
            self.car_link = car_link
        if car is not None:
            self.car = car
        if trailer_id is not None:
            self.trailer_id = trailer_id
        if trailer_link is not None:
            self.trailer_link = trailer_link
        if trailer is not None:
            self.trailer = trailer
        if equipment is not None:
            self.equipment = equipment
        if equipment_ids is not None:
            self.equipment_ids = equipment_ids
        if planned_start_duration is not None:
            self.planned_start_duration = planned_start_duration
        if planned_end_duration is not None:
            self.planned_end_duration = planned_end_duration
        if max_speed is not None:
            self.max_speed = max_speed
        if speed_factor is not None:
            self.speed_factor = speed_factor
        if duration_factor is not None:
            self.duration_factor = duration_factor
        if cost_per_meter is not None:
            self.cost_per_meter = cost_per_meter
        if cost_per_route is not None:
            self.cost_per_route = cost_per_route
        if cost_per_driving_minute is not None:
            self.cost_per_driving_minute = cost_per_driving_minute
        if cost_per_waiting_minute is not None:
            self.cost_per_waiting_minute = cost_per_waiting_minute
        if cost_per_service_minute is not None:
            self.cost_per_service_minute = cost_per_service_minute
        if earliest_date_time is not None:
            self.earliest_date_time = earliest_date_time
        if latest_date_time is not None:
            self.latest_date_time = latest_date_time
        if planned_date_time_from is not None:
            self.planned_date_time_from = planned_date_time_from
        if planned_date_time_to is not None:
            self.planned_date_time_to = planned_date_time_to
        if executed_date_time_from is not None:
            self.executed_date_time_from = executed_date_time_from
        if executed_date_time_to is not None:
            self.executed_date_time_to = executed_date_time_to
        if planned_driving_distance is not None:
            self.planned_driving_distance = planned_driving_distance
        if planned_driving_duration is not None:
            self.planned_driving_duration = planned_driving_duration
        if planned_waiting_duration is not None:
            self.planned_waiting_duration = planned_waiting_duration
        if planned_activity_duration is not None:
            self.planned_activity_duration = planned_activity_duration
        if planned_total_duration is not None:
            self.planned_total_duration = planned_total_duration
        if gps_locations is not None:
            self.gps_locations = gps_locations
        if latest_known_position is not None:
            self.latest_known_position = latest_known_position
        if recurrence_id is not None:
            self.recurrence_id = recurrence_id
        if recurrence_nr is not None:
            self.recurrence_nr = recurrence_nr
        if recurrence is not None:
            self.recurrence = recurrence
        if overdue is not None:
            self.overdue = overdue
        if optimized is not None:
            self.optimized = optimized
        if blocked is not None:
            self.blocked = blocked
        if active is not None:
            self.active = active
        if start_address is not None:
            self.start_address = start_address
        if end_address is not None:
            self.end_address = end_address
        if planned_capacities is not None:
            self.planned_capacities = planned_capacities
        if applied_capacities is not None:
            self.applied_capacities = applied_capacities
        if capacities is not None:
            self.capacities = capacities
        if activity_ids is not None:
            self.activity_ids = activity_ids
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data
        if notes is not None:
            self.notes = notes
        if files is not None:
            self.files = files
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if tags is not None:
            self.tags = tags
        if tag_names is not None:
            self.tag_names = tag_names
        if zones is not None:
            self.zones = zones
        if zone_names is not None:
            self.zone_names = zone_names

    @property
    def activities_eta(self):
        """Gets the activities_eta of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The activities_eta of this RouteEtaModel.  # noqa: E501
        :rtype: list[ActivityEtaModel]
        """
        return self._activities_eta

    @activities_eta.setter
    def activities_eta(self, activities_eta):
        """Sets the activities_eta of this RouteEtaModel.

          # noqa: E501

        :param activities_eta: The activities_eta of this RouteEtaModel.  # noqa: E501
        :type: list[ActivityEtaModel]
        """

        self._activities_eta = activities_eta

    @property
    def id(self):
        """Gets the id of this RouteEtaModel.  # noqa: E501

        Unique ID of Route  # noqa: E501

        :return: The id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RouteEtaModel.

        Unique ID of Route  # noqa: E501

        :param id: The id of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def nr(self):
        """Gets the nr of this RouteEtaModel.  # noqa: E501

        Non-Unique number of Route  # noqa: E501

        :return: The nr of this RouteEtaModel.  # noqa: E501
        :rtype: str
        """
        return self._nr

    @nr.setter
    def nr(self, nr):
        """Sets the nr of this RouteEtaModel.

        Non-Unique number of Route  # noqa: E501

        :param nr: The nr of this RouteEtaModel.  # noqa: E501
        :type: str
        """

        self._nr = nr

    @property
    def name(self):
        """Gets the name of this RouteEtaModel.  # noqa: E501

        Description  # noqa: E501

        :return: The name of this RouteEtaModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RouteEtaModel.

        Description  # noqa: E501

        :param name: The name of this RouteEtaModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status_name(self):
        """Gets the status_name of this RouteEtaModel.  # noqa: E501

        Route Status  # noqa: E501

        :return: The status_name of this RouteEtaModel.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this RouteEtaModel.

        Route Status  # noqa: E501

        :param status_name: The status_name of this RouteEtaModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["route_cancelled", "route_planned", "route_in_progress", "route_executed"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status_name not in allowed_values):
            raise ValueError(
                "Invalid value for `status_name` ({0}), must be one of {1}"  # noqa: E501
                .format(status_name, allowed_values)
            )

        self._status_name = status_name

    @property
    def status_id(self):
        """Gets the status_id of this RouteEtaModel.  # noqa: E501

        Status ID of Route, 29:route_cancelled, 1:route_planned, 2:route_in_progress, 8:route_executed  # noqa: E501

        :return: The status_id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this RouteEtaModel.

        Status ID of Route, 29:route_cancelled, 1:route_planned, 2:route_in_progress, 8:route_executed  # noqa: E501

        :param status_id: The status_id of this RouteEtaModel.  # noqa: E501
        :type: int
        """
        allowed_values = [29, 1, 2, 8]  # noqa: E501
        if (self._configuration.client_side_validation and
                status_id not in allowed_values):
            raise ValueError(
                "Invalid value for `status_id` ({0}), must be one of {1}"  # noqa: E501
                .format(status_id, allowed_values)
            )

        self._status_id = status_id

    @property
    def nr_of_stops(self):
        """Gets the nr_of_stops of this RouteEtaModel.  # noqa: E501

        number of stops on this route (excluding start_route and end_route activities)  # noqa: E501

        :return: The nr_of_stops of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._nr_of_stops

    @nr_of_stops.setter
    def nr_of_stops(self, nr_of_stops):
        """Sets the nr_of_stops of this RouteEtaModel.

        number of stops on this route (excluding start_route and end_route activities)  # noqa: E501

        :param nr_of_stops: The nr_of_stops of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._nr_of_stops = nr_of_stops

    @property
    def pause_id(self):
        """Gets the pause_id of this RouteEtaModel.  # noqa: E501

        id of pause scheme to apply  # noqa: E501

        :return: The pause_id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._pause_id

    @pause_id.setter
    def pause_id(self, pause_id):
        """Sets the pause_id of this RouteEtaModel.

        id of pause scheme to apply  # noqa: E501

        :param pause_id: The pause_id of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._pause_id = pause_id

    @property
    def pause(self):
        """Gets the pause of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The pause of this RouteEtaModel.  # noqa: E501
        :rtype: PauseModel
        """
        return self._pause

    @pause.setter
    def pause(self, pause):
        """Sets the pause of this RouteEtaModel.

          # noqa: E501

        :param pause: The pause of this RouteEtaModel.  # noqa: E501
        :type: PauseModel
        """

        self._pause = pause

    @property
    def driver_id(self):
        """Gets the driver_id of this RouteEtaModel.  # noqa: E501

        id of executing driver  # noqa: E501

        :return: The driver_id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this RouteEtaModel.

        id of executing driver  # noqa: E501

        :param driver_id: The driver_id of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._driver_id = driver_id

    @property
    def driver_link(self):
        """Gets the driver_link of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The driver_link of this RouteEtaModel.  # noqa: E501
        :rtype: LinkModel
        """
        return self._driver_link

    @driver_link.setter
    def driver_link(self, driver_link):
        """Sets the driver_link of this RouteEtaModel.

          # noqa: E501

        :param driver_link: The driver_link of this RouteEtaModel.  # noqa: E501
        :type: LinkModel
        """

        self._driver_link = driver_link

    @property
    def driver_links(self):
        """Gets the driver_links of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The driver_links of this RouteEtaModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._driver_links

    @driver_links.setter
    def driver_links(self, driver_links):
        """Sets the driver_links of this RouteEtaModel.

          # noqa: E501

        :param driver_links: The driver_links of this RouteEtaModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._driver_links = driver_links

    @property
    def driver(self):
        """Gets the driver of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The driver of this RouteEtaModel.  # noqa: E501
        :rtype: UsersModel
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this RouteEtaModel.

          # noqa: E501

        :param driver: The driver of this RouteEtaModel.  # noqa: E501
        :type: UsersModel
        """

        self._driver = driver

    @property
    def user_link(self):
        """Gets the user_link of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The user_link of this RouteEtaModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._user_link

    @user_link.setter
    def user_link(self, user_link):
        """Sets the user_link of this RouteEtaModel.

          # noqa: E501

        :param user_link: The user_link of this RouteEtaModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._user_link = user_link

    @property
    def co_driver_ids(self):
        """Gets the co_driver_ids of this RouteEtaModel.  # noqa: E501

        Unique Identifier(s) for co-drivers on route  # noqa: E501

        :return: The co_driver_ids of this RouteEtaModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._co_driver_ids

    @co_driver_ids.setter
    def co_driver_ids(self, co_driver_ids):
        """Sets the co_driver_ids of this RouteEtaModel.

        Unique Identifier(s) for co-drivers on route  # noqa: E501

        :param co_driver_ids: The co_driver_ids of this RouteEtaModel.  # noqa: E501
        :type: list[int]
        """

        self._co_driver_ids = co_driver_ids

    @property
    def co_drivers(self):
        """Gets the co_drivers of this RouteEtaModel.  # noqa: E501

        list of co-drivers on route  # noqa: E501

        :return: The co_drivers of this RouteEtaModel.  # noqa: E501
        :rtype: list[UsersModel]
        """
        return self._co_drivers

    @co_drivers.setter
    def co_drivers(self, co_drivers):
        """Sets the co_drivers of this RouteEtaModel.

        list of co-drivers on route  # noqa: E501

        :param co_drivers: The co_drivers of this RouteEtaModel.  # noqa: E501
        :type: list[UsersModel]
        """

        self._co_drivers = co_drivers

    @property
    def car_id(self):
        """Gets the car_id of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The car_id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._car_id

    @car_id.setter
    def car_id(self, car_id):
        """Sets the car_id of this RouteEtaModel.

          # noqa: E501

        :param car_id: The car_id of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._car_id = car_id

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this RouteEtaModel.  # noqa: E501

        Bumbal internal id for vehicle associated with this route  # noqa: E501

        :return: The vehicle_id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this RouteEtaModel.

        Bumbal internal id for vehicle associated with this route  # noqa: E501

        :param vehicle_id: The vehicle_id of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._vehicle_id = vehicle_id

    @property
    def vehicle_link(self):
        """Gets the vehicle_link of this RouteEtaModel.  # noqa: E501

        link object to identify a vehicle uniquely by an external id and provider name  # noqa: E501

        :return: The vehicle_link of this RouteEtaModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._vehicle_link

    @vehicle_link.setter
    def vehicle_link(self, vehicle_link):
        """Sets the vehicle_link of this RouteEtaModel.

        link object to identify a vehicle uniquely by an external id and provider name  # noqa: E501

        :param vehicle_link: The vehicle_link of this RouteEtaModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._vehicle_link = vehicle_link

    @property
    def vehicle(self):
        """Gets the vehicle of this RouteEtaModel.  # noqa: E501

        Vehicle object with the vehicle properties assigned to this route  # noqa: E501

        :return: The vehicle of this RouteEtaModel.  # noqa: E501
        :rtype: VehicleModel
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this RouteEtaModel.

        Vehicle object with the vehicle properties assigned to this route  # noqa: E501

        :param vehicle: The vehicle of this RouteEtaModel.  # noqa: E501
        :type: VehicleModel
        """

        self._vehicle = vehicle

    @property
    def car_link(self):
        """Gets the car_link of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The car_link of this RouteEtaModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._car_link

    @car_link.setter
    def car_link(self, car_link):
        """Sets the car_link of this RouteEtaModel.

          # noqa: E501

        :param car_link: The car_link of this RouteEtaModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._car_link = car_link

    @property
    def car(self):
        """Gets the car of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The car of this RouteEtaModel.  # noqa: E501
        :rtype: VehicleModel
        """
        return self._car

    @car.setter
    def car(self, car):
        """Sets the car of this RouteEtaModel.

          # noqa: E501

        :param car: The car of this RouteEtaModel.  # noqa: E501
        :type: VehicleModel
        """

        self._car = car

    @property
    def trailer_id(self):
        """Gets the trailer_id of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The trailer_id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._trailer_id

    @trailer_id.setter
    def trailer_id(self, trailer_id):
        """Sets the trailer_id of this RouteEtaModel.

          # noqa: E501

        :param trailer_id: The trailer_id of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._trailer_id = trailer_id

    @property
    def trailer_link(self):
        """Gets the trailer_link of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The trailer_link of this RouteEtaModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._trailer_link

    @trailer_link.setter
    def trailer_link(self, trailer_link):
        """Sets the trailer_link of this RouteEtaModel.

          # noqa: E501

        :param trailer_link: The trailer_link of this RouteEtaModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._trailer_link = trailer_link

    @property
    def trailer(self):
        """Gets the trailer of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The trailer of this RouteEtaModel.  # noqa: E501
        :rtype: TrailerModel
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """Sets the trailer of this RouteEtaModel.

          # noqa: E501

        :param trailer: The trailer of this RouteEtaModel.  # noqa: E501
        :type: TrailerModel
        """

        self._trailer = trailer

    @property
    def equipment(self):
        """Gets the equipment of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The equipment of this RouteEtaModel.  # noqa: E501
        :rtype: list[EquipmentModel]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this RouteEtaModel.

          # noqa: E501

        :param equipment: The equipment of this RouteEtaModel.  # noqa: E501
        :type: list[EquipmentModel]
        """

        self._equipment = equipment

    @property
    def equipment_ids(self):
        """Gets the equipment_ids of this RouteEtaModel.  # noqa: E501

        Unique Identifier(s) for equipment on route  # noqa: E501

        :return: The equipment_ids of this RouteEtaModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._equipment_ids

    @equipment_ids.setter
    def equipment_ids(self, equipment_ids):
        """Sets the equipment_ids of this RouteEtaModel.

        Unique Identifier(s) for equipment on route  # noqa: E501

        :param equipment_ids: The equipment_ids of this RouteEtaModel.  # noqa: E501
        :type: list[int]
        """

        self._equipment_ids = equipment_ids

    @property
    def planned_start_duration(self):
        """Gets the planned_start_duration of this RouteEtaModel.  # noqa: E501

        Duration for start activity  # noqa: E501

        :return: The planned_start_duration of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_start_duration

    @planned_start_duration.setter
    def planned_start_duration(self, planned_start_duration):
        """Sets the planned_start_duration of this RouteEtaModel.

        Duration for start activity  # noqa: E501

        :param planned_start_duration: The planned_start_duration of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._planned_start_duration = planned_start_duration

    @property
    def planned_end_duration(self):
        """Gets the planned_end_duration of this RouteEtaModel.  # noqa: E501

        Duration for end activity  # noqa: E501

        :return: The planned_end_duration of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_end_duration

    @planned_end_duration.setter
    def planned_end_duration(self, planned_end_duration):
        """Sets the planned_end_duration of this RouteEtaModel.

        Duration for end activity  # noqa: E501

        :param planned_end_duration: The planned_end_duration of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._planned_end_duration = planned_end_duration

    @property
    def max_speed(self):
        """Gets the max_speed of this RouteEtaModel.  # noqa: E501

        Max Speed in km/h  # noqa: E501

        :return: The max_speed of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this RouteEtaModel.

        Max Speed in km/h  # noqa: E501

        :param max_speed: The max_speed of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._max_speed = max_speed

    @property
    def speed_factor(self):
        """Gets the speed_factor of this RouteEtaModel.  # noqa: E501

        Speed Factor  # noqa: E501

        :return: The speed_factor of this RouteEtaModel.  # noqa: E501
        :rtype: float
        """
        return self._speed_factor

    @speed_factor.setter
    def speed_factor(self, speed_factor):
        """Sets the speed_factor of this RouteEtaModel.

        Speed Factor  # noqa: E501

        :param speed_factor: The speed_factor of this RouteEtaModel.  # noqa: E501
        :type: float
        """

        self._speed_factor = speed_factor

    @property
    def duration_factor(self):
        """Gets the duration_factor of this RouteEtaModel.  # noqa: E501

        Duration Factor  # noqa: E501

        :return: The duration_factor of this RouteEtaModel.  # noqa: E501
        :rtype: float
        """
        return self._duration_factor

    @duration_factor.setter
    def duration_factor(self, duration_factor):
        """Sets the duration_factor of this RouteEtaModel.

        Duration Factor  # noqa: E501

        :param duration_factor: The duration_factor of this RouteEtaModel.  # noqa: E501
        :type: float
        """

        self._duration_factor = duration_factor

    @property
    def cost_per_meter(self):
        """Gets the cost_per_meter of this RouteEtaModel.  # noqa: E501

        Cost per meter  # noqa: E501

        :return: The cost_per_meter of this RouteEtaModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_meter

    @cost_per_meter.setter
    def cost_per_meter(self, cost_per_meter):
        """Sets the cost_per_meter of this RouteEtaModel.

        Cost per meter  # noqa: E501

        :param cost_per_meter: The cost_per_meter of this RouteEtaModel.  # noqa: E501
        :type: float
        """

        self._cost_per_meter = cost_per_meter

    @property
    def cost_per_route(self):
        """Gets the cost_per_route of this RouteEtaModel.  # noqa: E501

        Cost per route  # noqa: E501

        :return: The cost_per_route of this RouteEtaModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_route

    @cost_per_route.setter
    def cost_per_route(self, cost_per_route):
        """Sets the cost_per_route of this RouteEtaModel.

        Cost per route  # noqa: E501

        :param cost_per_route: The cost_per_route of this RouteEtaModel.  # noqa: E501
        :type: float
        """

        self._cost_per_route = cost_per_route

    @property
    def cost_per_driving_minute(self):
        """Gets the cost_per_driving_minute of this RouteEtaModel.  # noqa: E501

        Cost per driving minute  # noqa: E501

        :return: The cost_per_driving_minute of this RouteEtaModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_driving_minute

    @cost_per_driving_minute.setter
    def cost_per_driving_minute(self, cost_per_driving_minute):
        """Sets the cost_per_driving_minute of this RouteEtaModel.

        Cost per driving minute  # noqa: E501

        :param cost_per_driving_minute: The cost_per_driving_minute of this RouteEtaModel.  # noqa: E501
        :type: float
        """

        self._cost_per_driving_minute = cost_per_driving_minute

    @property
    def cost_per_waiting_minute(self):
        """Gets the cost_per_waiting_minute of this RouteEtaModel.  # noqa: E501

        Cost per waiting minute  # noqa: E501

        :return: The cost_per_waiting_minute of this RouteEtaModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_waiting_minute

    @cost_per_waiting_minute.setter
    def cost_per_waiting_minute(self, cost_per_waiting_minute):
        """Sets the cost_per_waiting_minute of this RouteEtaModel.

        Cost per waiting minute  # noqa: E501

        :param cost_per_waiting_minute: The cost_per_waiting_minute of this RouteEtaModel.  # noqa: E501
        :type: float
        """

        self._cost_per_waiting_minute = cost_per_waiting_minute

    @property
    def cost_per_service_minute(self):
        """Gets the cost_per_service_minute of this RouteEtaModel.  # noqa: E501

        Cost per service minute  # noqa: E501

        :return: The cost_per_service_minute of this RouteEtaModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_service_minute

    @cost_per_service_minute.setter
    def cost_per_service_minute(self, cost_per_service_minute):
        """Sets the cost_per_service_minute of this RouteEtaModel.

        Cost per service minute  # noqa: E501

        :param cost_per_service_minute: The cost_per_service_minute of this RouteEtaModel.  # noqa: E501
        :type: float
        """

        self._cost_per_service_minute = cost_per_service_minute

    @property
    def earliest_date_time(self):
        """Gets the earliest_date_time of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The earliest_date_time of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._earliest_date_time

    @earliest_date_time.setter
    def earliest_date_time(self, earliest_date_time):
        """Sets the earliest_date_time of this RouteEtaModel.

          # noqa: E501

        :param earliest_date_time: The earliest_date_time of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._earliest_date_time = earliest_date_time

    @property
    def latest_date_time(self):
        """Gets the latest_date_time of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The latest_date_time of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_date_time

    @latest_date_time.setter
    def latest_date_time(self, latest_date_time):
        """Sets the latest_date_time of this RouteEtaModel.

          # noqa: E501

        :param latest_date_time: The latest_date_time of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._latest_date_time = latest_date_time

    @property
    def planned_date_time_from(self):
        """Gets the planned_date_time_from of this RouteEtaModel.  # noqa: E501

        planned date-time from  # noqa: E501

        :return: The planned_date_time_from of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_from

    @planned_date_time_from.setter
    def planned_date_time_from(self, planned_date_time_from):
        """Sets the planned_date_time_from of this RouteEtaModel.

        planned date-time from  # noqa: E501

        :param planned_date_time_from: The planned_date_time_from of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_from = planned_date_time_from

    @property
    def planned_date_time_to(self):
        """Gets the planned_date_time_to of this RouteEtaModel.  # noqa: E501

        planned date-time to  # noqa: E501

        :return: The planned_date_time_to of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_to

    @planned_date_time_to.setter
    def planned_date_time_to(self, planned_date_time_to):
        """Sets the planned_date_time_to of this RouteEtaModel.

        planned date-time to  # noqa: E501

        :param planned_date_time_to: The planned_date_time_to of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_to = planned_date_time_to

    @property
    def executed_date_time_from(self):
        """Gets the executed_date_time_from of this RouteEtaModel.  # noqa: E501

        executed date-time from  # noqa: E501

        :return: The executed_date_time_from of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._executed_date_time_from

    @executed_date_time_from.setter
    def executed_date_time_from(self, executed_date_time_from):
        """Sets the executed_date_time_from of this RouteEtaModel.

        executed date-time from  # noqa: E501

        :param executed_date_time_from: The executed_date_time_from of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._executed_date_time_from = executed_date_time_from

    @property
    def executed_date_time_to(self):
        """Gets the executed_date_time_to of this RouteEtaModel.  # noqa: E501

        executed date-time to  # noqa: E501

        :return: The executed_date_time_to of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._executed_date_time_to

    @executed_date_time_to.setter
    def executed_date_time_to(self, executed_date_time_to):
        """Sets the executed_date_time_to of this RouteEtaModel.

        executed date-time to  # noqa: E501

        :param executed_date_time_to: The executed_date_time_to of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._executed_date_time_to = executed_date_time_to

    @property
    def planned_driving_distance(self):
        """Gets the planned_driving_distance of this RouteEtaModel.  # noqa: E501

        Planned driving distance of this route in meters  # noqa: E501

        :return: The planned_driving_distance of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_driving_distance

    @planned_driving_distance.setter
    def planned_driving_distance(self, planned_driving_distance):
        """Sets the planned_driving_distance of this RouteEtaModel.

        Planned driving distance of this route in meters  # noqa: E501

        :param planned_driving_distance: The planned_driving_distance of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._planned_driving_distance = planned_driving_distance

    @property
    def planned_driving_duration(self):
        """Gets the planned_driving_duration of this RouteEtaModel.  # noqa: E501

        Planned driving duration of this route in minutes  # noqa: E501

        :return: The planned_driving_duration of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_driving_duration

    @planned_driving_duration.setter
    def planned_driving_duration(self, planned_driving_duration):
        """Sets the planned_driving_duration of this RouteEtaModel.

        Planned driving duration of this route in minutes  # noqa: E501

        :param planned_driving_duration: The planned_driving_duration of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._planned_driving_duration = planned_driving_duration

    @property
    def planned_waiting_duration(self):
        """Gets the planned_waiting_duration of this RouteEtaModel.  # noqa: E501

        Planned waiting duration of this route in minutes  # noqa: E501

        :return: The planned_waiting_duration of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_waiting_duration

    @planned_waiting_duration.setter
    def planned_waiting_duration(self, planned_waiting_duration):
        """Sets the planned_waiting_duration of this RouteEtaModel.

        Planned waiting duration of this route in minutes  # noqa: E501

        :param planned_waiting_duration: The planned_waiting_duration of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._planned_waiting_duration = planned_waiting_duration

    @property
    def planned_activity_duration(self):
        """Gets the planned_activity_duration of this RouteEtaModel.  # noqa: E501

        Planned duration for all activities in this route in minutes  # noqa: E501

        :return: The planned_activity_duration of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_activity_duration

    @planned_activity_duration.setter
    def planned_activity_duration(self, planned_activity_duration):
        """Sets the planned_activity_duration of this RouteEtaModel.

        Planned duration for all activities in this route in minutes  # noqa: E501

        :param planned_activity_duration: The planned_activity_duration of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._planned_activity_duration = planned_activity_duration

    @property
    def planned_total_duration(self):
        """Gets the planned_total_duration of this RouteEtaModel.  # noqa: E501

        Total planned duration of this route in minutes  # noqa: E501

        :return: The planned_total_duration of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_total_duration

    @planned_total_duration.setter
    def planned_total_duration(self, planned_total_duration):
        """Sets the planned_total_duration of this RouteEtaModel.

        Total planned duration of this route in minutes  # noqa: E501

        :param planned_total_duration: The planned_total_duration of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._planned_total_duration = planned_total_duration

    @property
    def gps_locations(self):
        """Gets the gps_locations of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The gps_locations of this RouteEtaModel.  # noqa: E501
        :rtype: list[GPSLocationModel]
        """
        return self._gps_locations

    @gps_locations.setter
    def gps_locations(self, gps_locations):
        """Sets the gps_locations of this RouteEtaModel.

          # noqa: E501

        :param gps_locations: The gps_locations of this RouteEtaModel.  # noqa: E501
        :type: list[GPSLocationModel]
        """

        self._gps_locations = gps_locations

    @property
    def latest_known_position(self):
        """Gets the latest_known_position of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The latest_known_position of this RouteEtaModel.  # noqa: E501
        :rtype: GPSLocationModel
        """
        return self._latest_known_position

    @latest_known_position.setter
    def latest_known_position(self, latest_known_position):
        """Sets the latest_known_position of this RouteEtaModel.

          # noqa: E501

        :param latest_known_position: The latest_known_position of this RouteEtaModel.  # noqa: E501
        :type: GPSLocationModel
        """

        self._latest_known_position = latest_known_position

    @property
    def recurrence_id(self):
        """Gets the recurrence_id of this RouteEtaModel.  # noqa: E501

        id of recurrence where route belongs to  # noqa: E501

        :return: The recurrence_id of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_id

    @recurrence_id.setter
    def recurrence_id(self, recurrence_id):
        """Sets the recurrence_id of this RouteEtaModel.

        id of recurrence where route belongs to  # noqa: E501

        :param recurrence_id: The recurrence_id of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._recurrence_id = recurrence_id

    @property
    def recurrence_nr(self):
        """Gets the recurrence_nr of this RouteEtaModel.  # noqa: E501

        nr within recurrence where route belongs to  # noqa: E501

        :return: The recurrence_nr of this RouteEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_nr

    @recurrence_nr.setter
    def recurrence_nr(self, recurrence_nr):
        """Sets the recurrence_nr of this RouteEtaModel.

        nr within recurrence where route belongs to  # noqa: E501

        :param recurrence_nr: The recurrence_nr of this RouteEtaModel.  # noqa: E501
        :type: int
        """

        self._recurrence_nr = recurrence_nr

    @property
    def recurrence(self):
        """Gets the recurrence of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The recurrence of this RouteEtaModel.  # noqa: E501
        :rtype: RecurrenceModel
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this RouteEtaModel.

          # noqa: E501

        :param recurrence: The recurrence of this RouteEtaModel.  # noqa: E501
        :type: RecurrenceModel
        """

        self._recurrence = recurrence

    @property
    def overdue(self):
        """Gets the overdue of this RouteEtaModel.  # noqa: E501

        whether any activity on route is overdue  # noqa: E501

        :return: The overdue of this RouteEtaModel.  # noqa: E501
        :rtype: bool
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue):
        """Sets the overdue of this RouteEtaModel.

        whether any activity on route is overdue  # noqa: E501

        :param overdue: The overdue of this RouteEtaModel.  # noqa: E501
        :type: bool
        """

        self._overdue = overdue

    @property
    def optimized(self):
        """Gets the optimized of this RouteEtaModel.  # noqa: E501

        Activity optimized status within route.  # noqa: E501

        :return: The optimized of this RouteEtaModel.  # noqa: E501
        :rtype: bool
        """
        return self._optimized

    @optimized.setter
    def optimized(self, optimized):
        """Sets the optimized of this RouteEtaModel.

        Activity optimized status within route.  # noqa: E501

        :param optimized: The optimized of this RouteEtaModel.  # noqa: E501
        :type: bool
        """

        self._optimized = optimized

    @property
    def blocked(self):
        """Gets the blocked of this RouteEtaModel.  # noqa: E501

        a blocked route can not be auto-filled by customer calendars  # noqa: E501

        :return: The blocked of this RouteEtaModel.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this RouteEtaModel.

        a blocked route can not be auto-filled by customer calendars  # noqa: E501

        :param blocked: The blocked of this RouteEtaModel.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def active(self):
        """Gets the active of this RouteEtaModel.  # noqa: E501

        if active=0: route has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this RouteEtaModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RouteEtaModel.

        if active=0: route has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this RouteEtaModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def start_address(self):
        """Gets the start_address of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The start_address of this RouteEtaModel.  # noqa: E501
        :rtype: AddressModel
        """
        return self._start_address

    @start_address.setter
    def start_address(self, start_address):
        """Sets the start_address of this RouteEtaModel.

          # noqa: E501

        :param start_address: The start_address of this RouteEtaModel.  # noqa: E501
        :type: AddressModel
        """

        self._start_address = start_address

    @property
    def end_address(self):
        """Gets the end_address of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The end_address of this RouteEtaModel.  # noqa: E501
        :rtype: AddressModel
        """
        return self._end_address

    @end_address.setter
    def end_address(self, end_address):
        """Sets the end_address of this RouteEtaModel.

          # noqa: E501

        :param end_address: The end_address of this RouteEtaModel.  # noqa: E501
        :type: AddressModel
        """

        self._end_address = end_address

    @property
    def planned_capacities(self):
        """Gets the planned_capacities of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The planned_capacities of this RouteEtaModel.  # noqa: E501
        :rtype: object
        """
        return self._planned_capacities

    @planned_capacities.setter
    def planned_capacities(self, planned_capacities):
        """Sets the planned_capacities of this RouteEtaModel.

          # noqa: E501

        :param planned_capacities: The planned_capacities of this RouteEtaModel.  # noqa: E501
        :type: object
        """

        self._planned_capacities = planned_capacities

    @property
    def applied_capacities(self):
        """Gets the applied_capacities of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The applied_capacities of this RouteEtaModel.  # noqa: E501
        :rtype: AppliedCapacitiesModel
        """
        return self._applied_capacities

    @applied_capacities.setter
    def applied_capacities(self, applied_capacities):
        """Sets the applied_capacities of this RouteEtaModel.

          # noqa: E501

        :param applied_capacities: The applied_capacities of this RouteEtaModel.  # noqa: E501
        :type: AppliedCapacitiesModel
        """

        self._applied_capacities = applied_capacities

    @property
    def capacities(self):
        """Gets the capacities of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The capacities of this RouteEtaModel.  # noqa: E501
        :rtype: list[CapacityModel]
        """
        return self._capacities

    @capacities.setter
    def capacities(self, capacities):
        """Sets the capacities of this RouteEtaModel.

          # noqa: E501

        :param capacities: The capacities of this RouteEtaModel.  # noqa: E501
        :type: list[CapacityModel]
        """

        self._capacities = capacities

    @property
    def activity_ids(self):
        """Gets the activity_ids of this RouteEtaModel.  # noqa: E501

        activity ids on route in order of execution  # noqa: E501

        :return: The activity_ids of this RouteEtaModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._activity_ids

    @activity_ids.setter
    def activity_ids(self, activity_ids):
        """Sets the activity_ids of this RouteEtaModel.

        activity ids on route in order of execution  # noqa: E501

        :param activity_ids: The activity_ids of this RouteEtaModel.  # noqa: E501
        :type: list[int]
        """

        self._activity_ids = activity_ids

    @property
    def links(self):
        """Gets the links of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The links of this RouteEtaModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RouteEtaModel.

          # noqa: E501

        :param links: The links of this RouteEtaModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this RouteEtaModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this RouteEtaModel.

          # noqa: E501

        :param meta_data: The meta_data of this RouteEtaModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def notes(self):
        """Gets the notes of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The notes of this RouteEtaModel.  # noqa: E501
        :rtype: list[NoteModel]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RouteEtaModel.

          # noqa: E501

        :param notes: The notes of this RouteEtaModel.  # noqa: E501
        :type: list[NoteModel]
        """

        self._notes = notes

    @property
    def files(self):
        """Gets the files of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The files of this RouteEtaModel.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this RouteEtaModel.

          # noqa: E501

        :param files: The files of this RouteEtaModel.  # noqa: E501
        :type: list[FileModel]
        """

        self._files = files

    @property
    def created_at(self):
        """Gets the created_at of this RouteEtaModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The created_at of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RouteEtaModel.

        created_at date time  # noqa: E501

        :param created_at: The created_at of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this RouteEtaModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The updated_at of this RouteEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RouteEtaModel.

        updated_at date time  # noqa: E501

        :param updated_at: The updated_at of this RouteEtaModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def tags(self):
        """Gets the tags of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this RouteEtaModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RouteEtaModel.

          # noqa: E501

        :param tags: The tags of this RouteEtaModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def tag_names(self):
        """Gets the tag_names of this RouteEtaModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this RouteEtaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this RouteEtaModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this RouteEtaModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def zones(self):
        """Gets the zones of this RouteEtaModel.  # noqa: E501

          # noqa: E501

        :return: The zones of this RouteEtaModel.  # noqa: E501
        :rtype: list[ZoneModel]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this RouteEtaModel.

          # noqa: E501

        :param zones: The zones of this RouteEtaModel.  # noqa: E501
        :type: list[ZoneModel]
        """

        self._zones = zones

    @property
    def zone_names(self):
        """Gets the zone_names of this RouteEtaModel.  # noqa: E501

        Zone names  # noqa: E501

        :return: The zone_names of this RouteEtaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_names

    @zone_names.setter
    def zone_names(self, zone_names):
        """Sets the zone_names of this RouteEtaModel.

        Zone names  # noqa: E501

        :param zone_names: The zone_names of this RouteEtaModel.  # noqa: E501
        :type: list[str]
        """

        self._zone_names = zone_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteEtaModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteEtaModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RouteEtaModel):
            return True

        return self.to_dict() != other.to_dict()
