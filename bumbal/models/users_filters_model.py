# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class UsersFiltersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'list[int]',
        'uuid': 'list[str]',
        'pause_id': 'list[int]',
        'role_id': 'list[int]',
        'party_id': 'list[int]',
        'tag_names': 'list[str]',
        'zone_names': 'list[str]',
        'system': 'list[bool]',
        'activated': 'list[bool]'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'pause_id': 'pause_id',
        'role_id': 'role_id',
        'party_id': 'party_id',
        'tag_names': 'tag_names',
        'zone_names': 'zone_names',
        'system': 'system',
        'activated': 'activated'
    }

    def __init__(self, id=None, uuid=None, pause_id=None, role_id=None, party_id=None, tag_names=None, zone_names=None, system=None, activated=None, _configuration=None):  # noqa: E501
        """UsersFiltersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._uuid = None
        self._pause_id = None
        self._role_id = None
        self._party_id = None
        self._tag_names = None
        self._zone_names = None
        self._system = None
        self._activated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if pause_id is not None:
            self.pause_id = pause_id
        if role_id is not None:
            self.role_id = role_id
        if party_id is not None:
            self.party_id = party_id
        if tag_names is not None:
            self.tag_names = tag_names
        if zone_names is not None:
            self.zone_names = zone_names
        if system is not None:
            self.system = system
        if activated is not None:
            self.activated = activated

    @property
    def id(self):
        """Gets the id of this UsersFiltersModel.  # noqa: E501

          # noqa: E501

        :return: The id of this UsersFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsersFiltersModel.

          # noqa: E501

        :param id: The id of this UsersFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this UsersFiltersModel.  # noqa: E501

        unique per user  # noqa: E501

        :return: The uuid of this UsersFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this UsersFiltersModel.

        unique per user  # noqa: E501

        :param uuid: The uuid of this UsersFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._uuid = uuid

    @property
    def pause_id(self):
        """Gets the pause_id of this UsersFiltersModel.  # noqa: E501

        ids of pause schemes applied to user with teh role driver  # noqa: E501

        :return: The pause_id of this UsersFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._pause_id

    @pause_id.setter
    def pause_id(self, pause_id):
        """Sets the pause_id of this UsersFiltersModel.

        ids of pause schemes applied to user with teh role driver  # noqa: E501

        :param pause_id: The pause_id of this UsersFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._pause_id = pause_id

    @property
    def role_id(self):
        """Gets the role_id of this UsersFiltersModel.  # noqa: E501

        ids of the user roles, 1: Guest, 2: Driver, 3: Planner, 4: Manager, 5: Admin  # noqa: E501

        :return: The role_id of this UsersFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UsersFiltersModel.

        ids of the user roles, 1: Guest, 2: Driver, 3: Planner, 4: Manager, 5: Admin  # noqa: E501

        :param role_id: The role_id of this UsersFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._role_id = role_id

    @property
    def party_id(self):
        """Gets the party_id of this UsersFiltersModel.  # noqa: E501

        Associated Party IDs  # noqa: E501

        :return: The party_id of this UsersFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """Sets the party_id of this UsersFiltersModel.

        Associated Party IDs  # noqa: E501

        :param party_id: The party_id of this UsersFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._party_id = party_id

    @property
    def tag_names(self):
        """Gets the tag_names of this UsersFiltersModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this UsersFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this UsersFiltersModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this UsersFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def zone_names(self):
        """Gets the zone_names of this UsersFiltersModel.  # noqa: E501

        Zone names  # noqa: E501

        :return: The zone_names of this UsersFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_names

    @zone_names.setter
    def zone_names(self, zone_names):
        """Sets the zone_names of this UsersFiltersModel.

        Zone names  # noqa: E501

        :param zone_names: The zone_names of this UsersFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._zone_names = zone_names

    @property
    def system(self):
        """Gets the system of this UsersFiltersModel.  # noqa: E501

        System users  # noqa: E501

        :return: The system of this UsersFiltersModel.  # noqa: E501
        :rtype: list[bool]
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this UsersFiltersModel.

        System users  # noqa: E501

        :param system: The system of this UsersFiltersModel.  # noqa: E501
        :type: list[bool]
        """

        self._system = system

    @property
    def activated(self):
        """Gets the activated of this UsersFiltersModel.  # noqa: E501

        Activated users  # noqa: E501

        :return: The activated of this UsersFiltersModel.  # noqa: E501
        :rtype: list[bool]
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this UsersFiltersModel.

        Activated users  # noqa: E501

        :param activated: The activated of this UsersFiltersModel.  # noqa: E501
        :type: list[bool]
        """

        self._activated = activated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersFiltersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersFiltersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsersFiltersModel):
            return True

        return self.to_dict() != other.to_dict()
