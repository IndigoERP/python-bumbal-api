# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class BrandColourModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'brand_id': 'int',
        'name': 'str',
        'hex': 'str',
        'r': 'int',
        'g': 'int',
        'b': 'int',
        'a': 'float'
    }

    attribute_map = {
        'id': 'id',
        'brand_id': 'brand_id',
        'name': 'name',
        'hex': 'hex',
        'r': 'r',
        'g': 'g',
        'b': 'b',
        'a': 'a'
    }

    def __init__(self, id=None, brand_id=None, name=None, hex=None, r=None, g=None, b=None, a=None, _configuration=None):  # noqa: E501
        """BrandColourModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._brand_id = None
        self._name = None
        self._hex = None
        self._r = None
        self._g = None
        self._b = None
        self._a = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if brand_id is not None:
            self.brand_id = brand_id
        if name is not None:
            self.name = name
        if hex is not None:
            self.hex = hex
        if r is not None:
            self.r = r
        if g is not None:
            self.g = g
        if b is not None:
            self.b = b
        if a is not None:
            self.a = a

    @property
    def id(self):
        """Gets the id of this BrandColourModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this BrandColourModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BrandColourModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this BrandColourModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def brand_id(self):
        """Gets the brand_id of this BrandColourModel.  # noqa: E501

        id for brand where this colour belongs to  # noqa: E501

        :return: The brand_id of this BrandColourModel.  # noqa: E501
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this BrandColourModel.

        id for brand where this colour belongs to  # noqa: E501

        :param brand_id: The brand_id of this BrandColourModel.  # noqa: E501
        :type: int
        """

        self._brand_id = brand_id

    @property
    def name(self):
        """Gets the name of this BrandColourModel.  # noqa: E501

        name  # noqa: E501

        :return: The name of this BrandColourModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandColourModel.

        name  # noqa: E501

        :param name: The name of this BrandColourModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hex(self):
        """Gets the hex of this BrandColourModel.  # noqa: E501

        hex  # noqa: E501

        :return: The hex of this BrandColourModel.  # noqa: E501
        :rtype: str
        """
        return self._hex

    @hex.setter
    def hex(self, hex):
        """Sets the hex of this BrandColourModel.

        hex  # noqa: E501

        :param hex: The hex of this BrandColourModel.  # noqa: E501
        :type: str
        """

        self._hex = hex

    @property
    def r(self):
        """Gets the r of this BrandColourModel.  # noqa: E501

        red value for rgba  # noqa: E501

        :return: The r of this BrandColourModel.  # noqa: E501
        :rtype: int
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this BrandColourModel.

        red value for rgba  # noqa: E501

        :param r: The r of this BrandColourModel.  # noqa: E501
        :type: int
        """

        self._r = r

    @property
    def g(self):
        """Gets the g of this BrandColourModel.  # noqa: E501

        green value for rgba  # noqa: E501

        :return: The g of this BrandColourModel.  # noqa: E501
        :rtype: int
        """
        return self._g

    @g.setter
    def g(self, g):
        """Sets the g of this BrandColourModel.

        green value for rgba  # noqa: E501

        :param g: The g of this BrandColourModel.  # noqa: E501
        :type: int
        """

        self._g = g

    @property
    def b(self):
        """Gets the b of this BrandColourModel.  # noqa: E501

        blue value for rgba  # noqa: E501

        :return: The b of this BrandColourModel.  # noqa: E501
        :rtype: int
        """
        return self._b

    @b.setter
    def b(self, b):
        """Sets the b of this BrandColourModel.

        blue value for rgba  # noqa: E501

        :param b: The b of this BrandColourModel.  # noqa: E501
        :type: int
        """

        self._b = b

    @property
    def a(self):
        """Gets the a of this BrandColourModel.  # noqa: E501

        alpha value (opacity/transparency) for rgba  # noqa: E501

        :return: The a of this BrandColourModel.  # noqa: E501
        :rtype: float
        """
        return self._a

    @a.setter
    def a(self, a):
        """Sets the a of this BrandColourModel.

        alpha value (opacity/transparency) for rgba  # noqa: E501

        :param a: The a of this BrandColourModel.  # noqa: E501
        :type: float
        """

        self._a = a

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandColourModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandColourModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrandColourModel):
            return True

        return self.to_dict() != other.to_dict()
