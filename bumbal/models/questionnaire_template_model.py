# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class QuestionnaireTemplateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'active': 'bool',
        'brands': 'list[BrandModel]',
        'brand_ids': 'list[int]',
        'brand_names': 'list[str]',
        'zones': 'list[ZoneModel]',
        'zone_ids': 'list[int]',
        'zone_names': 'list[str]',
        'tags': 'list[TagModel]',
        'tag_ids': 'list[int]',
        'tag_names': 'list[str]',
        'name': 'str',
        'questionnaire_type_id': 'int',
        'questionnaire_type_name': 'str',
        'no_tags': 'bool',
        'no_zones': 'bool',
        'questions': 'list[QuestionnaireTemplateQuestionModel]'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'brands': 'brands',
        'brand_ids': 'brand_ids',
        'brand_names': 'brand_names',
        'zones': 'zones',
        'zone_ids': 'zone_ids',
        'zone_names': 'zone_names',
        'tags': 'tags',
        'tag_ids': 'tag_ids',
        'tag_names': 'tag_names',
        'name': 'name',
        'questionnaire_type_id': 'questionnaire_type_id',
        'questionnaire_type_name': 'questionnaire_type_name',
        'no_tags': 'no_tags',
        'no_zones': 'no_zones',
        'questions': 'questions'
    }

    def __init__(self, id=None, active=None, brands=None, brand_ids=None, brand_names=None, zones=None, zone_ids=None, zone_names=None, tags=None, tag_ids=None, tag_names=None, name=None, questionnaire_type_id=None, questionnaire_type_name=None, no_tags=None, no_zones=None, questions=None, _configuration=None):  # noqa: E501
        """QuestionnaireTemplateModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._active = None
        self._brands = None
        self._brand_ids = None
        self._brand_names = None
        self._zones = None
        self._zone_ids = None
        self._zone_names = None
        self._tags = None
        self._tag_ids = None
        self._tag_names = None
        self._name = None
        self._questionnaire_type_id = None
        self._questionnaire_type_name = None
        self._no_tags = None
        self._no_zones = None
        self._questions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        if brands is not None:
            self.brands = brands
        if brand_ids is not None:
            self.brand_ids = brand_ids
        if brand_names is not None:
            self.brand_names = brand_names
        if zones is not None:
            self.zones = zones
        if zone_ids is not None:
            self.zone_ids = zone_ids
        if zone_names is not None:
            self.zone_names = zone_names
        if tags is not None:
            self.tags = tags
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if tag_names is not None:
            self.tag_names = tag_names
        if name is not None:
            self.name = name
        if questionnaire_type_id is not None:
            self.questionnaire_type_id = questionnaire_type_id
        if questionnaire_type_name is not None:
            self.questionnaire_type_name = questionnaire_type_name
        if no_tags is not None:
            self.no_tags = no_tags
        if no_zones is not None:
            self.no_zones = no_zones
        if questions is not None:
            self.questions = questions

    @property
    def id(self):
        """Gets the id of this QuestionnaireTemplateModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionnaireTemplateModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this QuestionnaireTemplateModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this QuestionnaireTemplateModel.  # noqa: E501

        if active=0: QuestionnaireTemplate has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this QuestionnaireTemplateModel.

        if active=0: QuestionnaireTemplate has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this QuestionnaireTemplateModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def brands(self):
        """Gets the brands of this QuestionnaireTemplateModel.  # noqa: E501

          # noqa: E501

        :return: The brands of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[BrandModel]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this QuestionnaireTemplateModel.

          # noqa: E501

        :param brands: The brands of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[BrandModel]
        """

        self._brands = brands

    @property
    def brand_ids(self):
        """Gets the brand_ids of this QuestionnaireTemplateModel.  # noqa: E501

        Brand ids  # noqa: E501

        :return: The brand_ids of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._brand_ids

    @brand_ids.setter
    def brand_ids(self, brand_ids):
        """Sets the brand_ids of this QuestionnaireTemplateModel.

        Brand ids  # noqa: E501

        :param brand_ids: The brand_ids of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[int]
        """

        self._brand_ids = brand_ids

    @property
    def brand_names(self):
        """Gets the brand_names of this QuestionnaireTemplateModel.  # noqa: E501

        Brand names  # noqa: E501

        :return: The brand_names of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._brand_names

    @brand_names.setter
    def brand_names(self, brand_names):
        """Sets the brand_names of this QuestionnaireTemplateModel.

        Brand names  # noqa: E501

        :param brand_names: The brand_names of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[str]
        """

        self._brand_names = brand_names

    @property
    def zones(self):
        """Gets the zones of this QuestionnaireTemplateModel.  # noqa: E501

          # noqa: E501

        :return: The zones of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[ZoneModel]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this QuestionnaireTemplateModel.

          # noqa: E501

        :param zones: The zones of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[ZoneModel]
        """

        self._zones = zones

    @property
    def zone_ids(self):
        """Gets the zone_ids of this QuestionnaireTemplateModel.  # noqa: E501

        Zone ids  # noqa: E501

        :return: The zone_ids of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._zone_ids

    @zone_ids.setter
    def zone_ids(self, zone_ids):
        """Sets the zone_ids of this QuestionnaireTemplateModel.

        Zone ids  # noqa: E501

        :param zone_ids: The zone_ids of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[int]
        """

        self._zone_ids = zone_ids

    @property
    def zone_names(self):
        """Gets the zone_names of this QuestionnaireTemplateModel.  # noqa: E501

        Zone names  # noqa: E501

        :return: The zone_names of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_names

    @zone_names.setter
    def zone_names(self, zone_names):
        """Sets the zone_names of this QuestionnaireTemplateModel.

        Zone names  # noqa: E501

        :param zone_names: The zone_names of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[str]
        """

        self._zone_names = zone_names

    @property
    def tags(self):
        """Gets the tags of this QuestionnaireTemplateModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QuestionnaireTemplateModel.

          # noqa: E501

        :param tags: The tags of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def tag_ids(self):
        """Gets the tag_ids of this QuestionnaireTemplateModel.  # noqa: E501

        Tag ids  # noqa: E501

        :return: The tag_ids of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this QuestionnaireTemplateModel.

        Tag ids  # noqa: E501

        :param tag_ids: The tag_ids of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def tag_names(self):
        """Gets the tag_names of this QuestionnaireTemplateModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this QuestionnaireTemplateModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def name(self):
        """Gets the name of this QuestionnaireTemplateModel.  # noqa: E501

        Name of the questionnaire template  # noqa: E501

        :return: The name of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuestionnaireTemplateModel.

        Name of the questionnaire template  # noqa: E501

        :param name: The name of this QuestionnaireTemplateModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def questionnaire_type_id(self):
        """Gets the questionnaire_type_id of this QuestionnaireTemplateModel.  # noqa: E501

        Questionnaire type id  # noqa: E501

        :return: The questionnaire_type_id of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: int
        """
        return self._questionnaire_type_id

    @questionnaire_type_id.setter
    def questionnaire_type_id(self, questionnaire_type_id):
        """Sets the questionnaire_type_id of this QuestionnaireTemplateModel.

        Questionnaire type id  # noqa: E501

        :param questionnaire_type_id: The questionnaire_type_id of this QuestionnaireTemplateModel.  # noqa: E501
        :type: int
        """

        self._questionnaire_type_id = questionnaire_type_id

    @property
    def questionnaire_type_name(self):
        """Gets the questionnaire_type_name of this QuestionnaireTemplateModel.  # noqa: E501

        Name of the questionnaire type  # noqa: E501

        :return: The questionnaire_type_name of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_type_name

    @questionnaire_type_name.setter
    def questionnaire_type_name(self, questionnaire_type_name):
        """Sets the questionnaire_type_name of this QuestionnaireTemplateModel.

        Name of the questionnaire type  # noqa: E501

        :param questionnaire_type_name: The questionnaire_type_name of this QuestionnaireTemplateModel.  # noqa: E501
        :type: str
        """

        self._questionnaire_type_name = questionnaire_type_name

    @property
    def no_tags(self):
        """Gets the no_tags of this QuestionnaireTemplateModel.  # noqa: E501

        if no_tags=1: no tags are used for matching  # noqa: E501

        :return: The no_tags of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: bool
        """
        return self._no_tags

    @no_tags.setter
    def no_tags(self, no_tags):
        """Sets the no_tags of this QuestionnaireTemplateModel.

        if no_tags=1: no tags are used for matching  # noqa: E501

        :param no_tags: The no_tags of this QuestionnaireTemplateModel.  # noqa: E501
        :type: bool
        """

        self._no_tags = no_tags

    @property
    def no_zones(self):
        """Gets the no_zones of this QuestionnaireTemplateModel.  # noqa: E501

        if no_zones=1: no zones are used for matching  # noqa: E501

        :return: The no_zones of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: bool
        """
        return self._no_zones

    @no_zones.setter
    def no_zones(self, no_zones):
        """Sets the no_zones of this QuestionnaireTemplateModel.

        if no_zones=1: no zones are used for matching  # noqa: E501

        :param no_zones: The no_zones of this QuestionnaireTemplateModel.  # noqa: E501
        :type: bool
        """

        self._no_zones = no_zones

    @property
    def questions(self):
        """Gets the questions of this QuestionnaireTemplateModel.  # noqa: E501

          # noqa: E501

        :return: The questions of this QuestionnaireTemplateModel.  # noqa: E501
        :rtype: list[QuestionnaireTemplateQuestionModel]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this QuestionnaireTemplateModel.

          # noqa: E501

        :param questions: The questions of this QuestionnaireTemplateModel.  # noqa: E501
        :type: list[QuestionnaireTemplateQuestionModel]
        """

        self._questions = questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionnaireTemplateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionnaireTemplateModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuestionnaireTemplateModel):
            return True

        return self.to_dict() != other.to_dict()
