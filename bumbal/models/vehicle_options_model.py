# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class VehicleOptionsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_tags': 'bool',
        'include_links': 'bool',
        'include_meta_data': 'bool',
        'include_updated_by_name': 'bool',
        'include_vehicle_meta_data': 'bool',
        'include_vehicle_links': 'bool',
        'include_vehicle_tags': 'bool',
        'include_tag_type_name': 'bool'
    }

    attribute_map = {
        'include_tags': 'include_tags',
        'include_links': 'include_links',
        'include_meta_data': 'include_meta_data',
        'include_updated_by_name': 'include_updated_by_name',
        'include_vehicle_meta_data': 'include_vehicle_meta_data',
        'include_vehicle_links': 'include_vehicle_links',
        'include_vehicle_tags': 'include_vehicle_tags',
        'include_tag_type_name': 'include_tag_type_name'
    }

    def __init__(self, include_tags=None, include_links=None, include_meta_data=None, include_updated_by_name=None, include_vehicle_meta_data=None, include_vehicle_links=None, include_vehicle_tags=None, include_tag_type_name=None, _configuration=None):  # noqa: E501
        """VehicleOptionsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._include_tags = None
        self._include_links = None
        self._include_meta_data = None
        self._include_updated_by_name = None
        self._include_vehicle_meta_data = None
        self._include_vehicle_links = None
        self._include_vehicle_tags = None
        self._include_tag_type_name = None
        self.discriminator = None

        if include_tags is not None:
            self.include_tags = include_tags
        if include_links is not None:
            self.include_links = include_links
        if include_meta_data is not None:
            self.include_meta_data = include_meta_data
        if include_updated_by_name is not None:
            self.include_updated_by_name = include_updated_by_name
        if include_vehicle_meta_data is not None:
            self.include_vehicle_meta_data = include_vehicle_meta_data
        if include_vehicle_links is not None:
            self.include_vehicle_links = include_vehicle_links
        if include_vehicle_tags is not None:
            self.include_vehicle_tags = include_vehicle_tags
        if include_tag_type_name is not None:
            self.include_tag_type_name = include_tag_type_name

    @property
    def include_tags(self):
        """Gets the include_tags of this VehicleOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_tags of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_tags

    @include_tags.setter
    def include_tags(self, include_tags):
        """Sets the include_tags of this VehicleOptionsModel.

          # noqa: E501

        :param include_tags: The include_tags of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_tags = include_tags

    @property
    def include_links(self):
        """Gets the include_links of this VehicleOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_links of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_links

    @include_links.setter
    def include_links(self, include_links):
        """Sets the include_links of this VehicleOptionsModel.

          # noqa: E501

        :param include_links: The include_links of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_links = include_links

    @property
    def include_meta_data(self):
        """Gets the include_meta_data of this VehicleOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_meta_data of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_meta_data

    @include_meta_data.setter
    def include_meta_data(self, include_meta_data):
        """Sets the include_meta_data of this VehicleOptionsModel.

          # noqa: E501

        :param include_meta_data: The include_meta_data of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_meta_data = include_meta_data

    @property
    def include_updated_by_name(self):
        """Gets the include_updated_by_name of this VehicleOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_updated_by_name of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_updated_by_name

    @include_updated_by_name.setter
    def include_updated_by_name(self, include_updated_by_name):
        """Sets the include_updated_by_name of this VehicleOptionsModel.

          # noqa: E501

        :param include_updated_by_name: The include_updated_by_name of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_updated_by_name = include_updated_by_name

    @property
    def include_vehicle_meta_data(self):
        """Gets the include_vehicle_meta_data of this VehicleOptionsModel.  # noqa: E501

        Deprecated! use include_meta_data  # noqa: E501

        :return: The include_vehicle_meta_data of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_vehicle_meta_data

    @include_vehicle_meta_data.setter
    def include_vehicle_meta_data(self, include_vehicle_meta_data):
        """Sets the include_vehicle_meta_data of this VehicleOptionsModel.

        Deprecated! use include_meta_data  # noqa: E501

        :param include_vehicle_meta_data: The include_vehicle_meta_data of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_vehicle_meta_data = include_vehicle_meta_data

    @property
    def include_vehicle_links(self):
        """Gets the include_vehicle_links of this VehicleOptionsModel.  # noqa: E501

        Deprecated! use include_links  # noqa: E501

        :return: The include_vehicle_links of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_vehicle_links

    @include_vehicle_links.setter
    def include_vehicle_links(self, include_vehicle_links):
        """Sets the include_vehicle_links of this VehicleOptionsModel.

        Deprecated! use include_links  # noqa: E501

        :param include_vehicle_links: The include_vehicle_links of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_vehicle_links = include_vehicle_links

    @property
    def include_vehicle_tags(self):
        """Gets the include_vehicle_tags of this VehicleOptionsModel.  # noqa: E501

        Deprecated! use include_tags  # noqa: E501

        :return: The include_vehicle_tags of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_vehicle_tags

    @include_vehicle_tags.setter
    def include_vehicle_tags(self, include_vehicle_tags):
        """Sets the include_vehicle_tags of this VehicleOptionsModel.

        Deprecated! use include_tags  # noqa: E501

        :param include_vehicle_tags: The include_vehicle_tags of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_vehicle_tags = include_vehicle_tags

    @property
    def include_tag_type_name(self):
        """Gets the include_tag_type_name of this VehicleOptionsModel.  # noqa: E501

        Deprecated! use include_tags  # noqa: E501

        :return: The include_tag_type_name of this VehicleOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_tag_type_name

    @include_tag_type_name.setter
    def include_tag_type_name(self, include_tag_type_name):
        """Sets the include_tag_type_name of this VehicleOptionsModel.

        Deprecated! use include_tags  # noqa: E501

        :param include_tag_type_name: The include_tag_type_name of this VehicleOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_tag_type_name = include_tag_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleOptionsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleOptionsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleOptionsModel):
            return True

        return self.to_dict() != other.to_dict()
