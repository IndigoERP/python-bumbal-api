# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ManualWebHookModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_id': 'int',
        'web_hook_name': 'str',
        'extra_payload': 'list[PayloadItem]'
    }

    attribute_map = {
        'object_id': 'object_id',
        'web_hook_name': 'web_hook_name',
        'extra_payload': 'extra_payload'
    }

    def __init__(self, object_id=None, web_hook_name=None, extra_payload=None, _configuration=None):  # noqa: E501
        """ManualWebHookModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._object_id = None
        self._web_hook_name = None
        self._extra_payload = None
        self.discriminator = None

        if object_id is not None:
            self.object_id = object_id
        if web_hook_name is not None:
            self.web_hook_name = web_hook_name
        if extra_payload is not None:
            self.extra_payload = extra_payload

    @property
    def object_id(self):
        """Gets the object_id of this ManualWebHookModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The object_id of this ManualWebHookModel.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ManualWebHookModel.

        Unique Identifier  # noqa: E501

        :param object_id: The object_id of this ManualWebHookModel.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def web_hook_name(self):
        """Gets the web_hook_name of this ManualWebHookModel.  # noqa: E501

        Name of this Web Hook  # noqa: E501

        :return: The web_hook_name of this ManualWebHookModel.  # noqa: E501
        :rtype: str
        """
        return self._web_hook_name

    @web_hook_name.setter
    def web_hook_name(self, web_hook_name):
        """Sets the web_hook_name of this ManualWebHookModel.

        Name of this Web Hook  # noqa: E501

        :param web_hook_name: The web_hook_name of this ManualWebHookModel.  # noqa: E501
        :type: str
        """

        self._web_hook_name = web_hook_name

    @property
    def extra_payload(self):
        """Gets the extra_payload of this ManualWebHookModel.  # noqa: E501

        extra payload to be sent when the webhook is triggered  # noqa: E501

        :return: The extra_payload of this ManualWebHookModel.  # noqa: E501
        :rtype: list[PayloadItem]
        """
        return self._extra_payload

    @extra_payload.setter
    def extra_payload(self, extra_payload):
        """Sets the extra_payload of this ManualWebHookModel.

        extra payload to be sent when the webhook is triggered  # noqa: E501

        :param extra_payload: The extra_payload of this ManualWebHookModel.  # noqa: E501
        :type: list[PayloadItem]
        """

        self._extra_payload = extra_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManualWebHookModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManualWebHookModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManualWebHookModel):
            return True

        return self.to_dict() != other.to_dict()
