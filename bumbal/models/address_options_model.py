# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class AddressOptionsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_phone_nrs': 'bool',
        'include_emails': 'bool',
        'include_address_tags': 'bool',
        'include_party_info': 'bool',
        'include_party_name': 'bool',
        'include_address_type_names': 'bool',
        'include_address_meta_data': 'bool',
        'include_address_files': 'bool',
        'include_address_notes': 'bool'
    }

    attribute_map = {
        'include_phone_nrs': 'include_phone_nrs',
        'include_emails': 'include_emails',
        'include_address_tags': 'include_address_tags',
        'include_party_info': 'include_party_info',
        'include_party_name': 'include_party_name',
        'include_address_type_names': 'include_address_type_names',
        'include_address_meta_data': 'include_address_meta_data',
        'include_address_files': 'include_address_files',
        'include_address_notes': 'include_address_notes'
    }

    def __init__(self, include_phone_nrs=None, include_emails=None, include_address_tags=None, include_party_info=None, include_party_name=None, include_address_type_names=None, include_address_meta_data=None, include_address_files=None, include_address_notes=None, _configuration=None):  # noqa: E501
        """AddressOptionsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._include_phone_nrs = None
        self._include_emails = None
        self._include_address_tags = None
        self._include_party_info = None
        self._include_party_name = None
        self._include_address_type_names = None
        self._include_address_meta_data = None
        self._include_address_files = None
        self._include_address_notes = None
        self.discriminator = None

        if include_phone_nrs is not None:
            self.include_phone_nrs = include_phone_nrs
        if include_emails is not None:
            self.include_emails = include_emails
        if include_address_tags is not None:
            self.include_address_tags = include_address_tags
        if include_party_info is not None:
            self.include_party_info = include_party_info
        if include_party_name is not None:
            self.include_party_name = include_party_name
        if include_address_type_names is not None:
            self.include_address_type_names = include_address_type_names
        if include_address_meta_data is not None:
            self.include_address_meta_data = include_address_meta_data
        if include_address_files is not None:
            self.include_address_files = include_address_files
        if include_address_notes is not None:
            self.include_address_notes = include_address_notes

    @property
    def include_phone_nrs(self):
        """Gets the include_phone_nrs of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_phone_nrs of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_phone_nrs

    @include_phone_nrs.setter
    def include_phone_nrs(self, include_phone_nrs):
        """Sets the include_phone_nrs of this AddressOptionsModel.

          # noqa: E501

        :param include_phone_nrs: The include_phone_nrs of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_phone_nrs = include_phone_nrs

    @property
    def include_emails(self):
        """Gets the include_emails of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_emails of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_emails

    @include_emails.setter
    def include_emails(self, include_emails):
        """Sets the include_emails of this AddressOptionsModel.

          # noqa: E501

        :param include_emails: The include_emails of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_emails = include_emails

    @property
    def include_address_tags(self):
        """Gets the include_address_tags of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_address_tags of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_address_tags

    @include_address_tags.setter
    def include_address_tags(self, include_address_tags):
        """Sets the include_address_tags of this AddressOptionsModel.

          # noqa: E501

        :param include_address_tags: The include_address_tags of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_address_tags = include_address_tags

    @property
    def include_party_info(self):
        """Gets the include_party_info of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_party_info of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_party_info

    @include_party_info.setter
    def include_party_info(self, include_party_info):
        """Sets the include_party_info of this AddressOptionsModel.

          # noqa: E501

        :param include_party_info: The include_party_info of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_party_info = include_party_info

    @property
    def include_party_name(self):
        """Gets the include_party_name of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_party_name of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_party_name

    @include_party_name.setter
    def include_party_name(self, include_party_name):
        """Sets the include_party_name of this AddressOptionsModel.

          # noqa: E501

        :param include_party_name: The include_party_name of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_party_name = include_party_name

    @property
    def include_address_type_names(self):
        """Gets the include_address_type_names of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_address_type_names of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_address_type_names

    @include_address_type_names.setter
    def include_address_type_names(self, include_address_type_names):
        """Sets the include_address_type_names of this AddressOptionsModel.

          # noqa: E501

        :param include_address_type_names: The include_address_type_names of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_address_type_names = include_address_type_names

    @property
    def include_address_meta_data(self):
        """Gets the include_address_meta_data of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_address_meta_data of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_address_meta_data

    @include_address_meta_data.setter
    def include_address_meta_data(self, include_address_meta_data):
        """Sets the include_address_meta_data of this AddressOptionsModel.

          # noqa: E501

        :param include_address_meta_data: The include_address_meta_data of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_address_meta_data = include_address_meta_data

    @property
    def include_address_files(self):
        """Gets the include_address_files of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_address_files of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_address_files

    @include_address_files.setter
    def include_address_files(self, include_address_files):
        """Sets the include_address_files of this AddressOptionsModel.

          # noqa: E501

        :param include_address_files: The include_address_files of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_address_files = include_address_files

    @property
    def include_address_notes(self):
        """Gets the include_address_notes of this AddressOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_address_notes of this AddressOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_address_notes

    @include_address_notes.setter
    def include_address_notes(self, include_address_notes):
        """Sets the include_address_notes of this AddressOptionsModel.

          # noqa: E501

        :param include_address_notes: The include_address_notes of this AddressOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_address_notes = include_address_notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressOptionsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressOptionsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressOptionsModel):
            return True

        return self.to_dict() != other.to_dict()
