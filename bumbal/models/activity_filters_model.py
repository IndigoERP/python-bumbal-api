# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ActivityFiltersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'list[int]',
        'nr': 'list[str]',
        'assignment_id': 'list[int]',
        'shipment_activity_id': 'list[int]',
        'date_time_from': 'datetime',
        'date_time_to': 'datetime',
        'date_time_from_since': 'datetime',
        'date_time_from_till': 'datetime',
        'date_time_to_since': 'datetime',
        'date_time_to_till': 'datetime',
        'planned_date_time_from': 'datetime',
        'planned_date_time_to': 'datetime',
        'planned_date_time_from_since': 'datetime',
        'planned_date_time_from_till': 'datetime',
        'planned_date_time_to_since': 'datetime',
        'planned_date_time_to_till': 'datetime',
        'updated_at_since': 'datetime',
        'updated_at_till': 'datetime',
        'status': 'list[str]',
        'status_name': 'list[str]',
        'active': 'list[int]',
        'status_id': 'list[int]',
        'activity_type_id': 'list[int]',
        'locked': 'list[int]',
        'activity_type_name': 'list[str]',
        'bundle_activity_id': 'list[int]',
        'description': 'list[str]',
        'reference': 'list[str]',
        'priority': 'list[int]',
        'top_priority': 'bool',
        'has_geolocation': 'bool',
        'has_route_assigned': 'bool',
        'search_text': 'str',
        'route_id': 'list[int]',
        'user_id': 'int',
        'party_id': 'int',
        'recurrence_id': 'int',
        'depot_address_links': 'list[LinkModel]',
        'tag_names': 'list[str]',
        'zone_names': 'list[str]',
        'link': 'list[object]',
        'links': 'list[object]',
        'created_at_since': 'datetime',
        'created_at_till': 'datetime',
        'time_slots_created_at_since': 'datetime',
        'time_slots_created_at_till': 'datetime',
        'depot_address_id': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'nr': 'nr',
        'assignment_id': 'assignment_id',
        'shipment_activity_id': 'shipment_activity_id',
        'date_time_from': 'date_time_from',
        'date_time_to': 'date_time_to',
        'date_time_from_since': 'date_time_from_since',
        'date_time_from_till': 'date_time_from_till',
        'date_time_to_since': 'date_time_to_since',
        'date_time_to_till': 'date_time_to_till',
        'planned_date_time_from': 'planned_date_time_from',
        'planned_date_time_to': 'planned_date_time_to',
        'planned_date_time_from_since': 'planned_date_time_from_since',
        'planned_date_time_from_till': 'planned_date_time_from_till',
        'planned_date_time_to_since': 'planned_date_time_to_since',
        'planned_date_time_to_till': 'planned_date_time_to_till',
        'updated_at_since': 'updated_at_since',
        'updated_at_till': 'updated_at_till',
        'status': 'status',
        'status_name': 'status_name',
        'active': 'active',
        'status_id': 'status_id',
        'activity_type_id': 'activity_type_id',
        'locked': 'locked',
        'activity_type_name': 'activity_type_name',
        'bundle_activity_id': 'bundle_activity_id',
        'description': 'description',
        'reference': 'reference',
        'priority': 'priority',
        'top_priority': 'top_priority',
        'has_geolocation': 'has_geolocation',
        'has_route_assigned': 'has_route_assigned',
        'search_text': 'search_text',
        'route_id': 'route_id',
        'user_id': 'user_id',
        'party_id': 'party_id',
        'recurrence_id': 'recurrence_id',
        'depot_address_links': 'depot_address_links',
        'tag_names': 'tag_names',
        'zone_names': 'zone_names',
        'link': 'link',
        'links': 'links',
        'created_at_since': 'created_at_since',
        'created_at_till': 'created_at_till',
        'time_slots_created_at_since': 'time_slots_created_at_since',
        'time_slots_created_at_till': 'time_slots_created_at_till',
        'depot_address_id': 'depot_address_id'
    }

    def __init__(self, id=None, nr=None, assignment_id=None, shipment_activity_id=None, date_time_from=None, date_time_to=None, date_time_from_since=None, date_time_from_till=None, date_time_to_since=None, date_time_to_till=None, planned_date_time_from=None, planned_date_time_to=None, planned_date_time_from_since=None, planned_date_time_from_till=None, planned_date_time_to_since=None, planned_date_time_to_till=None, updated_at_since=None, updated_at_till=None, status=None, status_name=None, active=None, status_id=None, activity_type_id=None, locked=None, activity_type_name=None, bundle_activity_id=None, description=None, reference=None, priority=None, top_priority=None, has_geolocation=None, has_route_assigned=None, search_text=None, route_id=None, user_id=None, party_id=None, recurrence_id=None, depot_address_links=None, tag_names=None, zone_names=None, link=None, links=None, created_at_since=None, created_at_till=None, time_slots_created_at_since=None, time_slots_created_at_till=None, depot_address_id=None, _configuration=None):  # noqa: E501
        """ActivityFiltersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._nr = None
        self._assignment_id = None
        self._shipment_activity_id = None
        self._date_time_from = None
        self._date_time_to = None
        self._date_time_from_since = None
        self._date_time_from_till = None
        self._date_time_to_since = None
        self._date_time_to_till = None
        self._planned_date_time_from = None
        self._planned_date_time_to = None
        self._planned_date_time_from_since = None
        self._planned_date_time_from_till = None
        self._planned_date_time_to_since = None
        self._planned_date_time_to_till = None
        self._updated_at_since = None
        self._updated_at_till = None
        self._status = None
        self._status_name = None
        self._active = None
        self._status_id = None
        self._activity_type_id = None
        self._locked = None
        self._activity_type_name = None
        self._bundle_activity_id = None
        self._description = None
        self._reference = None
        self._priority = None
        self._top_priority = None
        self._has_geolocation = None
        self._has_route_assigned = None
        self._search_text = None
        self._route_id = None
        self._user_id = None
        self._party_id = None
        self._recurrence_id = None
        self._depot_address_links = None
        self._tag_names = None
        self._zone_names = None
        self._link = None
        self._links = None
        self._created_at_since = None
        self._created_at_till = None
        self._time_slots_created_at_since = None
        self._time_slots_created_at_till = None
        self._depot_address_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if nr is not None:
            self.nr = nr
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if shipment_activity_id is not None:
            self.shipment_activity_id = shipment_activity_id
        if date_time_from is not None:
            self.date_time_from = date_time_from
        if date_time_to is not None:
            self.date_time_to = date_time_to
        if date_time_from_since is not None:
            self.date_time_from_since = date_time_from_since
        if date_time_from_till is not None:
            self.date_time_from_till = date_time_from_till
        if date_time_to_since is not None:
            self.date_time_to_since = date_time_to_since
        if date_time_to_till is not None:
            self.date_time_to_till = date_time_to_till
        if planned_date_time_from is not None:
            self.planned_date_time_from = planned_date_time_from
        if planned_date_time_to is not None:
            self.planned_date_time_to = planned_date_time_to
        if planned_date_time_from_since is not None:
            self.planned_date_time_from_since = planned_date_time_from_since
        if planned_date_time_from_till is not None:
            self.planned_date_time_from_till = planned_date_time_from_till
        if planned_date_time_to_since is not None:
            self.planned_date_time_to_since = planned_date_time_to_since
        if planned_date_time_to_till is not None:
            self.planned_date_time_to_till = planned_date_time_to_till
        if updated_at_since is not None:
            self.updated_at_since = updated_at_since
        if updated_at_till is not None:
            self.updated_at_till = updated_at_till
        if status is not None:
            self.status = status
        if status_name is not None:
            self.status_name = status_name
        if active is not None:
            self.active = active
        if status_id is not None:
            self.status_id = status_id
        if activity_type_id is not None:
            self.activity_type_id = activity_type_id
        if locked is not None:
            self.locked = locked
        if activity_type_name is not None:
            self.activity_type_name = activity_type_name
        if bundle_activity_id is not None:
            self.bundle_activity_id = bundle_activity_id
        if description is not None:
            self.description = description
        if reference is not None:
            self.reference = reference
        if priority is not None:
            self.priority = priority
        if top_priority is not None:
            self.top_priority = top_priority
        if has_geolocation is not None:
            self.has_geolocation = has_geolocation
        if has_route_assigned is not None:
            self.has_route_assigned = has_route_assigned
        if search_text is not None:
            self.search_text = search_text
        if route_id is not None:
            self.route_id = route_id
        if user_id is not None:
            self.user_id = user_id
        if party_id is not None:
            self.party_id = party_id
        if recurrence_id is not None:
            self.recurrence_id = recurrence_id
        if depot_address_links is not None:
            self.depot_address_links = depot_address_links
        if tag_names is not None:
            self.tag_names = tag_names
        if zone_names is not None:
            self.zone_names = zone_names
        if link is not None:
            self.link = link
        if links is not None:
            self.links = links
        if created_at_since is not None:
            self.created_at_since = created_at_since
        if created_at_till is not None:
            self.created_at_till = created_at_till
        if time_slots_created_at_since is not None:
            self.time_slots_created_at_since = time_slots_created_at_since
        if time_slots_created_at_till is not None:
            self.time_slots_created_at_till = time_slots_created_at_till
        if depot_address_id is not None:
            self.depot_address_id = depot_address_id

    @property
    def id(self):
        """Gets the id of this ActivityFiltersModel.  # noqa: E501

        Unique Identifier(s)  # noqa: E501

        :return: The id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityFiltersModel.

        Unique Identifier(s)  # noqa: E501

        :param id: The id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._id = id

    @property
    def nr(self):
        """Gets the nr of this ActivityFiltersModel.  # noqa: E501

        Activity nr  # noqa: E501

        :return: The nr of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._nr

    @nr.setter
    def nr(self, nr):
        """Sets the nr of this ActivityFiltersModel.

        Activity nr  # noqa: E501

        :param nr: The nr of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._nr = nr

    @property
    def assignment_id(self):
        """Gets the assignment_id of this ActivityFiltersModel.  # noqa: E501

        Identifier(s) assignment(s) for activities  # noqa: E501

        :return: The assignment_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this ActivityFiltersModel.

        Identifier(s) assignment(s) for activities  # noqa: E501

        :param assignment_id: The assignment_id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._assignment_id = assignment_id

    @property
    def shipment_activity_id(self):
        """Gets the shipment_activity_id of this ActivityFiltersModel.  # noqa: E501

        Unique Identifier(s) partner shipment activity  # noqa: E501

        :return: The shipment_activity_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._shipment_activity_id

    @shipment_activity_id.setter
    def shipment_activity_id(self, shipment_activity_id):
        """Sets the shipment_activity_id of this ActivityFiltersModel.

        Unique Identifier(s) partner shipment activity  # noqa: E501

        :param shipment_activity_id: The shipment_activity_id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._shipment_activity_id = shipment_activity_id

    @property
    def date_time_from(self):
        """Gets the date_time_from of this ActivityFiltersModel.  # noqa: E501

        DateTime From  # noqa: E501

        :return: The date_time_from of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_from

    @date_time_from.setter
    def date_time_from(self, date_time_from):
        """Sets the date_time_from of this ActivityFiltersModel.

        DateTime From  # noqa: E501

        :param date_time_from: The date_time_from of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_from = date_time_from

    @property
    def date_time_to(self):
        """Gets the date_time_to of this ActivityFiltersModel.  # noqa: E501

        DateTime To  # noqa: E501

        :return: The date_time_to of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_to

    @date_time_to.setter
    def date_time_to(self, date_time_to):
        """Sets the date_time_to of this ActivityFiltersModel.

        DateTime To  # noqa: E501

        :param date_time_to: The date_time_to of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_to = date_time_to

    @property
    def date_time_from_since(self):
        """Gets the date_time_from_since of this ActivityFiltersModel.  # noqa: E501

        filter activities with a DateTime From since this input  # noqa: E501

        :return: The date_time_from_since of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_from_since

    @date_time_from_since.setter
    def date_time_from_since(self, date_time_from_since):
        """Sets the date_time_from_since of this ActivityFiltersModel.

        filter activities with a DateTime From since this input  # noqa: E501

        :param date_time_from_since: The date_time_from_since of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_from_since = date_time_from_since

    @property
    def date_time_from_till(self):
        """Gets the date_time_from_till of this ActivityFiltersModel.  # noqa: E501

        filter activities with a DateTime From till this input  # noqa: E501

        :return: The date_time_from_till of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_from_till

    @date_time_from_till.setter
    def date_time_from_till(self, date_time_from_till):
        """Sets the date_time_from_till of this ActivityFiltersModel.

        filter activities with a DateTime From till this input  # noqa: E501

        :param date_time_from_till: The date_time_from_till of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_from_till = date_time_from_till

    @property
    def date_time_to_since(self):
        """Gets the date_time_to_since of this ActivityFiltersModel.  # noqa: E501

        filter activities with a DateTime To since this input  # noqa: E501

        :return: The date_time_to_since of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_to_since

    @date_time_to_since.setter
    def date_time_to_since(self, date_time_to_since):
        """Sets the date_time_to_since of this ActivityFiltersModel.

        filter activities with a DateTime To since this input  # noqa: E501

        :param date_time_to_since: The date_time_to_since of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_to_since = date_time_to_since

    @property
    def date_time_to_till(self):
        """Gets the date_time_to_till of this ActivityFiltersModel.  # noqa: E501

        filter activities with a DateTime To till this input  # noqa: E501

        :return: The date_time_to_till of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_to_till

    @date_time_to_till.setter
    def date_time_to_till(self, date_time_to_till):
        """Sets the date_time_to_till of this ActivityFiltersModel.

        filter activities with a DateTime To till this input  # noqa: E501

        :param date_time_to_till: The date_time_to_till of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_to_till = date_time_to_till

    @property
    def planned_date_time_from(self):
        """Gets the planned_date_time_from of this ActivityFiltersModel.  # noqa: E501

        Planned DateTime From  # noqa: E501

        :return: The planned_date_time_from of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_from

    @planned_date_time_from.setter
    def planned_date_time_from(self, planned_date_time_from):
        """Sets the planned_date_time_from of this ActivityFiltersModel.

        Planned DateTime From  # noqa: E501

        :param planned_date_time_from: The planned_date_time_from of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_from = planned_date_time_from

    @property
    def planned_date_time_to(self):
        """Gets the planned_date_time_to of this ActivityFiltersModel.  # noqa: E501

        Planned DateTime To  # noqa: E501

        :return: The planned_date_time_to of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_to

    @planned_date_time_to.setter
    def planned_date_time_to(self, planned_date_time_to):
        """Sets the planned_date_time_to of this ActivityFiltersModel.

        Planned DateTime To  # noqa: E501

        :param planned_date_time_to: The planned_date_time_to of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_to = planned_date_time_to

    @property
    def planned_date_time_from_since(self):
        """Gets the planned_date_time_from_since of this ActivityFiltersModel.  # noqa: E501

        filter activities with a planned DateTime From since this input  # noqa: E501

        :return: The planned_date_time_from_since of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_from_since

    @planned_date_time_from_since.setter
    def planned_date_time_from_since(self, planned_date_time_from_since):
        """Sets the planned_date_time_from_since of this ActivityFiltersModel.

        filter activities with a planned DateTime From since this input  # noqa: E501

        :param planned_date_time_from_since: The planned_date_time_from_since of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_from_since = planned_date_time_from_since

    @property
    def planned_date_time_from_till(self):
        """Gets the planned_date_time_from_till of this ActivityFiltersModel.  # noqa: E501

        filter activities with a planned DateTime From till this input  # noqa: E501

        :return: The planned_date_time_from_till of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_from_till

    @planned_date_time_from_till.setter
    def planned_date_time_from_till(self, planned_date_time_from_till):
        """Sets the planned_date_time_from_till of this ActivityFiltersModel.

        filter activities with a planned DateTime From till this input  # noqa: E501

        :param planned_date_time_from_till: The planned_date_time_from_till of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_from_till = planned_date_time_from_till

    @property
    def planned_date_time_to_since(self):
        """Gets the planned_date_time_to_since of this ActivityFiltersModel.  # noqa: E501

        filter activities with a planned DateTime To since this input  # noqa: E501

        :return: The planned_date_time_to_since of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_to_since

    @planned_date_time_to_since.setter
    def planned_date_time_to_since(self, planned_date_time_to_since):
        """Sets the planned_date_time_to_since of this ActivityFiltersModel.

        filter activities with a planned DateTime To since this input  # noqa: E501

        :param planned_date_time_to_since: The planned_date_time_to_since of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_to_since = planned_date_time_to_since

    @property
    def planned_date_time_to_till(self):
        """Gets the planned_date_time_to_till of this ActivityFiltersModel.  # noqa: E501

        filter activities with a planned DateTime To till this input  # noqa: E501

        :return: The planned_date_time_to_till of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_to_till

    @planned_date_time_to_till.setter
    def planned_date_time_to_till(self, planned_date_time_to_till):
        """Sets the planned_date_time_to_till of this ActivityFiltersModel.

        filter activities with a planned DateTime To till this input  # noqa: E501

        :param planned_date_time_to_till: The planned_date_time_to_till of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_to_till = planned_date_time_to_till

    @property
    def updated_at_since(self):
        """Gets the updated_at_since of this ActivityFiltersModel.  # noqa: E501

        Show updated since  # noqa: E501

        :return: The updated_at_since of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_since

    @updated_at_since.setter
    def updated_at_since(self, updated_at_since):
        """Sets the updated_at_since of this ActivityFiltersModel.

        Show updated since  # noqa: E501

        :param updated_at_since: The updated_at_since of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at_since = updated_at_since

    @property
    def updated_at_till(self):
        """Gets the updated_at_till of this ActivityFiltersModel.  # noqa: E501

        Show updated till  # noqa: E501

        :return: The updated_at_till of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_till

    @updated_at_till.setter
    def updated_at_till(self, updated_at_till):
        """Sets the updated_at_till of this ActivityFiltersModel.

        Show updated till  # noqa: E501

        :param updated_at_till: The updated_at_till of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at_till = updated_at_till

    @property
    def status(self):
        """Gets the status of this ActivityFiltersModel.  # noqa: E501

        Activity Status  # noqa: E501

        :return: The status of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActivityFiltersModel.

        Activity Status  # noqa: E501

        :param status: The status of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._status = status

    @property
    def status_name(self):
        """Gets the status_name of this ActivityFiltersModel.  # noqa: E501

        Activity Status name  # noqa: E501

        :return: The status_name of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this ActivityFiltersModel.

        Activity Status name  # noqa: E501

        :param status_name: The status_name of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._status_name = status_name

    @property
    def active(self):
        """Gets the active of this ActivityFiltersModel.  # noqa: E501

        Active status of Activity, 0 values represent deleted activities  # noqa: E501

        :return: The active of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ActivityFiltersModel.

        Active status of Activity, 0 values represent deleted activities  # noqa: E501

        :param active: The active of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._active = active

    @property
    def status_id(self):
        """Gets the status_id of this ActivityFiltersModel.  # noqa: E501

        Activity Status id  # noqa: E501

        :return: The status_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this ActivityFiltersModel.

        Activity Status id  # noqa: E501

        :param status_id: The status_id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._status_id = status_id

    @property
    def activity_type_id(self):
        """Gets the activity_type_id of this ActivityFiltersModel.  # noqa: E501

        Activity type id  # noqa: E501

        :return: The activity_type_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._activity_type_id

    @activity_type_id.setter
    def activity_type_id(self, activity_type_id):
        """Sets the activity_type_id of this ActivityFiltersModel.

        Activity type id  # noqa: E501

        :param activity_type_id: The activity_type_id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._activity_type_id = activity_type_id

    @property
    def locked(self):
        """Gets the locked of this ActivityFiltersModel.  # noqa: E501

        Activity locked status. 0: not locked, 1: locked on route and time, 2: only locked on route  # noqa: E501

        :return: The locked of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ActivityFiltersModel.

        Activity locked status. 0: not locked, 1: locked on route and time, 2: only locked on route  # noqa: E501

        :param locked: The locked of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._locked = locked

    @property
    def activity_type_name(self):
        """Gets the activity_type_name of this ActivityFiltersModel.  # noqa: E501

        Activity type name  # noqa: E501

        :return: The activity_type_name of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._activity_type_name

    @activity_type_name.setter
    def activity_type_name(self, activity_type_name):
        """Sets the activity_type_name of this ActivityFiltersModel.

        Activity type name  # noqa: E501

        :param activity_type_name: The activity_type_name of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._activity_type_name = activity_type_name

    @property
    def bundle_activity_id(self):
        """Gets the bundle_activity_id of this ActivityFiltersModel.  # noqa: E501

        bundle activity id(s)  # noqa: E501

        :return: The bundle_activity_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._bundle_activity_id

    @bundle_activity_id.setter
    def bundle_activity_id(self, bundle_activity_id):
        """Sets the bundle_activity_id of this ActivityFiltersModel.

        bundle activity id(s)  # noqa: E501

        :param bundle_activity_id: The bundle_activity_id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._bundle_activity_id = bundle_activity_id

    @property
    def description(self):
        """Gets the description of this ActivityFiltersModel.  # noqa: E501

        Activity description (not visible in Bumbal interface)  # noqa: E501

        :return: The description of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityFiltersModel.

        Activity description (not visible in Bumbal interface)  # noqa: E501

        :param description: The description of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def reference(self):
        """Gets the reference of this ActivityFiltersModel.  # noqa: E501

        Activity reference  # noqa: E501

        :return: The reference of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ActivityFiltersModel.

        Activity reference  # noqa: E501

        :param reference: The reference of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._reference = reference

    @property
    def priority(self):
        """Gets the priority of this ActivityFiltersModel.  # noqa: E501

        Priority. 1: low, 2: medium, 3: high  # noqa: E501

        :return: The priority of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ActivityFiltersModel.

        Priority. 1: low, 2: medium, 3: high  # noqa: E501

        :param priority: The priority of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._priority = priority

    @property
    def top_priority(self):
        """Gets the top_priority of this ActivityFiltersModel.  # noqa: E501

        top priority  # noqa: E501

        :return: The top_priority of this ActivityFiltersModel.  # noqa: E501
        :rtype: bool
        """
        return self._top_priority

    @top_priority.setter
    def top_priority(self, top_priority):
        """Sets the top_priority of this ActivityFiltersModel.

        top priority  # noqa: E501

        :param top_priority: The top_priority of this ActivityFiltersModel.  # noqa: E501
        :type: bool
        """

        self._top_priority = top_priority

    @property
    def has_geolocation(self):
        """Gets the has_geolocation of this ActivityFiltersModel.  # noqa: E501

        has a properly geocoded address  # noqa: E501

        :return: The has_geolocation of this ActivityFiltersModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_geolocation

    @has_geolocation.setter
    def has_geolocation(self, has_geolocation):
        """Sets the has_geolocation of this ActivityFiltersModel.

        has a properly geocoded address  # noqa: E501

        :param has_geolocation: The has_geolocation of this ActivityFiltersModel.  # noqa: E501
        :type: bool
        """

        self._has_geolocation = has_geolocation

    @property
    def has_route_assigned(self):
        """Gets the has_route_assigned of this ActivityFiltersModel.  # noqa: E501

        has a route assigned  # noqa: E501

        :return: The has_route_assigned of this ActivityFiltersModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_route_assigned

    @has_route_assigned.setter
    def has_route_assigned(self, has_route_assigned):
        """Sets the has_route_assigned of this ActivityFiltersModel.

        has a route assigned  # noqa: E501

        :param has_route_assigned: The has_route_assigned of this ActivityFiltersModel.  # noqa: E501
        :type: bool
        """

        self._has_route_assigned = has_route_assigned

    @property
    def search_text(self):
        """Gets the search_text of this ActivityFiltersModel.  # noqa: E501

        free search through text and numeric type columns  # noqa: E501

        :return: The search_text of this ActivityFiltersModel.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this ActivityFiltersModel.

        free search through text and numeric type columns  # noqa: E501

        :param search_text: The search_text of this ActivityFiltersModel.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def route_id(self):
        """Gets the route_id of this ActivityFiltersModel.  # noqa: E501

        Route id  # noqa: E501

        :return: The route_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this ActivityFiltersModel.

        Route id  # noqa: E501

        :param route_id: The route_id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._route_id = route_id

    @property
    def user_id(self):
        """Gets the user_id of this ActivityFiltersModel.  # noqa: E501

        ID of the user who will execute this activity  # noqa: E501

        :return: The user_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActivityFiltersModel.

        ID of the user who will execute this activity  # noqa: E501

        :param user_id: The user_id of this ActivityFiltersModel.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def party_id(self):
        """Gets the party_id of this ActivityFiltersModel.  # noqa: E501

        Party ID  # noqa: E501

        :return: The party_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """Sets the party_id of this ActivityFiltersModel.

        Party ID  # noqa: E501

        :param party_id: The party_id of this ActivityFiltersModel.  # noqa: E501
        :type: int
        """

        self._party_id = party_id

    @property
    def recurrence_id(self):
        """Gets the recurrence_id of this ActivityFiltersModel.  # noqa: E501

        Recurrence ID  # noqa: E501

        :return: The recurrence_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_id

    @recurrence_id.setter
    def recurrence_id(self, recurrence_id):
        """Sets the recurrence_id of this ActivityFiltersModel.

        Recurrence ID  # noqa: E501

        :param recurrence_id: The recurrence_id of this ActivityFiltersModel.  # noqa: E501
        :type: int
        """

        self._recurrence_id = recurrence_id

    @property
    def depot_address_links(self):
        """Gets the depot_address_links of this ActivityFiltersModel.  # noqa: E501

          # noqa: E501

        :return: The depot_address_links of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._depot_address_links

    @depot_address_links.setter
    def depot_address_links(self, depot_address_links):
        """Sets the depot_address_links of this ActivityFiltersModel.

          # noqa: E501

        :param depot_address_links: The depot_address_links of this ActivityFiltersModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._depot_address_links = depot_address_links

    @property
    def tag_names(self):
        """Gets the tag_names of this ActivityFiltersModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this ActivityFiltersModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def zone_names(self):
        """Gets the zone_names of this ActivityFiltersModel.  # noqa: E501

        Zone names  # noqa: E501

        :return: The zone_names of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_names

    @zone_names.setter
    def zone_names(self, zone_names):
        """Sets the zone_names of this ActivityFiltersModel.

        Zone names  # noqa: E501

        :param zone_names: The zone_names of this ActivityFiltersModel.  # noqa: E501
        :type: list[str]
        """

        self._zone_names = zone_names

    @property
    def link(self):
        """Gets the link of this ActivityFiltersModel.  # noqa: E501

        Activity Link ids  # noqa: E501

        :return: The link of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ActivityFiltersModel.

        Activity Link ids  # noqa: E501

        :param link: The link of this ActivityFiltersModel.  # noqa: E501
        :type: list[object]
        """

        self._link = link

    @property
    def links(self):
        """Gets the links of this ActivityFiltersModel.  # noqa: E501

        Activity Link ids  # noqa: E501

        :return: The links of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ActivityFiltersModel.

        Activity Link ids  # noqa: E501

        :param links: The links of this ActivityFiltersModel.  # noqa: E501
        :type: list[object]
        """

        self._links = links

    @property
    def created_at_since(self):
        """Gets the created_at_since of this ActivityFiltersModel.  # noqa: E501

        Filter by activity created at since  # noqa: E501

        :return: The created_at_since of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_since

    @created_at_since.setter
    def created_at_since(self, created_at_since):
        """Sets the created_at_since of this ActivityFiltersModel.

        Filter by activity created at since  # noqa: E501

        :param created_at_since: The created_at_since of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._created_at_since = created_at_since

    @property
    def created_at_till(self):
        """Gets the created_at_till of this ActivityFiltersModel.  # noqa: E501

        Filter by activity created at till  # noqa: E501

        :return: The created_at_till of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_till

    @created_at_till.setter
    def created_at_till(self, created_at_till):
        """Sets the created_at_till of this ActivityFiltersModel.

        Filter by activity created at till  # noqa: E501

        :param created_at_till: The created_at_till of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._created_at_till = created_at_till

    @property
    def time_slots_created_at_since(self):
        """Gets the time_slots_created_at_since of this ActivityFiltersModel.  # noqa: E501

        Filter by time_slots created at since  # noqa: E501

        :return: The time_slots_created_at_since of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._time_slots_created_at_since

    @time_slots_created_at_since.setter
    def time_slots_created_at_since(self, time_slots_created_at_since):
        """Sets the time_slots_created_at_since of this ActivityFiltersModel.

        Filter by time_slots created at since  # noqa: E501

        :param time_slots_created_at_since: The time_slots_created_at_since of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._time_slots_created_at_since = time_slots_created_at_since

    @property
    def time_slots_created_at_till(self):
        """Gets the time_slots_created_at_till of this ActivityFiltersModel.  # noqa: E501

        Filter by time_slots created at till  # noqa: E501

        :return: The time_slots_created_at_till of this ActivityFiltersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._time_slots_created_at_till

    @time_slots_created_at_till.setter
    def time_slots_created_at_till(self, time_slots_created_at_till):
        """Sets the time_slots_created_at_till of this ActivityFiltersModel.

        Filter by time_slots created at till  # noqa: E501

        :param time_slots_created_at_till: The time_slots_created_at_till of this ActivityFiltersModel.  # noqa: E501
        :type: datetime
        """

        self._time_slots_created_at_till = time_slots_created_at_till

    @property
    def depot_address_id(self):
        """Gets the depot_address_id of this ActivityFiltersModel.  # noqa: E501

        Depot address ID(s)  # noqa: E501

        :return: The depot_address_id of this ActivityFiltersModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._depot_address_id

    @depot_address_id.setter
    def depot_address_id(self, depot_address_id):
        """Sets the depot_address_id of this ActivityFiltersModel.

        Depot address ID(s)  # noqa: E501

        :param depot_address_id: The depot_address_id of this ActivityFiltersModel.  # noqa: E501
        :type: list[int]
        """

        self._depot_address_id = depot_address_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityFiltersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityFiltersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivityFiltersModel):
            return True

        return self.to_dict() != other.to_dict()
