# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class NotificationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'object_type': 'int',
        'title': 'str',
        'object_type_name': 'str',
        'object_id': 'int',
        'notification_category_id': 'int',
        'notification_category_name': 'str',
        'updated_by_name': 'str',
        'content': 'str',
        'active': 'bool',
        'notification_created_at': 'datetime',
        'notification_updated_at': 'datetime',
        'notification_created_by': 'int',
        'notification_updated_by': 'int',
        'users': 'list[UserNotificationModel]',
        'role_names': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'object_type': 'object_type',
        'title': 'title',
        'object_type_name': 'object_type_name',
        'object_id': 'object_id',
        'notification_category_id': 'notification_category_id',
        'notification_category_name': 'notification_category_name',
        'updated_by_name': 'updated_by_name',
        'content': 'content',
        'active': 'active',
        'notification_created_at': 'notification_created_at',
        'notification_updated_at': 'notification_updated_at',
        'notification_created_by': 'notification_created_by',
        'notification_updated_by': 'notification_updated_by',
        'users': 'users',
        'role_names': 'role_names'
    }

    def __init__(self, id=None, object_type=None, title=None, object_type_name=None, object_id=None, notification_category_id=None, notification_category_name=None, updated_by_name=None, content=None, active=None, notification_created_at=None, notification_updated_at=None, notification_created_by=None, notification_updated_by=None, users=None, role_names=None, _configuration=None):  # noqa: E501
        """NotificationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._object_type = None
        self._title = None
        self._object_type_name = None
        self._object_id = None
        self._notification_category_id = None
        self._notification_category_name = None
        self._updated_by_name = None
        self._content = None
        self._active = None
        self._notification_created_at = None
        self._notification_updated_at = None
        self._notification_created_by = None
        self._notification_updated_by = None
        self._users = None
        self._role_names = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if object_type is not None:
            self.object_type = object_type
        if title is not None:
            self.title = title
        if object_type_name is not None:
            self.object_type_name = object_type_name
        if object_id is not None:
            self.object_id = object_id
        if notification_category_id is not None:
            self.notification_category_id = notification_category_id
        if notification_category_name is not None:
            self.notification_category_name = notification_category_name
        if updated_by_name is not None:
            self.updated_by_name = updated_by_name
        if content is not None:
            self.content = content
        if active is not None:
            self.active = active
        if notification_created_at is not None:
            self.notification_created_at = notification_created_at
        if notification_updated_at is not None:
            self.notification_updated_at = notification_updated_at
        if notification_created_by is not None:
            self.notification_created_by = notification_created_by
        if notification_updated_by is not None:
            self.notification_updated_by = notification_updated_by
        if users is not None:
            self.users = users
        if role_names is not None:
            self.role_names = role_names

    @property
    def id(self):
        """Gets the id of this NotificationModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this NotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this NotificationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def object_type(self):
        """Gets the object_type of this NotificationModel.  # noqa: E501

        Object type ID  # noqa: E501

        :return: The object_type of this NotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this NotificationModel.

        Object type ID  # noqa: E501

        :param object_type: The object_type of this NotificationModel.  # noqa: E501
        :type: int
        """

        self._object_type = object_type

    @property
    def title(self):
        """Gets the title of this NotificationModel.  # noqa: E501

        Notification title  # noqa: E501

        :return: The title of this NotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NotificationModel.

        Notification title  # noqa: E501

        :param title: The title of this NotificationModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def object_type_name(self):
        """Gets the object_type_name of this NotificationModel.  # noqa: E501

        Object type name  # noqa: E501

        :return: The object_type_name of this NotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this NotificationModel.

        Object type name  # noqa: E501

        :param object_type_name: The object_type_name of this NotificationModel.  # noqa: E501
        :type: str
        """

        self._object_type_name = object_type_name

    @property
    def object_id(self):
        """Gets the object_id of this NotificationModel.  # noqa: E501

        Object ID  # noqa: E501

        :return: The object_id of this NotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this NotificationModel.

        Object ID  # noqa: E501

        :param object_id: The object_id of this NotificationModel.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def notification_category_id(self):
        """Gets the notification_category_id of this NotificationModel.  # noqa: E501

        Notification category id  # noqa: E501

        :return: The notification_category_id of this NotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._notification_category_id

    @notification_category_id.setter
    def notification_category_id(self, notification_category_id):
        """Sets the notification_category_id of this NotificationModel.

        Notification category id  # noqa: E501

        :param notification_category_id: The notification_category_id of this NotificationModel.  # noqa: E501
        :type: int
        """

        self._notification_category_id = notification_category_id

    @property
    def notification_category_name(self):
        """Gets the notification_category_name of this NotificationModel.  # noqa: E501

        Notification category name  # noqa: E501

        :return: The notification_category_name of this NotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._notification_category_name

    @notification_category_name.setter
    def notification_category_name(self, notification_category_name):
        """Sets the notification_category_name of this NotificationModel.

        Notification category name  # noqa: E501

        :param notification_category_name: The notification_category_name of this NotificationModel.  # noqa: E501
        :type: str
        """

        self._notification_category_name = notification_category_name

    @property
    def updated_by_name(self):
        """Gets the updated_by_name of this NotificationModel.  # noqa: E501

        Notification updated by user full name  # noqa: E501

        :return: The updated_by_name of this NotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_name

    @updated_by_name.setter
    def updated_by_name(self, updated_by_name):
        """Sets the updated_by_name of this NotificationModel.

        Notification updated by user full name  # noqa: E501

        :param updated_by_name: The updated_by_name of this NotificationModel.  # noqa: E501
        :type: str
        """

        self._updated_by_name = updated_by_name

    @property
    def content(self):
        """Gets the content of this NotificationModel.  # noqa: E501

        Notification content  # noqa: E501

        :return: The content of this NotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NotificationModel.

        Notification content  # noqa: E501

        :param content: The content of this NotificationModel.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def active(self):
        """Gets the active of this NotificationModel.  # noqa: E501

        if active=0: note has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this NotificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this NotificationModel.

        if active=0: note has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this NotificationModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def notification_created_at(self):
        """Gets the notification_created_at of this NotificationModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The notification_created_at of this NotificationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._notification_created_at

    @notification_created_at.setter
    def notification_created_at(self, notification_created_at):
        """Sets the notification_created_at of this NotificationModel.

        created_at date time  # noqa: E501

        :param notification_created_at: The notification_created_at of this NotificationModel.  # noqa: E501
        :type: datetime
        """

        self._notification_created_at = notification_created_at

    @property
    def notification_updated_at(self):
        """Gets the notification_updated_at of this NotificationModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The notification_updated_at of this NotificationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._notification_updated_at

    @notification_updated_at.setter
    def notification_updated_at(self, notification_updated_at):
        """Sets the notification_updated_at of this NotificationModel.

        updated_at date time  # noqa: E501

        :param notification_updated_at: The notification_updated_at of this NotificationModel.  # noqa: E501
        :type: datetime
        """

        self._notification_updated_at = notification_updated_at

    @property
    def notification_created_by(self):
        """Gets the notification_created_by of this NotificationModel.  # noqa: E501

        created_by user id  # noqa: E501

        :return: The notification_created_by of this NotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._notification_created_by

    @notification_created_by.setter
    def notification_created_by(self, notification_created_by):
        """Sets the notification_created_by of this NotificationModel.

        created_by user id  # noqa: E501

        :param notification_created_by: The notification_created_by of this NotificationModel.  # noqa: E501
        :type: int
        """

        self._notification_created_by = notification_created_by

    @property
    def notification_updated_by(self):
        """Gets the notification_updated_by of this NotificationModel.  # noqa: E501

        updated_by user id  # noqa: E501

        :return: The notification_updated_by of this NotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._notification_updated_by

    @notification_updated_by.setter
    def notification_updated_by(self, notification_updated_by):
        """Sets the notification_updated_by of this NotificationModel.

        updated_by user id  # noqa: E501

        :param notification_updated_by: The notification_updated_by of this NotificationModel.  # noqa: E501
        :type: int
        """

        self._notification_updated_by = notification_updated_by

    @property
    def users(self):
        """Gets the users of this NotificationModel.  # noqa: E501

          # noqa: E501

        :return: The users of this NotificationModel.  # noqa: E501
        :rtype: list[UserNotificationModel]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this NotificationModel.

          # noqa: E501

        :param users: The users of this NotificationModel.  # noqa: E501
        :type: list[UserNotificationModel]
        """

        self._users = users

    @property
    def role_names(self):
        """Gets the role_names of this NotificationModel.  # noqa: E501

        Roles to enable notification for, works only on create, ignored on update  # noqa: E501

        :return: The role_names of this NotificationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_names

    @role_names.setter
    def role_names(self, role_names):
        """Sets the role_names of this NotificationModel.

        Roles to enable notification for, works only on create, ignored on update  # noqa: E501

        :param role_names: The role_names of this NotificationModel.  # noqa: E501
        :type: list[str]
        """

        self._role_names = role_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationModel):
            return True

        return self.to_dict() != other.to_dict()
