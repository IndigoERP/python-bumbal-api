# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class VehicleTypeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'max_speed': 'int',
        'speed_factor': 'float',
        'duration_factor': 'float',
        'cost_per_meter': 'float',
        'cost_per_route': 'float',
        'cost_per_driving_minute': 'float',
        'cost_per_waiting_minute': 'float',
        'cost_per_service_minute': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'max_speed': 'max_speed',
        'speed_factor': 'speed_factor',
        'duration_factor': 'duration_factor',
        'cost_per_meter': 'cost_per_meter',
        'cost_per_route': 'cost_per_route',
        'cost_per_driving_minute': 'cost_per_driving_minute',
        'cost_per_waiting_minute': 'cost_per_waiting_minute',
        'cost_per_service_minute': 'cost_per_service_minute',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, max_speed=None, speed_factor=None, duration_factor=None, cost_per_meter=None, cost_per_route=None, cost_per_driving_minute=None, cost_per_waiting_minute=None, cost_per_service_minute=None, created_at=None, updated_at=None, _configuration=None):  # noqa: E501
        """VehicleTypeModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._max_speed = None
        self._speed_factor = None
        self._duration_factor = None
        self._cost_per_meter = None
        self._cost_per_route = None
        self._cost_per_driving_minute = None
        self._cost_per_waiting_minute = None
        self._cost_per_service_minute = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if max_speed is not None:
            self.max_speed = max_speed
        if speed_factor is not None:
            self.speed_factor = speed_factor
        if duration_factor is not None:
            self.duration_factor = duration_factor
        if cost_per_meter is not None:
            self.cost_per_meter = cost_per_meter
        if cost_per_route is not None:
            self.cost_per_route = cost_per_route
        if cost_per_driving_minute is not None:
            self.cost_per_driving_minute = cost_per_driving_minute
        if cost_per_waiting_minute is not None:
            self.cost_per_waiting_minute = cost_per_waiting_minute
        if cost_per_service_minute is not None:
            self.cost_per_service_minute = cost_per_service_minute
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this VehicleTypeModel.  # noqa: E501

        Unique ID  # noqa: E501

        :return: The id of this VehicleTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleTypeModel.

        Unique ID  # noqa: E501

        :param id: The id of this VehicleTypeModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VehicleTypeModel.  # noqa: E501

        The name of the VehicleType  # noqa: E501

        :return: The name of this VehicleTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VehicleTypeModel.

        The name of the VehicleType  # noqa: E501

        :param name: The name of this VehicleTypeModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def max_speed(self):
        """Gets the max_speed of this VehicleTypeModel.  # noqa: E501

        Max Speed in km/h, Bikes (id 4) ignore max_speed  # noqa: E501

        :return: The max_speed of this VehicleTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this VehicleTypeModel.

        Max Speed in km/h, Bikes (id 4) ignore max_speed  # noqa: E501

        :param max_speed: The max_speed of this VehicleTypeModel.  # noqa: E501
        :type: int
        """

        self._max_speed = max_speed

    @property
    def speed_factor(self):
        """Gets the speed_factor of this VehicleTypeModel.  # noqa: E501

        Speed Factor  # noqa: E501

        :return: The speed_factor of this VehicleTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._speed_factor

    @speed_factor.setter
    def speed_factor(self, speed_factor):
        """Sets the speed_factor of this VehicleTypeModel.

        Speed Factor  # noqa: E501

        :param speed_factor: The speed_factor of this VehicleTypeModel.  # noqa: E501
        :type: float
        """

        self._speed_factor = speed_factor

    @property
    def duration_factor(self):
        """Gets the duration_factor of this VehicleTypeModel.  # noqa: E501

        Duration Factor  # noqa: E501

        :return: The duration_factor of this VehicleTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._duration_factor

    @duration_factor.setter
    def duration_factor(self, duration_factor):
        """Sets the duration_factor of this VehicleTypeModel.

        Duration Factor  # noqa: E501

        :param duration_factor: The duration_factor of this VehicleTypeModel.  # noqa: E501
        :type: float
        """

        self._duration_factor = duration_factor

    @property
    def cost_per_meter(self):
        """Gets the cost_per_meter of this VehicleTypeModel.  # noqa: E501

        Cost per meter  # noqa: E501

        :return: The cost_per_meter of this VehicleTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_meter

    @cost_per_meter.setter
    def cost_per_meter(self, cost_per_meter):
        """Sets the cost_per_meter of this VehicleTypeModel.

        Cost per meter  # noqa: E501

        :param cost_per_meter: The cost_per_meter of this VehicleTypeModel.  # noqa: E501
        :type: float
        """

        self._cost_per_meter = cost_per_meter

    @property
    def cost_per_route(self):
        """Gets the cost_per_route of this VehicleTypeModel.  # noqa: E501

        Cost per route  # noqa: E501

        :return: The cost_per_route of this VehicleTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_route

    @cost_per_route.setter
    def cost_per_route(self, cost_per_route):
        """Sets the cost_per_route of this VehicleTypeModel.

        Cost per route  # noqa: E501

        :param cost_per_route: The cost_per_route of this VehicleTypeModel.  # noqa: E501
        :type: float
        """

        self._cost_per_route = cost_per_route

    @property
    def cost_per_driving_minute(self):
        """Gets the cost_per_driving_minute of this VehicleTypeModel.  # noqa: E501

        Cost per driving minute  # noqa: E501

        :return: The cost_per_driving_minute of this VehicleTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_driving_minute

    @cost_per_driving_minute.setter
    def cost_per_driving_minute(self, cost_per_driving_minute):
        """Sets the cost_per_driving_minute of this VehicleTypeModel.

        Cost per driving minute  # noqa: E501

        :param cost_per_driving_minute: The cost_per_driving_minute of this VehicleTypeModel.  # noqa: E501
        :type: float
        """

        self._cost_per_driving_minute = cost_per_driving_minute

    @property
    def cost_per_waiting_minute(self):
        """Gets the cost_per_waiting_minute of this VehicleTypeModel.  # noqa: E501

        Cost per waiting minute  # noqa: E501

        :return: The cost_per_waiting_minute of this VehicleTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_waiting_minute

    @cost_per_waiting_minute.setter
    def cost_per_waiting_minute(self, cost_per_waiting_minute):
        """Sets the cost_per_waiting_minute of this VehicleTypeModel.

        Cost per waiting minute  # noqa: E501

        :param cost_per_waiting_minute: The cost_per_waiting_minute of this VehicleTypeModel.  # noqa: E501
        :type: float
        """

        self._cost_per_waiting_minute = cost_per_waiting_minute

    @property
    def cost_per_service_minute(self):
        """Gets the cost_per_service_minute of this VehicleTypeModel.  # noqa: E501

        Cost per service minute  # noqa: E501

        :return: The cost_per_service_minute of this VehicleTypeModel.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_service_minute

    @cost_per_service_minute.setter
    def cost_per_service_minute(self, cost_per_service_minute):
        """Sets the cost_per_service_minute of this VehicleTypeModel.

        Cost per service minute  # noqa: E501

        :param cost_per_service_minute: The cost_per_service_minute of this VehicleTypeModel.  # noqa: E501
        :type: float
        """

        self._cost_per_service_minute = cost_per_service_minute

    @property
    def created_at(self):
        """Gets the created_at of this VehicleTypeModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The created_at of this VehicleTypeModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VehicleTypeModel.

        created_at date time  # noqa: E501

        :param created_at: The created_at of this VehicleTypeModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VehicleTypeModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The updated_at of this VehicleTypeModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VehicleTypeModel.

        updated_at date time  # noqa: E501

        :param updated_at: The updated_at of this VehicleTypeModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleTypeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleTypeModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleTypeModel):
            return True

        return self.to_dict() != other.to_dict()
