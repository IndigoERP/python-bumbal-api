# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class CheckAvailabilityDataModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity': 'ActivityModel',
        'route_filters': 'object',
        'token': 'str'
    }

    attribute_map = {
        'activity': 'activity',
        'route_filters': 'route_filters',
        'token': 'token'
    }

    def __init__(self, activity=None, route_filters=None, token=None, _configuration=None):  # noqa: E501
        """CheckAvailabilityDataModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._activity = None
        self._route_filters = None
        self._token = None
        self.discriminator = None

        self.activity = activity
        if route_filters is not None:
            self.route_filters = route_filters
        if token is not None:
            self.token = token

    @property
    def activity(self):
        """Gets the activity of this CheckAvailabilityDataModel.  # noqa: E501

          # noqa: E501

        :return: The activity of this CheckAvailabilityDataModel.  # noqa: E501
        :rtype: ActivityModel
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this CheckAvailabilityDataModel.

          # noqa: E501

        :param activity: The activity of this CheckAvailabilityDataModel.  # noqa: E501
        :type: ActivityModel
        """
        if self._configuration.client_side_validation and activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    @property
    def route_filters(self):
        """Gets the route_filters of this CheckAvailabilityDataModel.  # noqa: E501

          # noqa: E501

        :return: The route_filters of this CheckAvailabilityDataModel.  # noqa: E501
        :rtype: object
        """
        return self._route_filters

    @route_filters.setter
    def route_filters(self, route_filters):
        """Sets the route_filters of this CheckAvailabilityDataModel.

          # noqa: E501

        :param route_filters: The route_filters of this CheckAvailabilityDataModel.  # noqa: E501
        :type: object
        """

        self._route_filters = route_filters

    @property
    def token(self):
        """Gets the token of this CheckAvailabilityDataModel.  # noqa: E501

        unique per api request  # noqa: E501

        :return: The token of this CheckAvailabilityDataModel.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CheckAvailabilityDataModel.

        unique per api request  # noqa: E501

        :param token: The token of this CheckAvailabilityDataModel.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckAvailabilityDataModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckAvailabilityDataModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckAvailabilityDataModel):
            return True

        return self.to_dict() != other.to_dict()
