# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class CheckAvailabilityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'status': 'str',
        'available_timewindows': 'list[AvailabilityTimeSlotModel]',
        'unavailable_timewindows': 'list[AvailabilityTimeSlotModel]',
        'latest_analyzed_date': 'date'
    }

    attribute_map = {
        'token': 'token',
        'status': 'status',
        'available_timewindows': 'available_timewindows',
        'unavailable_timewindows': 'unavailable_timewindows',
        'latest_analyzed_date': 'latest_analyzed_date'
    }

    def __init__(self, token=None, status=None, available_timewindows=None, unavailable_timewindows=None, latest_analyzed_date=None, _configuration=None):  # noqa: E501
        """CheckAvailabilityResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token = None
        self._status = None
        self._available_timewindows = None
        self._unavailable_timewindows = None
        self._latest_analyzed_date = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if status is not None:
            self.status = status
        if available_timewindows is not None:
            self.available_timewindows = available_timewindows
        if unavailable_timewindows is not None:
            self.unavailable_timewindows = unavailable_timewindows
        if latest_analyzed_date is not None:
            self.latest_analyzed_date = latest_analyzed_date

    @property
    def token(self):
        """Gets the token of this CheckAvailabilityResponse.  # noqa: E501

        token for the check availability job  # noqa: E501

        :return: The token of this CheckAvailabilityResponse.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CheckAvailabilityResponse.

        token for the check availability job  # noqa: E501

        :param token: The token of this CheckAvailabilityResponse.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def status(self):
        """Gets the status of this CheckAvailabilityResponse.  # noqa: E501

        current status for request  # noqa: E501

        :return: The status of this CheckAvailabilityResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckAvailabilityResponse.

        current status for request  # noqa: E501

        :param status: The status of this CheckAvailabilityResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["not_ready", "done", "cancelled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def available_timewindows(self):
        """Gets the available_timewindows of this CheckAvailabilityResponse.  # noqa: E501

          # noqa: E501

        :return: The available_timewindows of this CheckAvailabilityResponse.  # noqa: E501
        :rtype: list[AvailabilityTimeSlotModel]
        """
        return self._available_timewindows

    @available_timewindows.setter
    def available_timewindows(self, available_timewindows):
        """Sets the available_timewindows of this CheckAvailabilityResponse.

          # noqa: E501

        :param available_timewindows: The available_timewindows of this CheckAvailabilityResponse.  # noqa: E501
        :type: list[AvailabilityTimeSlotModel]
        """

        self._available_timewindows = available_timewindows

    @property
    def unavailable_timewindows(self):
        """Gets the unavailable_timewindows of this CheckAvailabilityResponse.  # noqa: E501

          # noqa: E501

        :return: The unavailable_timewindows of this CheckAvailabilityResponse.  # noqa: E501
        :rtype: list[AvailabilityTimeSlotModel]
        """
        return self._unavailable_timewindows

    @unavailable_timewindows.setter
    def unavailable_timewindows(self, unavailable_timewindows):
        """Sets the unavailable_timewindows of this CheckAvailabilityResponse.

          # noqa: E501

        :param unavailable_timewindows: The unavailable_timewindows of this CheckAvailabilityResponse.  # noqa: E501
        :type: list[AvailabilityTimeSlotModel]
        """

        self._unavailable_timewindows = unavailable_timewindows

    @property
    def latest_analyzed_date(self):
        """Gets the latest_analyzed_date of this CheckAvailabilityResponse.  # noqa: E501

          # noqa: E501

        :return: The latest_analyzed_date of this CheckAvailabilityResponse.  # noqa: E501
        :rtype: date
        """
        return self._latest_analyzed_date

    @latest_analyzed_date.setter
    def latest_analyzed_date(self, latest_analyzed_date):
        """Sets the latest_analyzed_date of this CheckAvailabilityResponse.

          # noqa: E501

        :param latest_analyzed_date: The latest_analyzed_date of this CheckAvailabilityResponse.  # noqa: E501
        :type: date
        """

        self._latest_analyzed_date = latest_analyzed_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckAvailabilityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckAvailabilityResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckAvailabilityResponse):
            return True

        return self.to_dict() != other.to_dict()
