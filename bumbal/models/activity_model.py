# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ActivityModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'uuid': 'str',
        'bundle_activity_id': 'int',
        'shipment_activity_id': 'int',
        'shipment_activity_nr': 'str',
        'bundle_shipment_activity_nr': 'str',
        'nr': 'str',
        'activity_type_name': 'str',
        'activity_type_id': 'int',
        'status_id': 'int',
        'status_name': 'str',
        'assignment_id': 'int',
        'assignment_nr': 'str',
        'assignment': 'AssignmentModel',
        'assignment_sequence_nr': 'int',
        'remarks': 'str',
        'locked': 'int',
        'optimized': 'bool',
        'priority': 'int',
        'top_priority': 'bool',
        'sequence_nr': 'int',
        'planned_driving_time': 'int',
        'planned_driving_duration': 'int',
        'planned_driving_distance': 'int',
        'reference': 'str',
        'description': 'str',
        'earliest_delivery_date_time': 'date',
        'latest_delivery_date_time': 'date',
        'earliest_delivery_date': 'date',
        'latest_delivery_date': 'date',
        'date_time_from': 'datetime',
        'date_time_to': 'datetime',
        'planned_date_time_from': 'datetime',
        'planned_date_time_to': 'datetime',
        'executed_date_time_from': 'datetime',
        'executed_date_time_to': 'datetime',
        'duration': 'int',
        'depot_duration': 'int',
        'active': 'bool',
        'route_id': 'str',
        'route_nr': 'str',
        'route_name': 'str',
        'route_date_time_from': 'datetime',
        'route_date_time_to': 'datetime',
        'route_earliest_date_time': 'datetime',
        'route_latest_date_time': 'datetime',
        'route_status_id': 'int',
        'route_status_name': 'str',
        'route_nr_of_stops': 'int',
        'route_overdue': 'bool',
        'co_driver_ids': 'list[int]',
        'co_drivers': 'list[UsersModel]',
        'user_id': 'int',
        'driver_id': 'int',
        'driver_first_name': 'str',
        'driver_last_name': 'str',
        'driver_name_prefix': 'str',
        'driver_full_name': 'str',
        'addressapplied_id': 'int',
        'address_id': 'int',
        'address': 'AddressModel',
        'address_applied': 'AddressAppliedModel',
        'depot_address': 'AddressModel',
        'depot_address_id': 'int',
        'depot_activity': 'list[ActivityModel]',
        'allowed_driver_ids': 'list[int]',
        'allowed_drivers': 'list[AllowedDriverModel]',
        'allowed_drivers_links': 'list[LinkModel]',
        'applied_capacities': 'ActivityModelAppliedCapacities',
        'capacities': 'list[CapacityModel]',
        'package_lines': 'list[PackageLineModel]',
        'payments': 'list[PaymentModel]',
        'time_slots': 'list[TimeSlotModel]',
        'brand_id': 'int',
        'brand_name': 'str',
        'brand': 'BrandModel',
        'communication': 'CommunicationModel',
        'assignment_link': 'LinkModel',
        'route_link': 'LinkModel',
        'route': 'RouteModel',
        'driver': 'DriverModel',
        'driver_links': 'list[LinkModel]',
        'car': 'VehicleModel',
        'vehicle': 'VehicleModel',
        'trailer': 'TrailerModel',
        'activity_id_before': 'str',
        'activity_id_after': 'str',
        'bundled_activity_ids': 'list[int]',
        'tags': 'list[TagModel]',
        'recurrence': 'RecurrenceModel',
        'tag_names': 'list[str]',
        'tag_ids': 'list[int]',
        'zones': 'list[ZoneModel]',
        'zone_names': 'list[str]',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]',
        'stats': 'ActivityStatsModel',
        'notes': 'list[NoteModel]',
        'files': 'list[FileModel]',
        'activity_created_at': 'datetime',
        'activity_updated_at': 'datetime',
        'activity_created_by': 'int',
        'activity_updated_by': 'int',
        'activity_created_by_user': 'UsersModel',
        'activity_updated_by_user': 'UsersModel',
        'activity_active': 'bool',
        'activity_removed': 'bool',
        'payment_total': 'int',
        'transaction_total': 'int',
        'due_total': 'int',
        'transactions': 'list[TransactionModel]'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'bundle_activity_id': 'bundle_activity_id',
        'shipment_activity_id': 'shipment_activity_id',
        'shipment_activity_nr': 'shipment_activity_nr',
        'bundle_shipment_activity_nr': 'bundle_shipment_activity_nr',
        'nr': 'nr',
        'activity_type_name': 'activity_type_name',
        'activity_type_id': 'activity_type_id',
        'status_id': 'status_id',
        'status_name': 'status_name',
        'assignment_id': 'assignment_id',
        'assignment_nr': 'assignment_nr',
        'assignment': 'assignment',
        'assignment_sequence_nr': 'assignment_sequence_nr',
        'remarks': 'remarks',
        'locked': 'locked',
        'optimized': 'optimized',
        'priority': 'priority',
        'top_priority': 'top_priority',
        'sequence_nr': 'sequence_nr',
        'planned_driving_time': 'planned_driving_time',
        'planned_driving_duration': 'planned_driving_duration',
        'planned_driving_distance': 'planned_driving_distance',
        'reference': 'reference',
        'description': 'description',
        'earliest_delivery_date_time': 'earliest_delivery_date_time',
        'latest_delivery_date_time': 'latest_delivery_date_time',
        'earliest_delivery_date': 'earliest_delivery_date',
        'latest_delivery_date': 'latest_delivery_date',
        'date_time_from': 'date_time_from',
        'date_time_to': 'date_time_to',
        'planned_date_time_from': 'planned_date_time_from',
        'planned_date_time_to': 'planned_date_time_to',
        'executed_date_time_from': 'executed_date_time_from',
        'executed_date_time_to': 'executed_date_time_to',
        'duration': 'duration',
        'depot_duration': 'depot_duration',
        'active': 'active',
        'route_id': 'route_id',
        'route_nr': 'route_nr',
        'route_name': 'route_name',
        'route_date_time_from': 'route_date_time_from',
        'route_date_time_to': 'route_date_time_to',
        'route_earliest_date_time': 'route_earliest_date_time',
        'route_latest_date_time': 'route_latest_date_time',
        'route_status_id': 'route_status_id',
        'route_status_name': 'route_status_name',
        'route_nr_of_stops': 'route_nr_of_stops',
        'route_overdue': 'route_overdue',
        'co_driver_ids': 'co_driver_ids',
        'co_drivers': 'co_drivers',
        'user_id': 'user_id',
        'driver_id': 'driver_id',
        'driver_first_name': 'driver_first_name',
        'driver_last_name': 'driver_last_name',
        'driver_name_prefix': 'driver_name_prefix',
        'driver_full_name': 'driver_full_name',
        'addressapplied_id': 'addressapplied_id',
        'address_id': 'address_id',
        'address': 'address',
        'address_applied': 'address_applied',
        'depot_address': 'depot_address',
        'depot_address_id': 'depot_address_id',
        'depot_activity': 'depot_activity',
        'allowed_driver_ids': 'allowed_driver_ids',
        'allowed_drivers': 'allowed_drivers',
        'allowed_drivers_links': 'allowed_drivers_links',
        'applied_capacities': 'applied_capacities',
        'capacities': 'capacities',
        'package_lines': 'package_lines',
        'payments': 'payments',
        'time_slots': 'time_slots',
        'brand_id': 'brand_id',
        'brand_name': 'brand_name',
        'brand': 'brand',
        'communication': 'communication',
        'assignment_link': 'assignment_link',
        'route_link': 'route_link',
        'route': 'route',
        'driver': 'driver',
        'driver_links': 'driver_links',
        'car': 'car',
        'vehicle': 'vehicle',
        'trailer': 'trailer',
        'activity_id_before': 'activity_id_before',
        'activity_id_after': 'activity_id_after',
        'bundled_activity_ids': 'bundled_activity_ids',
        'tags': 'tags',
        'recurrence': 'recurrence',
        'tag_names': 'tag_names',
        'tag_ids': 'tag_ids',
        'zones': 'zones',
        'zone_names': 'zone_names',
        'links': 'links',
        'meta_data': 'meta_data',
        'stats': 'stats',
        'notes': 'notes',
        'files': 'files',
        'activity_created_at': 'activity_created_at',
        'activity_updated_at': 'activity_updated_at',
        'activity_created_by': 'activity_created_by',
        'activity_updated_by': 'activity_updated_by',
        'activity_created_by_user': 'activity_created_by_user',
        'activity_updated_by_user': 'activity_updated_by_user',
        'activity_active': 'activity_active',
        'activity_removed': 'activity_removed',
        'payment_total': 'payment_total',
        'transaction_total': 'transaction_total',
        'due_total': 'due_total',
        'transactions': 'transactions'
    }

    def __init__(self, id=None, uuid=None, bundle_activity_id=None, shipment_activity_id=None, shipment_activity_nr=None, bundle_shipment_activity_nr=None, nr=None, activity_type_name=None, activity_type_id=None, status_id=None, status_name=None, assignment_id=None, assignment_nr=None, assignment=None, assignment_sequence_nr=None, remarks=None, locked=None, optimized=None, priority=None, top_priority=None, sequence_nr=None, planned_driving_time=None, planned_driving_duration=None, planned_driving_distance=None, reference=None, description=None, earliest_delivery_date_time=None, latest_delivery_date_time=None, earliest_delivery_date=None, latest_delivery_date=None, date_time_from=None, date_time_to=None, planned_date_time_from=None, planned_date_time_to=None, executed_date_time_from=None, executed_date_time_to=None, duration=None, depot_duration=None, active=None, route_id=None, route_nr=None, route_name=None, route_date_time_from=None, route_date_time_to=None, route_earliest_date_time=None, route_latest_date_time=None, route_status_id=None, route_status_name=None, route_nr_of_stops=None, route_overdue=None, co_driver_ids=None, co_drivers=None, user_id=None, driver_id=None, driver_first_name=None, driver_last_name=None, driver_name_prefix=None, driver_full_name=None, addressapplied_id=None, address_id=None, address=None, address_applied=None, depot_address=None, depot_address_id=None, depot_activity=None, allowed_driver_ids=None, allowed_drivers=None, allowed_drivers_links=None, applied_capacities=None, capacities=None, package_lines=None, payments=None, time_slots=None, brand_id=None, brand_name=None, brand=None, communication=None, assignment_link=None, route_link=None, route=None, driver=None, driver_links=None, car=None, vehicle=None, trailer=None, activity_id_before=None, activity_id_after=None, bundled_activity_ids=None, tags=None, recurrence=None, tag_names=None, tag_ids=None, zones=None, zone_names=None, links=None, meta_data=None, stats=None, notes=None, files=None, activity_created_at=None, activity_updated_at=None, activity_created_by=None, activity_updated_by=None, activity_created_by_user=None, activity_updated_by_user=None, activity_active=None, activity_removed=None, payment_total=None, transaction_total=None, due_total=None, transactions=None, _configuration=None):  # noqa: E501
        """ActivityModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._uuid = None
        self._bundle_activity_id = None
        self._shipment_activity_id = None
        self._shipment_activity_nr = None
        self._bundle_shipment_activity_nr = None
        self._nr = None
        self._activity_type_name = None
        self._activity_type_id = None
        self._status_id = None
        self._status_name = None
        self._assignment_id = None
        self._assignment_nr = None
        self._assignment = None
        self._assignment_sequence_nr = None
        self._remarks = None
        self._locked = None
        self._optimized = None
        self._priority = None
        self._top_priority = None
        self._sequence_nr = None
        self._planned_driving_time = None
        self._planned_driving_duration = None
        self._planned_driving_distance = None
        self._reference = None
        self._description = None
        self._earliest_delivery_date_time = None
        self._latest_delivery_date_time = None
        self._earliest_delivery_date = None
        self._latest_delivery_date = None
        self._date_time_from = None
        self._date_time_to = None
        self._planned_date_time_from = None
        self._planned_date_time_to = None
        self._executed_date_time_from = None
        self._executed_date_time_to = None
        self._duration = None
        self._depot_duration = None
        self._active = None
        self._route_id = None
        self._route_nr = None
        self._route_name = None
        self._route_date_time_from = None
        self._route_date_time_to = None
        self._route_earliest_date_time = None
        self._route_latest_date_time = None
        self._route_status_id = None
        self._route_status_name = None
        self._route_nr_of_stops = None
        self._route_overdue = None
        self._co_driver_ids = None
        self._co_drivers = None
        self._user_id = None
        self._driver_id = None
        self._driver_first_name = None
        self._driver_last_name = None
        self._driver_name_prefix = None
        self._driver_full_name = None
        self._addressapplied_id = None
        self._address_id = None
        self._address = None
        self._address_applied = None
        self._depot_address = None
        self._depot_address_id = None
        self._depot_activity = None
        self._allowed_driver_ids = None
        self._allowed_drivers = None
        self._allowed_drivers_links = None
        self._applied_capacities = None
        self._capacities = None
        self._package_lines = None
        self._payments = None
        self._time_slots = None
        self._brand_id = None
        self._brand_name = None
        self._brand = None
        self._communication = None
        self._assignment_link = None
        self._route_link = None
        self._route = None
        self._driver = None
        self._driver_links = None
        self._car = None
        self._vehicle = None
        self._trailer = None
        self._activity_id_before = None
        self._activity_id_after = None
        self._bundled_activity_ids = None
        self._tags = None
        self._recurrence = None
        self._tag_names = None
        self._tag_ids = None
        self._zones = None
        self._zone_names = None
        self._links = None
        self._meta_data = None
        self._stats = None
        self._notes = None
        self._files = None
        self._activity_created_at = None
        self._activity_updated_at = None
        self._activity_created_by = None
        self._activity_updated_by = None
        self._activity_created_by_user = None
        self._activity_updated_by_user = None
        self._activity_active = None
        self._activity_removed = None
        self._payment_total = None
        self._transaction_total = None
        self._due_total = None
        self._transactions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if bundle_activity_id is not None:
            self.bundle_activity_id = bundle_activity_id
        if shipment_activity_id is not None:
            self.shipment_activity_id = shipment_activity_id
        if shipment_activity_nr is not None:
            self.shipment_activity_nr = shipment_activity_nr
        if bundle_shipment_activity_nr is not None:
            self.bundle_shipment_activity_nr = bundle_shipment_activity_nr
        if nr is not None:
            self.nr = nr
        if activity_type_name is not None:
            self.activity_type_name = activity_type_name
        if activity_type_id is not None:
            self.activity_type_id = activity_type_id
        if status_id is not None:
            self.status_id = status_id
        if status_name is not None:
            self.status_name = status_name
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if assignment_nr is not None:
            self.assignment_nr = assignment_nr
        if assignment is not None:
            self.assignment = assignment
        if assignment_sequence_nr is not None:
            self.assignment_sequence_nr = assignment_sequence_nr
        if remarks is not None:
            self.remarks = remarks
        if locked is not None:
            self.locked = locked
        if optimized is not None:
            self.optimized = optimized
        if priority is not None:
            self.priority = priority
        if top_priority is not None:
            self.top_priority = top_priority
        if sequence_nr is not None:
            self.sequence_nr = sequence_nr
        if planned_driving_time is not None:
            self.planned_driving_time = planned_driving_time
        if planned_driving_duration is not None:
            self.planned_driving_duration = planned_driving_duration
        if planned_driving_distance is not None:
            self.planned_driving_distance = planned_driving_distance
        if reference is not None:
            self.reference = reference
        if description is not None:
            self.description = description
        if earliest_delivery_date_time is not None:
            self.earliest_delivery_date_time = earliest_delivery_date_time
        if latest_delivery_date_time is not None:
            self.latest_delivery_date_time = latest_delivery_date_time
        if earliest_delivery_date is not None:
            self.earliest_delivery_date = earliest_delivery_date
        if latest_delivery_date is not None:
            self.latest_delivery_date = latest_delivery_date
        if date_time_from is not None:
            self.date_time_from = date_time_from
        if date_time_to is not None:
            self.date_time_to = date_time_to
        if planned_date_time_from is not None:
            self.planned_date_time_from = planned_date_time_from
        if planned_date_time_to is not None:
            self.planned_date_time_to = planned_date_time_to
        if executed_date_time_from is not None:
            self.executed_date_time_from = executed_date_time_from
        if executed_date_time_to is not None:
            self.executed_date_time_to = executed_date_time_to
        if duration is not None:
            self.duration = duration
        if depot_duration is not None:
            self.depot_duration = depot_duration
        if active is not None:
            self.active = active
        if route_id is not None:
            self.route_id = route_id
        if route_nr is not None:
            self.route_nr = route_nr
        if route_name is not None:
            self.route_name = route_name
        if route_date_time_from is not None:
            self.route_date_time_from = route_date_time_from
        if route_date_time_to is not None:
            self.route_date_time_to = route_date_time_to
        if route_earliest_date_time is not None:
            self.route_earliest_date_time = route_earliest_date_time
        if route_latest_date_time is not None:
            self.route_latest_date_time = route_latest_date_time
        if route_status_id is not None:
            self.route_status_id = route_status_id
        if route_status_name is not None:
            self.route_status_name = route_status_name
        if route_nr_of_stops is not None:
            self.route_nr_of_stops = route_nr_of_stops
        if route_overdue is not None:
            self.route_overdue = route_overdue
        if co_driver_ids is not None:
            self.co_driver_ids = co_driver_ids
        if co_drivers is not None:
            self.co_drivers = co_drivers
        if user_id is not None:
            self.user_id = user_id
        if driver_id is not None:
            self.driver_id = driver_id
        if driver_first_name is not None:
            self.driver_first_name = driver_first_name
        if driver_last_name is not None:
            self.driver_last_name = driver_last_name
        if driver_name_prefix is not None:
            self.driver_name_prefix = driver_name_prefix
        if driver_full_name is not None:
            self.driver_full_name = driver_full_name
        if addressapplied_id is not None:
            self.addressapplied_id = addressapplied_id
        if address_id is not None:
            self.address_id = address_id
        if address is not None:
            self.address = address
        if address_applied is not None:
            self.address_applied = address_applied
        if depot_address is not None:
            self.depot_address = depot_address
        if depot_address_id is not None:
            self.depot_address_id = depot_address_id
        if depot_activity is not None:
            self.depot_activity = depot_activity
        if allowed_driver_ids is not None:
            self.allowed_driver_ids = allowed_driver_ids
        if allowed_drivers is not None:
            self.allowed_drivers = allowed_drivers
        if allowed_drivers_links is not None:
            self.allowed_drivers_links = allowed_drivers_links
        if applied_capacities is not None:
            self.applied_capacities = applied_capacities
        if capacities is not None:
            self.capacities = capacities
        if package_lines is not None:
            self.package_lines = package_lines
        if payments is not None:
            self.payments = payments
        if time_slots is not None:
            self.time_slots = time_slots
        if brand_id is not None:
            self.brand_id = brand_id
        if brand_name is not None:
            self.brand_name = brand_name
        if brand is not None:
            self.brand = brand
        if communication is not None:
            self.communication = communication
        if assignment_link is not None:
            self.assignment_link = assignment_link
        if route_link is not None:
            self.route_link = route_link
        if route is not None:
            self.route = route
        if driver is not None:
            self.driver = driver
        if driver_links is not None:
            self.driver_links = driver_links
        if car is not None:
            self.car = car
        if vehicle is not None:
            self.vehicle = vehicle
        if trailer is not None:
            self.trailer = trailer
        if activity_id_before is not None:
            self.activity_id_before = activity_id_before
        if activity_id_after is not None:
            self.activity_id_after = activity_id_after
        if bundled_activity_ids is not None:
            self.bundled_activity_ids = bundled_activity_ids
        if tags is not None:
            self.tags = tags
        if recurrence is not None:
            self.recurrence = recurrence
        if tag_names is not None:
            self.tag_names = tag_names
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if zones is not None:
            self.zones = zones
        if zone_names is not None:
            self.zone_names = zone_names
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data
        if stats is not None:
            self.stats = stats
        if notes is not None:
            self.notes = notes
        if files is not None:
            self.files = files
        if activity_created_at is not None:
            self.activity_created_at = activity_created_at
        if activity_updated_at is not None:
            self.activity_updated_at = activity_updated_at
        if activity_created_by is not None:
            self.activity_created_by = activity_created_by
        if activity_updated_by is not None:
            self.activity_updated_by = activity_updated_by
        if activity_created_by_user is not None:
            self.activity_created_by_user = activity_created_by_user
        if activity_updated_by_user is not None:
            self.activity_updated_by_user = activity_updated_by_user
        if activity_active is not None:
            self.activity_active = activity_active
        if activity_removed is not None:
            self.activity_removed = activity_removed
        if payment_total is not None:
            self.payment_total = payment_total
        if transaction_total is not None:
            self.transaction_total = transaction_total
        if due_total is not None:
            self.due_total = due_total
        if transactions is not None:
            self.transactions = transactions

    @property
    def id(self):
        """Gets the id of this ActivityModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ActivityModel.  # noqa: E501

        unique per activity  # noqa: E501

        :return: The uuid of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ActivityModel.

        unique per activity  # noqa: E501

        :param uuid: The uuid of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def bundle_activity_id(self):
        """Gets the bundle_activity_id of this ActivityModel.  # noqa: E501

        Unique Identifier for partner shipment activity  # noqa: E501

        :return: The bundle_activity_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._bundle_activity_id

    @bundle_activity_id.setter
    def bundle_activity_id(self, bundle_activity_id):
        """Sets the bundle_activity_id of this ActivityModel.

        Unique Identifier for partner shipment activity  # noqa: E501

        :param bundle_activity_id: The bundle_activity_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._bundle_activity_id = bundle_activity_id

    @property
    def shipment_activity_id(self):
        """Gets the shipment_activity_id of this ActivityModel.  # noqa: E501

        Unique Identifier for partner shipment activity  # noqa: E501

        :return: The shipment_activity_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._shipment_activity_id

    @shipment_activity_id.setter
    def shipment_activity_id(self, shipment_activity_id):
        """Sets the shipment_activity_id of this ActivityModel.

        Unique Identifier for partner shipment activity  # noqa: E501

        :param shipment_activity_id: The shipment_activity_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._shipment_activity_id = shipment_activity_id

    @property
    def shipment_activity_nr(self):
        """Gets the shipment_activity_nr of this ActivityModel.  # noqa: E501

        Number for partner shipment activity  # noqa: E501

        :return: The shipment_activity_nr of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._shipment_activity_nr

    @shipment_activity_nr.setter
    def shipment_activity_nr(self, shipment_activity_nr):
        """Sets the shipment_activity_nr of this ActivityModel.

        Number for partner shipment activity  # noqa: E501

        :param shipment_activity_nr: The shipment_activity_nr of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._shipment_activity_nr = shipment_activity_nr

    @property
    def bundle_shipment_activity_nr(self):
        """Gets the bundle_shipment_activity_nr of this ActivityModel.  # noqa: E501

        Number for partner bundle shipment activity  # noqa: E501

        :return: The bundle_shipment_activity_nr of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._bundle_shipment_activity_nr

    @bundle_shipment_activity_nr.setter
    def bundle_shipment_activity_nr(self, bundle_shipment_activity_nr):
        """Sets the bundle_shipment_activity_nr of this ActivityModel.

        Number for partner bundle shipment activity  # noqa: E501

        :param bundle_shipment_activity_nr: The bundle_shipment_activity_nr of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._bundle_shipment_activity_nr = bundle_shipment_activity_nr

    @property
    def nr(self):
        """Gets the nr of this ActivityModel.  # noqa: E501

        Number of this Activity  # noqa: E501

        :return: The nr of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._nr

    @nr.setter
    def nr(self, nr):
        """Sets the nr of this ActivityModel.

        Number of this Activity  # noqa: E501

        :param nr: The nr of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._nr = nr

    @property
    def activity_type_name(self):
        """Gets the activity_type_name of this ActivityModel.  # noqa: E501

        Activity Type Name. breakdown (:20), bundled (:32), car_end (:6), car_start (:5), car_wash (:27), combi (:29), depot (:28), driver_end (:10), driver_start (:9), dropoff (:2), gas_refill (:14), interior_wash (:30), maintenance (:26), maintenance_planned (:15), maintenance_unplanned (:16), other (:31), pause (:13), pickup (:1), route_end (:4), route_start (:3), sanitary (:21), stop (:11), unplanned_stop (:18), user_other (:17), wait (:19)  # noqa: E501

        :return: The activity_type_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._activity_type_name

    @activity_type_name.setter
    def activity_type_name(self, activity_type_name):
        """Sets the activity_type_name of this ActivityModel.

        Activity Type Name. breakdown (:20), bundled (:32), car_end (:6), car_start (:5), car_wash (:27), combi (:29), depot (:28), driver_end (:10), driver_start (:9), dropoff (:2), gas_refill (:14), interior_wash (:30), maintenance (:26), maintenance_planned (:15), maintenance_unplanned (:16), other (:31), pause (:13), pickup (:1), route_end (:4), route_start (:3), sanitary (:21), stop (:11), unplanned_stop (:18), user_other (:17), wait (:19)  # noqa: E501

        :param activity_type_name: The activity_type_name of this ActivityModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["breakdown", "bundled", "car_end", "car_start", "car_wash", "combi", "depot", "driver_end", "driver_start", "driver_unavailable", "dropoff", "equipment_end", "equipment_start", "gas_refill", "interior_wash", "maintenance", "maintenance_planned", "maintenance_unplanned", "other", "other_end", "other_start", "pause", "pickup", "route_end", "route_start", "sanitary", "stop", "trailer_attach", "trailer_detach", "unplanned_stop", "unsuccessful", "user_other", "wait", "xml_unspecified"]  # noqa: E501
        if (self._configuration.client_side_validation and
                activity_type_name not in allowed_values):
            raise ValueError(
                "Invalid value for `activity_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_type_name, allowed_values)
            )

        self._activity_type_name = activity_type_name

    @property
    def activity_type_id(self):
        """Gets the activity_type_id of this ActivityModel.  # noqa: E501

        Unique Activity type ID. 1 (:pickup), 2 (:dropoff), 3 (:route_start), 4 (:route_end), 5 (:car_start), 6 (:car_end), 9 (:driver_start), 10 (:driver_end), 11 (:stop), 13 (:pause), 14 (:gas_refill), 15 (:maintenance_planned), 16 (:maintenance_unplanned), 17 (:user_other), 18 (:unplanned_stop), 19 (:wait), 20 (:breakdown), 21 (:sanitary), 26 (:maintenance), 27 (:car_wash), 28 (:depot), 29 (:combi), 30 (:interior_wash), 31 (:other), 32 (:bundled)  # noqa: E501

        :return: The activity_type_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._activity_type_id

    @activity_type_id.setter
    def activity_type_id(self, activity_type_id):
        """Sets the activity_type_id of this ActivityModel.

        Unique Activity type ID. 1 (:pickup), 2 (:dropoff), 3 (:route_start), 4 (:route_end), 5 (:car_start), 6 (:car_end), 9 (:driver_start), 10 (:driver_end), 11 (:stop), 13 (:pause), 14 (:gas_refill), 15 (:maintenance_planned), 16 (:maintenance_unplanned), 17 (:user_other), 18 (:unplanned_stop), 19 (:wait), 20 (:breakdown), 21 (:sanitary), 26 (:maintenance), 27 (:car_wash), 28 (:depot), 29 (:combi), 30 (:interior_wash), 31 (:other), 32 (:bundled)  # noqa: E501

        :param activity_type_id: The activity_type_id of this ActivityModel.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34]  # noqa: E501
        if (self._configuration.client_side_validation and
                activity_type_id not in allowed_values):
            raise ValueError(
                "Invalid value for `activity_type_id` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_type_id, allowed_values)
            )

        self._activity_type_id = activity_type_id

    @property
    def status_id(self):
        """Gets the status_id of this ActivityModel.  # noqa: E501

        StatusId of this Activity, 28: activity_cancelled, 20: activity_incomplete, 21: activity_new, 39: activity_awaiting, 22: activity_accepted, 3: activity_planned, 4: activity_in_progress, 9: activity_executed  # noqa: E501

        :return: The status_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this ActivityModel.

        StatusId of this Activity, 28: activity_cancelled, 20: activity_incomplete, 21: activity_new, 39: activity_awaiting, 22: activity_accepted, 3: activity_planned, 4: activity_in_progress, 9: activity_executed  # noqa: E501

        :param status_id: The status_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def status_name(self):
        """Gets the status_name of this ActivityModel.  # noqa: E501

        Activity Status  # noqa: E501

        :return: The status_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this ActivityModel.

        Activity Status  # noqa: E501

        :param status_name: The status_name of this ActivityModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["activity_incomplete", "activity_new", "activity_accepted", "activity_planned", "activity_in_progress", "activity_executed", "activity_cancelled", "activity_awaiting"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status_name not in allowed_values):
            raise ValueError(
                "Invalid value for `status_name` ({0}), must be one of {1}"  # noqa: E501
                .format(status_name, allowed_values)
            )

        self._status_name = status_name

    @property
    def assignment_id(self):
        """Gets the assignment_id of this ActivityModel.  # noqa: E501

        Assignment ID  # noqa: E501

        :return: The assignment_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this ActivityModel.

        Assignment ID  # noqa: E501

        :param assignment_id: The assignment_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def assignment_nr(self):
        """Gets the assignment_nr of this ActivityModel.  # noqa: E501

        Assignment NR  # noqa: E501

        :return: The assignment_nr of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._assignment_nr

    @assignment_nr.setter
    def assignment_nr(self, assignment_nr):
        """Sets the assignment_nr of this ActivityModel.

        Assignment NR  # noqa: E501

        :param assignment_nr: The assignment_nr of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._assignment_nr = assignment_nr

    @property
    def assignment(self):
        """Gets the assignment of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The assignment of this ActivityModel.  # noqa: E501
        :rtype: AssignmentModel
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this ActivityModel.

          # noqa: E501

        :param assignment: The assignment of this ActivityModel.  # noqa: E501
        :type: AssignmentModel
        """

        self._assignment = assignment

    @property
    def assignment_sequence_nr(self):
        """Gets the assignment_sequence_nr of this ActivityModel.  # noqa: E501

        Assignment sequence number for multi day assignments  # noqa: E501

        :return: The assignment_sequence_nr of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._assignment_sequence_nr

    @assignment_sequence_nr.setter
    def assignment_sequence_nr(self, assignment_sequence_nr):
        """Sets the assignment_sequence_nr of this ActivityModel.

        Assignment sequence number for multi day assignments  # noqa: E501

        :param assignment_sequence_nr: The assignment_sequence_nr of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._assignment_sequence_nr = assignment_sequence_nr

    @property
    def remarks(self):
        """Gets the remarks of this ActivityModel.  # noqa: E501

        Remarks about this activity  # noqa: E501

        :return: The remarks of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this ActivityModel.

        Remarks about this activity  # noqa: E501

        :param remarks: The remarks of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def locked(self):
        """Gets the locked of this ActivityModel.  # noqa: E501

        Activity locked status. 0 = not locked. 1 = locked on route and time. 2 = locked on route.  # noqa: E501

        :return: The locked of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ActivityModel.

        Activity locked status. 0 = not locked. 1 = locked on route and time. 2 = locked on route.  # noqa: E501

        :param locked: The locked of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._locked = locked

    @property
    def optimized(self):
        """Gets the optimized of this ActivityModel.  # noqa: E501

        Activity optimized status within route.  # noqa: E501

        :return: The optimized of this ActivityModel.  # noqa: E501
        :rtype: bool
        """
        return self._optimized

    @optimized.setter
    def optimized(self, optimized):
        """Sets the optimized of this ActivityModel.

        Activity optimized status within route.  # noqa: E501

        :param optimized: The optimized of this ActivityModel.  # noqa: E501
        :type: bool
        """

        self._optimized = optimized

    @property
    def priority(self):
        """Gets the priority of this ActivityModel.  # noqa: E501

        Priority level. 1 for highest priority, 3 for lowest priority. Default = 2  # noqa: E501

        :return: The priority of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ActivityModel.

        Priority level. 1 for highest priority, 3 for lowest priority. Default = 2  # noqa: E501

        :param priority: The priority of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def top_priority(self):
        """Gets the top_priority of this ActivityModel.  # noqa: E501

        Activity has top priority  # noqa: E501

        :return: The top_priority of this ActivityModel.  # noqa: E501
        :rtype: bool
        """
        return self._top_priority

    @top_priority.setter
    def top_priority(self, top_priority):
        """Sets the top_priority of this ActivityModel.

        Activity has top priority  # noqa: E501

        :param top_priority: The top_priority of this ActivityModel.  # noqa: E501
        :type: bool
        """

        self._top_priority = top_priority

    @property
    def sequence_nr(self):
        """Gets the sequence_nr of this ActivityModel.  # noqa: E501

        Sequence number on Route  # noqa: E501

        :return: The sequence_nr of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._sequence_nr

    @sequence_nr.setter
    def sequence_nr(self, sequence_nr):
        """Sets the sequence_nr of this ActivityModel.

        Sequence number on Route  # noqa: E501

        :param sequence_nr: The sequence_nr of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._sequence_nr = sequence_nr

    @property
    def planned_driving_time(self):
        """Gets the planned_driving_time of this ActivityModel.  # noqa: E501

        Deprecated! Driving time from the activity before this one  # noqa: E501

        :return: The planned_driving_time of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_driving_time

    @planned_driving_time.setter
    def planned_driving_time(self, planned_driving_time):
        """Sets the planned_driving_time of this ActivityModel.

        Deprecated! Driving time from the activity before this one  # noqa: E501

        :param planned_driving_time: The planned_driving_time of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._planned_driving_time = planned_driving_time

    @property
    def planned_driving_duration(self):
        """Gets the planned_driving_duration of this ActivityModel.  # noqa: E501

        Driving time from the activity before this one  # noqa: E501

        :return: The planned_driving_duration of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_driving_duration

    @planned_driving_duration.setter
    def planned_driving_duration(self, planned_driving_duration):
        """Sets the planned_driving_duration of this ActivityModel.

        Driving time from the activity before this one  # noqa: E501

        :param planned_driving_duration: The planned_driving_duration of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._planned_driving_duration = planned_driving_duration

    @property
    def planned_driving_distance(self):
        """Gets the planned_driving_distance of this ActivityModel.  # noqa: E501

        Driving distance from the activity before this one  # noqa: E501

        :return: The planned_driving_distance of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_driving_distance

    @planned_driving_distance.setter
    def planned_driving_distance(self, planned_driving_distance):
        """Sets the planned_driving_distance of this ActivityModel.

        Driving distance from the activity before this one  # noqa: E501

        :param planned_driving_distance: The planned_driving_distance of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._planned_driving_distance = planned_driving_distance

    @property
    def reference(self):
        """Gets the reference of this ActivityModel.  # noqa: E501

        Reference of this activity  # noqa: E501

        :return: The reference of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ActivityModel.

        Reference of this activity  # noqa: E501

        :param reference: The reference of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def description(self):
        """Gets the description of this ActivityModel.  # noqa: E501

        description of this activity  # noqa: E501

        :return: The description of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityModel.

        description of this activity  # noqa: E501

        :param description: The description of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def earliest_delivery_date_time(self):
        """Gets the earliest_delivery_date_time of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The earliest_delivery_date_time of this ActivityModel.  # noqa: E501
        :rtype: date
        """
        return self._earliest_delivery_date_time

    @earliest_delivery_date_time.setter
    def earliest_delivery_date_time(self, earliest_delivery_date_time):
        """Sets the earliest_delivery_date_time of this ActivityModel.

          # noqa: E501

        :param earliest_delivery_date_time: The earliest_delivery_date_time of this ActivityModel.  # noqa: E501
        :type: date
        """

        self._earliest_delivery_date_time = earliest_delivery_date_time

    @property
    def latest_delivery_date_time(self):
        """Gets the latest_delivery_date_time of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The latest_delivery_date_time of this ActivityModel.  # noqa: E501
        :rtype: date
        """
        return self._latest_delivery_date_time

    @latest_delivery_date_time.setter
    def latest_delivery_date_time(self, latest_delivery_date_time):
        """Sets the latest_delivery_date_time of this ActivityModel.

          # noqa: E501

        :param latest_delivery_date_time: The latest_delivery_date_time of this ActivityModel.  # noqa: E501
        :type: date
        """

        self._latest_delivery_date_time = latest_delivery_date_time

    @property
    def earliest_delivery_date(self):
        """Gets the earliest_delivery_date of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The earliest_delivery_date of this ActivityModel.  # noqa: E501
        :rtype: date
        """
        return self._earliest_delivery_date

    @earliest_delivery_date.setter
    def earliest_delivery_date(self, earliest_delivery_date):
        """Sets the earliest_delivery_date of this ActivityModel.

          # noqa: E501

        :param earliest_delivery_date: The earliest_delivery_date of this ActivityModel.  # noqa: E501
        :type: date
        """

        self._earliest_delivery_date = earliest_delivery_date

    @property
    def latest_delivery_date(self):
        """Gets the latest_delivery_date of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The latest_delivery_date of this ActivityModel.  # noqa: E501
        :rtype: date
        """
        return self._latest_delivery_date

    @latest_delivery_date.setter
    def latest_delivery_date(self, latest_delivery_date):
        """Sets the latest_delivery_date of this ActivityModel.

          # noqa: E501

        :param latest_delivery_date: The latest_delivery_date of this ActivityModel.  # noqa: E501
        :type: date
        """

        self._latest_delivery_date = latest_delivery_date

    @property
    def date_time_from(self):
        """Gets the date_time_from of this ActivityModel.  # noqa: E501

        Earliest date-time  # noqa: E501

        :return: The date_time_from of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_from

    @date_time_from.setter
    def date_time_from(self, date_time_from):
        """Sets the date_time_from of this ActivityModel.

        Earliest date-time  # noqa: E501

        :param date_time_from: The date_time_from of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_from = date_time_from

    @property
    def date_time_to(self):
        """Gets the date_time_to of this ActivityModel.  # noqa: E501

        latest date-time  # noqa: E501

        :return: The date_time_to of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_to

    @date_time_to.setter
    def date_time_to(self, date_time_to):
        """Sets the date_time_to of this ActivityModel.

        latest date-time  # noqa: E501

        :param date_time_to: The date_time_to of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_to = date_time_to

    @property
    def planned_date_time_from(self):
        """Gets the planned_date_time_from of this ActivityModel.  # noqa: E501

        planned date-time from (only filled for planned activities)  # noqa: E501

        :return: The planned_date_time_from of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_from

    @planned_date_time_from.setter
    def planned_date_time_from(self, planned_date_time_from):
        """Sets the planned_date_time_from of this ActivityModel.

        planned date-time from (only filled for planned activities)  # noqa: E501

        :param planned_date_time_from: The planned_date_time_from of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_from = planned_date_time_from

    @property
    def planned_date_time_to(self):
        """Gets the planned_date_time_to of this ActivityModel.  # noqa: E501

        planned date-time to (only filled for planned activities)  # noqa: E501

        :return: The planned_date_time_to of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_date_time_to

    @planned_date_time_to.setter
    def planned_date_time_to(self, planned_date_time_to):
        """Sets the planned_date_time_to of this ActivityModel.

        planned date-time to (only filled for planned activities)  # noqa: E501

        :param planned_date_time_to: The planned_date_time_to of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._planned_date_time_to = planned_date_time_to

    @property
    def executed_date_time_from(self):
        """Gets the executed_date_time_from of this ActivityModel.  # noqa: E501

        executed date-time from (only filled for executed activities)  # noqa: E501

        :return: The executed_date_time_from of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._executed_date_time_from

    @executed_date_time_from.setter
    def executed_date_time_from(self, executed_date_time_from):
        """Sets the executed_date_time_from of this ActivityModel.

        executed date-time from (only filled for executed activities)  # noqa: E501

        :param executed_date_time_from: The executed_date_time_from of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._executed_date_time_from = executed_date_time_from

    @property
    def executed_date_time_to(self):
        """Gets the executed_date_time_to of this ActivityModel.  # noqa: E501

        executed date-time to (only filled for executed activities)  # noqa: E501

        :return: The executed_date_time_to of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._executed_date_time_to

    @executed_date_time_to.setter
    def executed_date_time_to(self, executed_date_time_to):
        """Sets the executed_date_time_to of this ActivityModel.

        executed date-time to (only filled for executed activities)  # noqa: E501

        :param executed_date_time_to: The executed_date_time_to of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._executed_date_time_to = executed_date_time_to

    @property
    def duration(self):
        """Gets the duration of this ActivityModel.  # noqa: E501

        Duration of this activity in minutes  # noqa: E501

        :return: The duration of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ActivityModel.

        Duration of this activity in minutes  # noqa: E501

        :param duration: The duration of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def depot_duration(self):
        """Gets the depot_duration of this ActivityModel.  # noqa: E501

        Duration of the depot activity in minutes  # noqa: E501

        :return: The depot_duration of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._depot_duration

    @depot_duration.setter
    def depot_duration(self, depot_duration):
        """Sets the depot_duration of this ActivityModel.

        Duration of the depot activity in minutes  # noqa: E501

        :param depot_duration: The depot_duration of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._depot_duration = depot_duration

    @property
    def active(self):
        """Gets the active of this ActivityModel.  # noqa: E501

        if active=0: activity has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this ActivityModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ActivityModel.

        if active=0: activity has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this ActivityModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def route_id(self):
        """Gets the route_id of this ActivityModel.  # noqa: E501

        Route ID (unique)  # noqa: E501

        :return: The route_id of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this ActivityModel.

        Route ID (unique)  # noqa: E501

        :param route_id: The route_id of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._route_id = route_id

    @property
    def route_nr(self):
        """Gets the route_nr of this ActivityModel.  # noqa: E501

        Route Number (not unique)  # noqa: E501

        :return: The route_nr of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._route_nr

    @route_nr.setter
    def route_nr(self, route_nr):
        """Sets the route_nr of this ActivityModel.

        Route Number (not unique)  # noqa: E501

        :param route_nr: The route_nr of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._route_nr = route_nr

    @property
    def route_name(self):
        """Gets the route_name of this ActivityModel.  # noqa: E501

        Route name  # noqa: E501

        :return: The route_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._route_name

    @route_name.setter
    def route_name(self, route_name):
        """Sets the route_name of this ActivityModel.

        Route name  # noqa: E501

        :param route_name: The route_name of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._route_name = route_name

    @property
    def route_date_time_from(self):
        """Gets the route_date_time_from of this ActivityModel.  # noqa: E501

        Start date-time of route  # noqa: E501

        :return: The route_date_time_from of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._route_date_time_from

    @route_date_time_from.setter
    def route_date_time_from(self, route_date_time_from):
        """Sets the route_date_time_from of this ActivityModel.

        Start date-time of route  # noqa: E501

        :param route_date_time_from: The route_date_time_from of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._route_date_time_from = route_date_time_from

    @property
    def route_date_time_to(self):
        """Gets the route_date_time_to of this ActivityModel.  # noqa: E501

        End date-time of route  # noqa: E501

        :return: The route_date_time_to of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._route_date_time_to

    @route_date_time_to.setter
    def route_date_time_to(self, route_date_time_to):
        """Sets the route_date_time_to of this ActivityModel.

        End date-time of route  # noqa: E501

        :param route_date_time_to: The route_date_time_to of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._route_date_time_to = route_date_time_to

    @property
    def route_earliest_date_time(self):
        """Gets the route_earliest_date_time of this ActivityModel.  # noqa: E501

        Earliest date-time of route  # noqa: E501

        :return: The route_earliest_date_time of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._route_earliest_date_time

    @route_earliest_date_time.setter
    def route_earliest_date_time(self, route_earliest_date_time):
        """Sets the route_earliest_date_time of this ActivityModel.

        Earliest date-time of route  # noqa: E501

        :param route_earliest_date_time: The route_earliest_date_time of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._route_earliest_date_time = route_earliest_date_time

    @property
    def route_latest_date_time(self):
        """Gets the route_latest_date_time of this ActivityModel.  # noqa: E501

        Latest date-time of route  # noqa: E501

        :return: The route_latest_date_time of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._route_latest_date_time

    @route_latest_date_time.setter
    def route_latest_date_time(self, route_latest_date_time):
        """Sets the route_latest_date_time of this ActivityModel.

        Latest date-time of route  # noqa: E501

        :param route_latest_date_time: The route_latest_date_time of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._route_latest_date_time = route_latest_date_time

    @property
    def route_status_id(self):
        """Gets the route_status_id of this ActivityModel.  # noqa: E501

        Status ID of this Route  # noqa: E501

        :return: The route_status_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._route_status_id

    @route_status_id.setter
    def route_status_id(self, route_status_id):
        """Sets the route_status_id of this ActivityModel.

        Status ID of this Route  # noqa: E501

        :param route_status_id: The route_status_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._route_status_id = route_status_id

    @property
    def route_status_name(self):
        """Gets the route_status_name of this ActivityModel.  # noqa: E501

        Status Name of this Route  # noqa: E501

        :return: The route_status_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._route_status_name

    @route_status_name.setter
    def route_status_name(self, route_status_name):
        """Sets the route_status_name of this ActivityModel.

        Status Name of this Route  # noqa: E501

        :param route_status_name: The route_status_name of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._route_status_name = route_status_name

    @property
    def route_nr_of_stops(self):
        """Gets the route_nr_of_stops of this ActivityModel.  # noqa: E501

        Number of stops on this route  # noqa: E501

        :return: The route_nr_of_stops of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._route_nr_of_stops

    @route_nr_of_stops.setter
    def route_nr_of_stops(self, route_nr_of_stops):
        """Sets the route_nr_of_stops of this ActivityModel.

        Number of stops on this route  # noqa: E501

        :param route_nr_of_stops: The route_nr_of_stops of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._route_nr_of_stops = route_nr_of_stops

    @property
    def route_overdue(self):
        """Gets the route_overdue of this ActivityModel.  # noqa: E501

        Route is overdue  # noqa: E501

        :return: The route_overdue of this ActivityModel.  # noqa: E501
        :rtype: bool
        """
        return self._route_overdue

    @route_overdue.setter
    def route_overdue(self, route_overdue):
        """Sets the route_overdue of this ActivityModel.

        Route is overdue  # noqa: E501

        :param route_overdue: The route_overdue of this ActivityModel.  # noqa: E501
        :type: bool
        """

        self._route_overdue = route_overdue

    @property
    def co_driver_ids(self):
        """Gets the co_driver_ids of this ActivityModel.  # noqa: E501

        Unique Identifier(s) for co-drivers on route  # noqa: E501

        :return: The co_driver_ids of this ActivityModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._co_driver_ids

    @co_driver_ids.setter
    def co_driver_ids(self, co_driver_ids):
        """Sets the co_driver_ids of this ActivityModel.

        Unique Identifier(s) for co-drivers on route  # noqa: E501

        :param co_driver_ids: The co_driver_ids of this ActivityModel.  # noqa: E501
        :type: list[int]
        """

        self._co_driver_ids = co_driver_ids

    @property
    def co_drivers(self):
        """Gets the co_drivers of this ActivityModel.  # noqa: E501

        list of co-drivers on route  # noqa: E501

        :return: The co_drivers of this ActivityModel.  # noqa: E501
        :rtype: list[UsersModel]
        """
        return self._co_drivers

    @co_drivers.setter
    def co_drivers(self, co_drivers):
        """Sets the co_drivers of this ActivityModel.

        list of co-drivers on route  # noqa: E501

        :param co_drivers: The co_drivers of this ActivityModel.  # noqa: E501
        :type: list[UsersModel]
        """

        self._co_drivers = co_drivers

    @property
    def user_id(self):
        """Gets the user_id of this ActivityModel.  # noqa: E501

        ID of the user who will execute this activity  # noqa: E501

        :return: The user_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActivityModel.

        ID of the user who will execute this activity  # noqa: E501

        :param user_id: The user_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def driver_id(self):
        """Gets the driver_id of this ActivityModel.  # noqa: E501

        Driver ID connected to this route/activity  # noqa: E501

        :return: The driver_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this ActivityModel.

        Driver ID connected to this route/activity  # noqa: E501

        :param driver_id: The driver_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._driver_id = driver_id

    @property
    def driver_first_name(self):
        """Gets the driver_first_name of this ActivityModel.  # noqa: E501

        Driver first name  # noqa: E501

        :return: The driver_first_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._driver_first_name

    @driver_first_name.setter
    def driver_first_name(self, driver_first_name):
        """Sets the driver_first_name of this ActivityModel.

        Driver first name  # noqa: E501

        :param driver_first_name: The driver_first_name of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._driver_first_name = driver_first_name

    @property
    def driver_last_name(self):
        """Gets the driver_last_name of this ActivityModel.  # noqa: E501

        Driver last name  # noqa: E501

        :return: The driver_last_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._driver_last_name

    @driver_last_name.setter
    def driver_last_name(self, driver_last_name):
        """Sets the driver_last_name of this ActivityModel.

        Driver last name  # noqa: E501

        :param driver_last_name: The driver_last_name of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._driver_last_name = driver_last_name

    @property
    def driver_name_prefix(self):
        """Gets the driver_name_prefix of this ActivityModel.  # noqa: E501

        Driver prefix  # noqa: E501

        :return: The driver_name_prefix of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._driver_name_prefix

    @driver_name_prefix.setter
    def driver_name_prefix(self, driver_name_prefix):
        """Sets the driver_name_prefix of this ActivityModel.

        Driver prefix  # noqa: E501

        :param driver_name_prefix: The driver_name_prefix of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._driver_name_prefix = driver_name_prefix

    @property
    def driver_full_name(self):
        """Gets the driver_full_name of this ActivityModel.  # noqa: E501

        Driver full name  # noqa: E501

        :return: The driver_full_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._driver_full_name

    @driver_full_name.setter
    def driver_full_name(self, driver_full_name):
        """Sets the driver_full_name of this ActivityModel.

        Driver full name  # noqa: E501

        :param driver_full_name: The driver_full_name of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._driver_full_name = driver_full_name

    @property
    def addressapplied_id(self):
        """Gets the addressapplied_id of this ActivityModel.  # noqa: E501

        Address Applied ID  # noqa: E501

        :return: The addressapplied_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._addressapplied_id

    @addressapplied_id.setter
    def addressapplied_id(self, addressapplied_id):
        """Sets the addressapplied_id of this ActivityModel.

        Address Applied ID  # noqa: E501

        :param addressapplied_id: The addressapplied_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._addressapplied_id = addressapplied_id

    @property
    def address_id(self):
        """Gets the address_id of this ActivityModel.  # noqa: E501

        Address ID  # noqa: E501

        :return: The address_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this ActivityModel.

        Address ID  # noqa: E501

        :param address_id: The address_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._address_id = address_id

    @property
    def address(self):
        """Gets the address of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The address of this ActivityModel.  # noqa: E501
        :rtype: AddressModel
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ActivityModel.

          # noqa: E501

        :param address: The address of this ActivityModel.  # noqa: E501
        :type: AddressModel
        """

        self._address = address

    @property
    def address_applied(self):
        """Gets the address_applied of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The address_applied of this ActivityModel.  # noqa: E501
        :rtype: AddressAppliedModel
        """
        return self._address_applied

    @address_applied.setter
    def address_applied(self, address_applied):
        """Sets the address_applied of this ActivityModel.

          # noqa: E501

        :param address_applied: The address_applied of this ActivityModel.  # noqa: E501
        :type: AddressAppliedModel
        """

        self._address_applied = address_applied

    @property
    def depot_address(self):
        """Gets the depot_address of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The depot_address of this ActivityModel.  # noqa: E501
        :rtype: AddressModel
        """
        return self._depot_address

    @depot_address.setter
    def depot_address(self, depot_address):
        """Sets the depot_address of this ActivityModel.

          # noqa: E501

        :param depot_address: The depot_address of this ActivityModel.  # noqa: E501
        :type: AddressModel
        """

        self._depot_address = depot_address

    @property
    def depot_address_id(self):
        """Gets the depot_address_id of this ActivityModel.  # noqa: E501

        Depot Address ID  # noqa: E501

        :return: The depot_address_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._depot_address_id

    @depot_address_id.setter
    def depot_address_id(self, depot_address_id):
        """Sets the depot_address_id of this ActivityModel.

        Depot Address ID  # noqa: E501

        :param depot_address_id: The depot_address_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._depot_address_id = depot_address_id

    @property
    def depot_activity(self):
        """Gets the depot_activity of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The depot_activity of this ActivityModel.  # noqa: E501
        :rtype: list[ActivityModel]
        """
        return self._depot_activity

    @depot_activity.setter
    def depot_activity(self, depot_activity):
        """Sets the depot_activity of this ActivityModel.

          # noqa: E501

        :param depot_activity: The depot_activity of this ActivityModel.  # noqa: E501
        :type: list[ActivityModel]
        """

        self._depot_activity = depot_activity

    @property
    def allowed_driver_ids(self):
        """Gets the allowed_driver_ids of this ActivityModel.  # noqa: E501

        Unique Identifier(s) for allowed drivers in activity  # noqa: E501

        :return: The allowed_driver_ids of this ActivityModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._allowed_driver_ids

    @allowed_driver_ids.setter
    def allowed_driver_ids(self, allowed_driver_ids):
        """Sets the allowed_driver_ids of this ActivityModel.

        Unique Identifier(s) for allowed drivers in activity  # noqa: E501

        :param allowed_driver_ids: The allowed_driver_ids of this ActivityModel.  # noqa: E501
        :type: list[int]
        """

        self._allowed_driver_ids = allowed_driver_ids

    @property
    def allowed_drivers(self):
        """Gets the allowed_drivers of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The allowed_drivers of this ActivityModel.  # noqa: E501
        :rtype: list[AllowedDriverModel]
        """
        return self._allowed_drivers

    @allowed_drivers.setter
    def allowed_drivers(self, allowed_drivers):
        """Sets the allowed_drivers of this ActivityModel.

          # noqa: E501

        :param allowed_drivers: The allowed_drivers of this ActivityModel.  # noqa: E501
        :type: list[AllowedDriverModel]
        """

        self._allowed_drivers = allowed_drivers

    @property
    def allowed_drivers_links(self):
        """Gets the allowed_drivers_links of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The allowed_drivers_links of this ActivityModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._allowed_drivers_links

    @allowed_drivers_links.setter
    def allowed_drivers_links(self, allowed_drivers_links):
        """Sets the allowed_drivers_links of this ActivityModel.

          # noqa: E501

        :param allowed_drivers_links: The allowed_drivers_links of this ActivityModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._allowed_drivers_links = allowed_drivers_links

    @property
    def applied_capacities(self):
        """Gets the applied_capacities of this ActivityModel.  # noqa: E501


        :return: The applied_capacities of this ActivityModel.  # noqa: E501
        :rtype: ActivityModelAppliedCapacities
        """
        return self._applied_capacities

    @applied_capacities.setter
    def applied_capacities(self, applied_capacities):
        """Sets the applied_capacities of this ActivityModel.


        :param applied_capacities: The applied_capacities of this ActivityModel.  # noqa: E501
        :type: ActivityModelAppliedCapacities
        """

        self._applied_capacities = applied_capacities

    @property
    def capacities(self):
        """Gets the capacities of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The capacities of this ActivityModel.  # noqa: E501
        :rtype: list[CapacityModel]
        """
        return self._capacities

    @capacities.setter
    def capacities(self, capacities):
        """Sets the capacities of this ActivityModel.

          # noqa: E501

        :param capacities: The capacities of this ActivityModel.  # noqa: E501
        :type: list[CapacityModel]
        """

        self._capacities = capacities

    @property
    def package_lines(self):
        """Gets the package_lines of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The package_lines of this ActivityModel.  # noqa: E501
        :rtype: list[PackageLineModel]
        """
        return self._package_lines

    @package_lines.setter
    def package_lines(self, package_lines):
        """Sets the package_lines of this ActivityModel.

          # noqa: E501

        :param package_lines: The package_lines of this ActivityModel.  # noqa: E501
        :type: list[PackageLineModel]
        """

        self._package_lines = package_lines

    @property
    def payments(self):
        """Gets the payments of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The payments of this ActivityModel.  # noqa: E501
        :rtype: list[PaymentModel]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this ActivityModel.

          # noqa: E501

        :param payments: The payments of this ActivityModel.  # noqa: E501
        :type: list[PaymentModel]
        """

        self._payments = payments

    @property
    def time_slots(self):
        """Gets the time_slots of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The time_slots of this ActivityModel.  # noqa: E501
        :rtype: list[TimeSlotModel]
        """
        return self._time_slots

    @time_slots.setter
    def time_slots(self, time_slots):
        """Sets the time_slots of this ActivityModel.

          # noqa: E501

        :param time_slots: The time_slots of this ActivityModel.  # noqa: E501
        :type: list[TimeSlotModel]
        """

        self._time_slots = time_slots

    @property
    def brand_id(self):
        """Gets the brand_id of this ActivityModel.  # noqa: E501

        Brand ID  # noqa: E501

        :return: The brand_id of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this ActivityModel.

        Brand ID  # noqa: E501

        :param brand_id: The brand_id of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._brand_id = brand_id

    @property
    def brand_name(self):
        """Gets the brand_name of this ActivityModel.  # noqa: E501

        Brand name (must be unique)  # noqa: E501

        :return: The brand_name of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this ActivityModel.

        Brand name (must be unique)  # noqa: E501

        :param brand_name: The brand_name of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def brand(self):
        """Gets the brand of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The brand of this ActivityModel.  # noqa: E501
        :rtype: BrandModel
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ActivityModel.

          # noqa: E501

        :param brand: The brand of this ActivityModel.  # noqa: E501
        :type: BrandModel
        """

        self._brand = brand

    @property
    def communication(self):
        """Gets the communication of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The communication of this ActivityModel.  # noqa: E501
        :rtype: CommunicationModel
        """
        return self._communication

    @communication.setter
    def communication(self, communication):
        """Sets the communication of this ActivityModel.

          # noqa: E501

        :param communication: The communication of this ActivityModel.  # noqa: E501
        :type: CommunicationModel
        """

        self._communication = communication

    @property
    def assignment_link(self):
        """Gets the assignment_link of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The assignment_link of this ActivityModel.  # noqa: E501
        :rtype: LinkModel
        """
        return self._assignment_link

    @assignment_link.setter
    def assignment_link(self, assignment_link):
        """Sets the assignment_link of this ActivityModel.

          # noqa: E501

        :param assignment_link: The assignment_link of this ActivityModel.  # noqa: E501
        :type: LinkModel
        """

        self._assignment_link = assignment_link

    @property
    def route_link(self):
        """Gets the route_link of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The route_link of this ActivityModel.  # noqa: E501
        :rtype: LinkModel
        """
        return self._route_link

    @route_link.setter
    def route_link(self, route_link):
        """Sets the route_link of this ActivityModel.

          # noqa: E501

        :param route_link: The route_link of this ActivityModel.  # noqa: E501
        :type: LinkModel
        """

        self._route_link = route_link

    @property
    def route(self):
        """Gets the route of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The route of this ActivityModel.  # noqa: E501
        :rtype: RouteModel
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this ActivityModel.

          # noqa: E501

        :param route: The route of this ActivityModel.  # noqa: E501
        :type: RouteModel
        """

        self._route = route

    @property
    def driver(self):
        """Gets the driver of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The driver of this ActivityModel.  # noqa: E501
        :rtype: DriverModel
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this ActivityModel.

          # noqa: E501

        :param driver: The driver of this ActivityModel.  # noqa: E501
        :type: DriverModel
        """

        self._driver = driver

    @property
    def driver_links(self):
        """Gets the driver_links of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The driver_links of this ActivityModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._driver_links

    @driver_links.setter
    def driver_links(self, driver_links):
        """Sets the driver_links of this ActivityModel.

          # noqa: E501

        :param driver_links: The driver_links of this ActivityModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._driver_links = driver_links

    @property
    def car(self):
        """Gets the car of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The car of this ActivityModel.  # noqa: E501
        :rtype: VehicleModel
        """
        return self._car

    @car.setter
    def car(self, car):
        """Sets the car of this ActivityModel.

          # noqa: E501

        :param car: The car of this ActivityModel.  # noqa: E501
        :type: VehicleModel
        """

        self._car = car

    @property
    def vehicle(self):
        """Gets the vehicle of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The vehicle of this ActivityModel.  # noqa: E501
        :rtype: VehicleModel
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this ActivityModel.

          # noqa: E501

        :param vehicle: The vehicle of this ActivityModel.  # noqa: E501
        :type: VehicleModel
        """

        self._vehicle = vehicle

    @property
    def trailer(self):
        """Gets the trailer of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The trailer of this ActivityModel.  # noqa: E501
        :rtype: TrailerModel
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """Sets the trailer of this ActivityModel.

          # noqa: E501

        :param trailer: The trailer of this ActivityModel.  # noqa: E501
        :type: TrailerModel
        """

        self._trailer = trailer

    @property
    def activity_id_before(self):
        """Gets the activity_id_before of this ActivityModel.  # noqa: E501

        Activity ID of the activity which must be performed before this activity  # noqa: E501

        :return: The activity_id_before of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._activity_id_before

    @activity_id_before.setter
    def activity_id_before(self, activity_id_before):
        """Sets the activity_id_before of this ActivityModel.

        Activity ID of the activity which must be performed before this activity  # noqa: E501

        :param activity_id_before: The activity_id_before of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._activity_id_before = activity_id_before

    @property
    def activity_id_after(self):
        """Gets the activity_id_after of this ActivityModel.  # noqa: E501

        Activity ID of the activity which must be performed after this activity  # noqa: E501

        :return: The activity_id_after of this ActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._activity_id_after

    @activity_id_after.setter
    def activity_id_after(self, activity_id_after):
        """Sets the activity_id_after of this ActivityModel.

        Activity ID of the activity which must be performed after this activity  # noqa: E501

        :param activity_id_after: The activity_id_after of this ActivityModel.  # noqa: E501
        :type: str
        """

        self._activity_id_after = activity_id_after

    @property
    def bundled_activity_ids(self):
        """Gets the bundled_activity_ids of this ActivityModel.  # noqa: E501

        Ids of activities within bundle activity  # noqa: E501

        :return: The bundled_activity_ids of this ActivityModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._bundled_activity_ids

    @bundled_activity_ids.setter
    def bundled_activity_ids(self, bundled_activity_ids):
        """Sets the bundled_activity_ids of this ActivityModel.

        Ids of activities within bundle activity  # noqa: E501

        :param bundled_activity_ids: The bundled_activity_ids of this ActivityModel.  # noqa: E501
        :type: list[int]
        """

        self._bundled_activity_ids = bundled_activity_ids

    @property
    def tags(self):
        """Gets the tags of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this ActivityModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ActivityModel.

          # noqa: E501

        :param tags: The tags of this ActivityModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def recurrence(self):
        """Gets the recurrence of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The recurrence of this ActivityModel.  # noqa: E501
        :rtype: RecurrenceModel
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this ActivityModel.

          # noqa: E501

        :param recurrence: The recurrence of this ActivityModel.  # noqa: E501
        :type: RecurrenceModel
        """

        self._recurrence = recurrence

    @property
    def tag_names(self):
        """Gets the tag_names of this ActivityModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this ActivityModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this ActivityModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this ActivityModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def tag_ids(self):
        """Gets the tag_ids of this ActivityModel.  # noqa: E501

        Tag type ids  # noqa: E501

        :return: The tag_ids of this ActivityModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this ActivityModel.

        Tag type ids  # noqa: E501

        :param tag_ids: The tag_ids of this ActivityModel.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def zones(self):
        """Gets the zones of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The zones of this ActivityModel.  # noqa: E501
        :rtype: list[ZoneModel]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this ActivityModel.

          # noqa: E501

        :param zones: The zones of this ActivityModel.  # noqa: E501
        :type: list[ZoneModel]
        """

        self._zones = zones

    @property
    def zone_names(self):
        """Gets the zone_names of this ActivityModel.  # noqa: E501

        Zone names  # noqa: E501

        :return: The zone_names of this ActivityModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_names

    @zone_names.setter
    def zone_names(self, zone_names):
        """Sets the zone_names of this ActivityModel.

        Zone names  # noqa: E501

        :param zone_names: The zone_names of this ActivityModel.  # noqa: E501
        :type: list[str]
        """

        self._zone_names = zone_names

    @property
    def links(self):
        """Gets the links of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The links of this ActivityModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ActivityModel.

          # noqa: E501

        :param links: The links of this ActivityModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this ActivityModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this ActivityModel.

          # noqa: E501

        :param meta_data: The meta_data of this ActivityModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def stats(self):
        """Gets the stats of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The stats of this ActivityModel.  # noqa: E501
        :rtype: ActivityStatsModel
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this ActivityModel.

          # noqa: E501

        :param stats: The stats of this ActivityModel.  # noqa: E501
        :type: ActivityStatsModel
        """

        self._stats = stats

    @property
    def notes(self):
        """Gets the notes of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The notes of this ActivityModel.  # noqa: E501
        :rtype: list[NoteModel]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ActivityModel.

          # noqa: E501

        :param notes: The notes of this ActivityModel.  # noqa: E501
        :type: list[NoteModel]
        """

        self._notes = notes

    @property
    def files(self):
        """Gets the files of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The files of this ActivityModel.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ActivityModel.

          # noqa: E501

        :param files: The files of this ActivityModel.  # noqa: E501
        :type: list[FileModel]
        """

        self._files = files

    @property
    def activity_created_at(self):
        """Gets the activity_created_at of this ActivityModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The activity_created_at of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._activity_created_at

    @activity_created_at.setter
    def activity_created_at(self, activity_created_at):
        """Sets the activity_created_at of this ActivityModel.

        created_at date time  # noqa: E501

        :param activity_created_at: The activity_created_at of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._activity_created_at = activity_created_at

    @property
    def activity_updated_at(self):
        """Gets the activity_updated_at of this ActivityModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The activity_updated_at of this ActivityModel.  # noqa: E501
        :rtype: datetime
        """
        return self._activity_updated_at

    @activity_updated_at.setter
    def activity_updated_at(self, activity_updated_at):
        """Sets the activity_updated_at of this ActivityModel.

        updated_at date time  # noqa: E501

        :param activity_updated_at: The activity_updated_at of this ActivityModel.  # noqa: E501
        :type: datetime
        """

        self._activity_updated_at = activity_updated_at

    @property
    def activity_created_by(self):
        """Gets the activity_created_by of this ActivityModel.  # noqa: E501

        created_by user id  # noqa: E501

        :return: The activity_created_by of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._activity_created_by

    @activity_created_by.setter
    def activity_created_by(self, activity_created_by):
        """Sets the activity_created_by of this ActivityModel.

        created_by user id  # noqa: E501

        :param activity_created_by: The activity_created_by of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._activity_created_by = activity_created_by

    @property
    def activity_updated_by(self):
        """Gets the activity_updated_by of this ActivityModel.  # noqa: E501

        updated_by user id  # noqa: E501

        :return: The activity_updated_by of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._activity_updated_by

    @activity_updated_by.setter
    def activity_updated_by(self, activity_updated_by):
        """Sets the activity_updated_by of this ActivityModel.

        updated_by user id  # noqa: E501

        :param activity_updated_by: The activity_updated_by of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._activity_updated_by = activity_updated_by

    @property
    def activity_created_by_user(self):
        """Gets the activity_created_by_user of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The activity_created_by_user of this ActivityModel.  # noqa: E501
        :rtype: UsersModel
        """
        return self._activity_created_by_user

    @activity_created_by_user.setter
    def activity_created_by_user(self, activity_created_by_user):
        """Sets the activity_created_by_user of this ActivityModel.

          # noqa: E501

        :param activity_created_by_user: The activity_created_by_user of this ActivityModel.  # noqa: E501
        :type: UsersModel
        """

        self._activity_created_by_user = activity_created_by_user

    @property
    def activity_updated_by_user(self):
        """Gets the activity_updated_by_user of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The activity_updated_by_user of this ActivityModel.  # noqa: E501
        :rtype: UsersModel
        """
        return self._activity_updated_by_user

    @activity_updated_by_user.setter
    def activity_updated_by_user(self, activity_updated_by_user):
        """Sets the activity_updated_by_user of this ActivityModel.

          # noqa: E501

        :param activity_updated_by_user: The activity_updated_by_user of this ActivityModel.  # noqa: E501
        :type: UsersModel
        """

        self._activity_updated_by_user = activity_updated_by_user

    @property
    def activity_active(self):
        """Gets the activity_active of this ActivityModel.  # noqa: E501

        Activity is active (=true). Inactive activities are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui.  # noqa: E501

        :return: The activity_active of this ActivityModel.  # noqa: E501
        :rtype: bool
        """
        return self._activity_active

    @activity_active.setter
    def activity_active(self, activity_active):
        """Sets the activity_active of this ActivityModel.

        Activity is active (=true). Inactive activities are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui.  # noqa: E501

        :param activity_active: The activity_active of this ActivityModel.  # noqa: E501
        :type: bool
        """

        self._activity_active = activity_active

    @property
    def activity_removed(self):
        """Gets the activity_removed of this ActivityModel.  # noqa: E501

        Activity is removed (=true). Removed activities are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui. Removed activities are usually irrepairable.  # noqa: E501

        :return: The activity_removed of this ActivityModel.  # noqa: E501
        :rtype: bool
        """
        return self._activity_removed

    @activity_removed.setter
    def activity_removed(self, activity_removed):
        """Sets the activity_removed of this ActivityModel.

        Activity is removed (=true). Removed activities are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui. Removed activities are usually irrepairable.  # noqa: E501

        :param activity_removed: The activity_removed of this ActivityModel.  # noqa: E501
        :type: bool
        """

        self._activity_removed = activity_removed

    @property
    def payment_total(self):
        """Gets the payment_total of this ActivityModel.  # noqa: E501

        Total to be paid in cents. readonly  # noqa: E501

        :return: The payment_total of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._payment_total

    @payment_total.setter
    def payment_total(self, payment_total):
        """Sets the payment_total of this ActivityModel.

        Total to be paid in cents. readonly  # noqa: E501

        :param payment_total: The payment_total of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._payment_total = payment_total

    @property
    def transaction_total(self):
        """Gets the transaction_total of this ActivityModel.  # noqa: E501

        Total has been paid in cents. readonly  # noqa: E501

        :return: The transaction_total of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._transaction_total

    @transaction_total.setter
    def transaction_total(self, transaction_total):
        """Sets the transaction_total of this ActivityModel.

        Total has been paid in cents. readonly  # noqa: E501

        :param transaction_total: The transaction_total of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._transaction_total = transaction_total

    @property
    def due_total(self):
        """Gets the due_total of this ActivityModel.  # noqa: E501

        Amount which hasn't been paid yet in cents. readonly  # noqa: E501

        :return: The due_total of this ActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._due_total

    @due_total.setter
    def due_total(self, due_total):
        """Sets the due_total of this ActivityModel.

        Amount which hasn't been paid yet in cents. readonly  # noqa: E501

        :param due_total: The due_total of this ActivityModel.  # noqa: E501
        :type: int
        """

        self._due_total = due_total

    @property
    def transactions(self):
        """Gets the transactions of this ActivityModel.  # noqa: E501

          # noqa: E501

        :return: The transactions of this ActivityModel.  # noqa: E501
        :rtype: list[TransactionModel]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this ActivityModel.

          # noqa: E501

        :param transactions: The transactions of this ActivityModel.  # noqa: E501
        :type: list[TransactionModel]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivityModel):
            return True

        return self.to_dict() != other.to_dict()
