# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class EquipmentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'equipment_type_id': 'int',
        'equipment_type_name': 'str',
        'info': 'str',
        'name': 'str',
        'registration_nr': 'str',
        'max_speed': 'int',
        'tags': 'list[TagModel]',
        'applied_capacities': 'object',
        'capacities': 'list[CapacityModel]',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]'
    }

    attribute_map = {
        'id': 'id',
        'equipment_type_id': 'equipment_type_id',
        'equipment_type_name': 'equipment_type_name',
        'info': 'info',
        'name': 'name',
        'registration_nr': 'registration_nr',
        'max_speed': 'max_speed',
        'tags': 'tags',
        'applied_capacities': 'applied_capacities',
        'capacities': 'capacities',
        'links': 'links',
        'meta_data': 'meta_data'
    }

    def __init__(self, id=None, equipment_type_id=None, equipment_type_name=None, info=None, name=None, registration_nr=None, max_speed=None, tags=None, applied_capacities=None, capacities=None, links=None, meta_data=None, _configuration=None):  # noqa: E501
        """EquipmentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._equipment_type_id = None
        self._equipment_type_name = None
        self._info = None
        self._name = None
        self._registration_nr = None
        self._max_speed = None
        self._tags = None
        self._applied_capacities = None
        self._capacities = None
        self._links = None
        self._meta_data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if equipment_type_id is not None:
            self.equipment_type_id = equipment_type_id
        if equipment_type_name is not None:
            self.equipment_type_name = equipment_type_name
        if info is not None:
            self.info = info
        if name is not None:
            self.name = name
        if registration_nr is not None:
            self.registration_nr = registration_nr
        if max_speed is not None:
            self.max_speed = max_speed
        if tags is not None:
            self.tags = tags
        if applied_capacities is not None:
            self.applied_capacities = applied_capacities
        if capacities is not None:
            self.capacities = capacities
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data

    @property
    def id(self):
        """Gets the id of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The id of this EquipmentModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EquipmentModel.

          # noqa: E501

        :param id: The id of this EquipmentModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def equipment_type_id(self):
        """Gets the equipment_type_id of this EquipmentModel.  # noqa: E501

        Equipment Type ID  # noqa: E501

        :return: The equipment_type_id of this EquipmentModel.  # noqa: E501
        :rtype: int
        """
        return self._equipment_type_id

    @equipment_type_id.setter
    def equipment_type_id(self, equipment_type_id):
        """Sets the equipment_type_id of this EquipmentModel.

        Equipment Type ID  # noqa: E501

        :param equipment_type_id: The equipment_type_id of this EquipmentModel.  # noqa: E501
        :type: int
        """

        self._equipment_type_id = equipment_type_id

    @property
    def equipment_type_name(self):
        """Gets the equipment_type_name of this EquipmentModel.  # noqa: E501

        Equipment Type Name  # noqa: E501

        :return: The equipment_type_name of this EquipmentModel.  # noqa: E501
        :rtype: str
        """
        return self._equipment_type_name

    @equipment_type_name.setter
    def equipment_type_name(self, equipment_type_name):
        """Sets the equipment_type_name of this EquipmentModel.

        Equipment Type Name  # noqa: E501

        :param equipment_type_name: The equipment_type_name of this EquipmentModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["car", "trailer", "other"]  # noqa: E501
        if (self._configuration.client_side_validation and
                equipment_type_name not in allowed_values):
            raise ValueError(
                "Invalid value for `equipment_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(equipment_type_name, allowed_values)
            )

        self._equipment_type_name = equipment_type_name

    @property
    def info(self):
        """Gets the info of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The info of this EquipmentModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this EquipmentModel.

          # noqa: E501

        :param info: The info of this EquipmentModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def name(self):
        """Gets the name of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The name of this EquipmentModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EquipmentModel.

          # noqa: E501

        :param name: The name of this EquipmentModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def registration_nr(self):
        """Gets the registration_nr of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The registration_nr of this EquipmentModel.  # noqa: E501
        :rtype: str
        """
        return self._registration_nr

    @registration_nr.setter
    def registration_nr(self, registration_nr):
        """Sets the registration_nr of this EquipmentModel.

          # noqa: E501

        :param registration_nr: The registration_nr of this EquipmentModel.  # noqa: E501
        :type: str
        """

        self._registration_nr = registration_nr

    @property
    def max_speed(self):
        """Gets the max_speed of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The max_speed of this EquipmentModel.  # noqa: E501
        :rtype: int
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this EquipmentModel.

          # noqa: E501

        :param max_speed: The max_speed of this EquipmentModel.  # noqa: E501
        :type: int
        """

        self._max_speed = max_speed

    @property
    def tags(self):
        """Gets the tags of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this EquipmentModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EquipmentModel.

          # noqa: E501

        :param tags: The tags of this EquipmentModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def applied_capacities(self):
        """Gets the applied_capacities of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The applied_capacities of this EquipmentModel.  # noqa: E501
        :rtype: object
        """
        return self._applied_capacities

    @applied_capacities.setter
    def applied_capacities(self, applied_capacities):
        """Sets the applied_capacities of this EquipmentModel.

          # noqa: E501

        :param applied_capacities: The applied_capacities of this EquipmentModel.  # noqa: E501
        :type: object
        """

        self._applied_capacities = applied_capacities

    @property
    def capacities(self):
        """Gets the capacities of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The capacities of this EquipmentModel.  # noqa: E501
        :rtype: list[CapacityModel]
        """
        return self._capacities

    @capacities.setter
    def capacities(self, capacities):
        """Sets the capacities of this EquipmentModel.

          # noqa: E501

        :param capacities: The capacities of this EquipmentModel.  # noqa: E501
        :type: list[CapacityModel]
        """

        self._capacities = capacities

    @property
    def links(self):
        """Gets the links of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The links of this EquipmentModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EquipmentModel.

          # noqa: E501

        :param links: The links of this EquipmentModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this EquipmentModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this EquipmentModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this EquipmentModel.

          # noqa: E501

        :param meta_data: The meta_data of this EquipmentModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipmentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentModel):
            return True

        return self.to_dict() != other.to_dict()
