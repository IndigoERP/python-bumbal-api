# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class CheckAvailabilityOptionsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_impact': 'bool',
        'synchronous': 'bool',
        'include_capacities': 'bool',
        'include_proposed_plan_times': 'bool',
        'include_proposed_driver': 'bool',
        'activity_times_margins_leading': 'bool',
        'apply_cut_off_times': 'bool',
        'consider_historic_traffic_info': 'bool'
    }

    attribute_map = {
        'include_impact': 'include_impact',
        'synchronous': 'synchronous',
        'include_capacities': 'include_capacities',
        'include_proposed_plan_times': 'include_proposed_plan_times',
        'include_proposed_driver': 'include_proposed_driver',
        'activity_times_margins_leading': 'activity_times_margins_leading',
        'apply_cut_off_times': 'apply_cut_off_times',
        'consider_historic_traffic_info': 'consider_historic_traffic_info'
    }

    def __init__(self, include_impact=None, synchronous=None, include_capacities=None, include_proposed_plan_times=None, include_proposed_driver=None, activity_times_margins_leading=None, apply_cut_off_times=None, consider_historic_traffic_info=None, _configuration=None):  # noqa: E501
        """CheckAvailabilityOptionsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._include_impact = None
        self._synchronous = None
        self._include_capacities = None
        self._include_proposed_plan_times = None
        self._include_proposed_driver = None
        self._activity_times_margins_leading = None
        self._apply_cut_off_times = None
        self._consider_historic_traffic_info = None
        self.discriminator = None

        if include_impact is not None:
            self.include_impact = include_impact
        if synchronous is not None:
            self.synchronous = synchronous
        if include_capacities is not None:
            self.include_capacities = include_capacities
        if include_proposed_plan_times is not None:
            self.include_proposed_plan_times = include_proposed_plan_times
        if include_proposed_driver is not None:
            self.include_proposed_driver = include_proposed_driver
        if activity_times_margins_leading is not None:
            self.activity_times_margins_leading = activity_times_margins_leading
        if apply_cut_off_times is not None:
            self.apply_cut_off_times = apply_cut_off_times
        if consider_historic_traffic_info is not None:
            self.consider_historic_traffic_info = consider_historic_traffic_info

    @property
    def include_impact(self):
        """Gets the include_impact of this CheckAvailabilityOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_impact of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_impact

    @include_impact.setter
    def include_impact(self, include_impact):
        """Sets the include_impact of this CheckAvailabilityOptionsModel.

          # noqa: E501

        :param include_impact: The include_impact of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_impact = include_impact

    @property
    def synchronous(self):
        """Gets the synchronous of this CheckAvailabilityOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The synchronous of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._synchronous

    @synchronous.setter
    def synchronous(self, synchronous):
        """Sets the synchronous of this CheckAvailabilityOptionsModel.

          # noqa: E501

        :param synchronous: The synchronous of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._synchronous = synchronous

    @property
    def include_capacities(self):
        """Gets the include_capacities of this CheckAvailabilityOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_capacities of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_capacities

    @include_capacities.setter
    def include_capacities(self, include_capacities):
        """Sets the include_capacities of this CheckAvailabilityOptionsModel.

          # noqa: E501

        :param include_capacities: The include_capacities of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_capacities = include_capacities

    @property
    def include_proposed_plan_times(self):
        """Gets the include_proposed_plan_times of this CheckAvailabilityOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_proposed_plan_times of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_proposed_plan_times

    @include_proposed_plan_times.setter
    def include_proposed_plan_times(self, include_proposed_plan_times):
        """Sets the include_proposed_plan_times of this CheckAvailabilityOptionsModel.

          # noqa: E501

        :param include_proposed_plan_times: The include_proposed_plan_times of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_proposed_plan_times = include_proposed_plan_times

    @property
    def include_proposed_driver(self):
        """Gets the include_proposed_driver of this CheckAvailabilityOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The include_proposed_driver of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_proposed_driver

    @include_proposed_driver.setter
    def include_proposed_driver(self, include_proposed_driver):
        """Sets the include_proposed_driver of this CheckAvailabilityOptionsModel.

          # noqa: E501

        :param include_proposed_driver: The include_proposed_driver of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._include_proposed_driver = include_proposed_driver

    @property
    def activity_times_margins_leading(self):
        """Gets the activity_times_margins_leading of this CheckAvailabilityOptionsModel.  # noqa: E501

        default: true  # noqa: E501

        :return: The activity_times_margins_leading of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._activity_times_margins_leading

    @activity_times_margins_leading.setter
    def activity_times_margins_leading(self, activity_times_margins_leading):
        """Sets the activity_times_margins_leading of this CheckAvailabilityOptionsModel.

        default: true  # noqa: E501

        :param activity_times_margins_leading: The activity_times_margins_leading of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._activity_times_margins_leading = activity_times_margins_leading

    @property
    def apply_cut_off_times(self):
        """Gets the apply_cut_off_times of this CheckAvailabilityOptionsModel.  # noqa: E501

        default: true  # noqa: E501

        :return: The apply_cut_off_times of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._apply_cut_off_times

    @apply_cut_off_times.setter
    def apply_cut_off_times(self, apply_cut_off_times):
        """Sets the apply_cut_off_times of this CheckAvailabilityOptionsModel.

        default: true  # noqa: E501

        :param apply_cut_off_times: The apply_cut_off_times of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._apply_cut_off_times = apply_cut_off_times

    @property
    def consider_historic_traffic_info(self):
        """Gets the consider_historic_traffic_info of this CheckAvailabilityOptionsModel.  # noqa: E501

          # noqa: E501

        :return: The consider_historic_traffic_info of this CheckAvailabilityOptionsModel.  # noqa: E501
        :rtype: bool
        """
        return self._consider_historic_traffic_info

    @consider_historic_traffic_info.setter
    def consider_historic_traffic_info(self, consider_historic_traffic_info):
        """Sets the consider_historic_traffic_info of this CheckAvailabilityOptionsModel.

          # noqa: E501

        :param consider_historic_traffic_info: The consider_historic_traffic_info of this CheckAvailabilityOptionsModel.  # noqa: E501
        :type: bool
        """

        self._consider_historic_traffic_info = consider_historic_traffic_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckAvailabilityOptionsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckAvailabilityOptionsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckAvailabilityOptionsModel):
            return True

        return self.to_dict() != other.to_dict()
