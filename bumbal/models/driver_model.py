# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class DriverModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'pause_id': 'int',
        'uuid': 'str',
        'addresses': 'list[AddressModel]',
        'tag_names': 'list[str]',
        'tag_ids': 'list[int]',
        'first_name': 'str',
        'last_name': 'str',
        'name_prefix': 'str',
        'full_name': 'str',
        'initials': 'str',
        'email': 'str',
        'tags': 'list[TagModel]',
        'zones': 'list[ZoneModel]',
        'zone_names': 'list[str]',
        'zone_ids': 'list[int]',
        'links': 'list[LinkModel]',
        'notes': 'list[NoteModel]',
        'removed': 'bool',
        'active': 'bool',
        'meta_data': 'list[MetaDataModel]',
        'files': 'list[FileModel]',
        'driver_created_at': 'datetime',
        'driver_updated_at': 'datetime',
        'driver_created_by': 'int',
        'driver_updated_by': 'int',
        'updated_by_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'pause_id': 'pause_id',
        'uuid': 'uuid',
        'addresses': 'addresses',
        'tag_names': 'tag_names',
        'tag_ids': 'tag_ids',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'name_prefix': 'name_prefix',
        'full_name': 'full_name',
        'initials': 'initials',
        'email': 'email',
        'tags': 'tags',
        'zones': 'zones',
        'zone_names': 'zone_names',
        'zone_ids': 'zone_ids',
        'links': 'links',
        'notes': 'notes',
        'removed': 'removed',
        'active': 'active',
        'meta_data': 'meta_data',
        'files': 'files',
        'driver_created_at': 'driver_created_at',
        'driver_updated_at': 'driver_updated_at',
        'driver_created_by': 'driver_created_by',
        'driver_updated_by': 'driver_updated_by',
        'updated_by_name': 'updated_by_name'
    }

    def __init__(self, id=None, pause_id=None, uuid=None, addresses=None, tag_names=None, tag_ids=None, first_name=None, last_name=None, name_prefix=None, full_name=None, initials=None, email=None, tags=None, zones=None, zone_names=None, zone_ids=None, links=None, notes=None, removed=None, active=None, meta_data=None, files=None, driver_created_at=None, driver_updated_at=None, driver_created_by=None, driver_updated_by=None, updated_by_name=None, _configuration=None):  # noqa: E501
        """DriverModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._pause_id = None
        self._uuid = None
        self._addresses = None
        self._tag_names = None
        self._tag_ids = None
        self._first_name = None
        self._last_name = None
        self._name_prefix = None
        self._full_name = None
        self._initials = None
        self._email = None
        self._tags = None
        self._zones = None
        self._zone_names = None
        self._zone_ids = None
        self._links = None
        self._notes = None
        self._removed = None
        self._active = None
        self._meta_data = None
        self._files = None
        self._driver_created_at = None
        self._driver_updated_at = None
        self._driver_created_by = None
        self._driver_updated_by = None
        self._updated_by_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if pause_id is not None:
            self.pause_id = pause_id
        if uuid is not None:
            self.uuid = uuid
        if addresses is not None:
            self.addresses = addresses
        if tag_names is not None:
            self.tag_names = tag_names
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if name_prefix is not None:
            self.name_prefix = name_prefix
        if full_name is not None:
            self.full_name = full_name
        if initials is not None:
            self.initials = initials
        if email is not None:
            self.email = email
        if tags is not None:
            self.tags = tags
        if zones is not None:
            self.zones = zones
        if zone_names is not None:
            self.zone_names = zone_names
        if zone_ids is not None:
            self.zone_ids = zone_ids
        if links is not None:
            self.links = links
        if notes is not None:
            self.notes = notes
        if removed is not None:
            self.removed = removed
        if active is not None:
            self.active = active
        if meta_data is not None:
            self.meta_data = meta_data
        if files is not None:
            self.files = files
        if driver_created_at is not None:
            self.driver_created_at = driver_created_at
        if driver_updated_at is not None:
            self.driver_updated_at = driver_updated_at
        if driver_created_by is not None:
            self.driver_created_by = driver_created_by
        if driver_updated_by is not None:
            self.driver_updated_by = driver_updated_by
        if updated_by_name is not None:
            self.updated_by_name = updated_by_name

    @property
    def id(self):
        """Gets the id of this DriverModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this DriverModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DriverModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this DriverModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pause_id(self):
        """Gets the pause_id of this DriverModel.  # noqa: E501

        id of pause scheme to apply  # noqa: E501

        :return: The pause_id of this DriverModel.  # noqa: E501
        :rtype: int
        """
        return self._pause_id

    @pause_id.setter
    def pause_id(self, pause_id):
        """Sets the pause_id of this DriverModel.

        id of pause scheme to apply  # noqa: E501

        :param pause_id: The pause_id of this DriverModel.  # noqa: E501
        :type: int
        """

        self._pause_id = pause_id

    @property
    def uuid(self):
        """Gets the uuid of this DriverModel.  # noqa: E501

        unique per user  # noqa: E501

        :return: The uuid of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DriverModel.

        unique per user  # noqa: E501

        :param uuid: The uuid of this DriverModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def addresses(self):
        """Gets the addresses of this DriverModel.  # noqa: E501

        user address (mostly interesting for drivers)  # noqa: E501

        :return: The addresses of this DriverModel.  # noqa: E501
        :rtype: list[AddressModel]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this DriverModel.

        user address (mostly interesting for drivers)  # noqa: E501

        :param addresses: The addresses of this DriverModel.  # noqa: E501
        :type: list[AddressModel]
        """

        self._addresses = addresses

    @property
    def tag_names(self):
        """Gets the tag_names of this DriverModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this DriverModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this DriverModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this DriverModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def tag_ids(self):
        """Gets the tag_ids of this DriverModel.  # noqa: E501

        Tag type ids  # noqa: E501

        :return: The tag_ids of this DriverModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this DriverModel.

        Tag type ids  # noqa: E501

        :param tag_ids: The tag_ids of this DriverModel.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def first_name(self):
        """Gets the first_name of this DriverModel.  # noqa: E501

        First Name  # noqa: E501

        :return: The first_name of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DriverModel.

        First Name  # noqa: E501

        :param first_name: The first_name of this DriverModel.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this DriverModel.  # noqa: E501

        Last Name  # noqa: E501

        :return: The last_name of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DriverModel.

        Last Name  # noqa: E501

        :param last_name: The last_name of this DriverModel.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def name_prefix(self):
        """Gets the name_prefix of this DriverModel.  # noqa: E501

        Name Prefix  # noqa: E501

        :return: The name_prefix of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this DriverModel.

        Name Prefix  # noqa: E501

        :param name_prefix: The name_prefix of this DriverModel.  # noqa: E501
        :type: str
        """

        self._name_prefix = name_prefix

    @property
    def full_name(self):
        """Gets the full_name of this DriverModel.  # noqa: E501

        Full name  # noqa: E501

        :return: The full_name of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this DriverModel.

        Full name  # noqa: E501

        :param full_name: The full_name of this DriverModel.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def initials(self):
        """Gets the initials of this DriverModel.  # noqa: E501

        Full name  # noqa: E501

        :return: The initials of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this DriverModel.

        Full name  # noqa: E501

        :param initials: The initials of this DriverModel.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def email(self):
        """Gets the email of this DriverModel.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DriverModel.

        Email  # noqa: E501

        :param email: The email of this DriverModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def tags(self):
        """Gets the tags of this DriverModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this DriverModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DriverModel.

          # noqa: E501

        :param tags: The tags of this DriverModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def zones(self):
        """Gets the zones of this DriverModel.  # noqa: E501

          # noqa: E501

        :return: The zones of this DriverModel.  # noqa: E501
        :rtype: list[ZoneModel]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this DriverModel.

          # noqa: E501

        :param zones: The zones of this DriverModel.  # noqa: E501
        :type: list[ZoneModel]
        """

        self._zones = zones

    @property
    def zone_names(self):
        """Gets the zone_names of this DriverModel.  # noqa: E501

        Zone names  # noqa: E501

        :return: The zone_names of this DriverModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_names

    @zone_names.setter
    def zone_names(self, zone_names):
        """Sets the zone_names of this DriverModel.

        Zone names  # noqa: E501

        :param zone_names: The zone_names of this DriverModel.  # noqa: E501
        :type: list[str]
        """

        self._zone_names = zone_names

    @property
    def zone_ids(self):
        """Gets the zone_ids of this DriverModel.  # noqa: E501

        Zone ids  # noqa: E501

        :return: The zone_ids of this DriverModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._zone_ids

    @zone_ids.setter
    def zone_ids(self, zone_ids):
        """Sets the zone_ids of this DriverModel.

        Zone ids  # noqa: E501

        :param zone_ids: The zone_ids of this DriverModel.  # noqa: E501
        :type: list[int]
        """

        self._zone_ids = zone_ids

    @property
    def links(self):
        """Gets the links of this DriverModel.  # noqa: E501

          # noqa: E501

        :return: The links of this DriverModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DriverModel.

          # noqa: E501

        :param links: The links of this DriverModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def notes(self):
        """Gets the notes of this DriverModel.  # noqa: E501

          # noqa: E501

        :return: The notes of this DriverModel.  # noqa: E501
        :rtype: list[NoteModel]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DriverModel.

          # noqa: E501

        :param notes: The notes of this DriverModel.  # noqa: E501
        :type: list[NoteModel]
        """

        self._notes = notes

    @property
    def removed(self):
        """Gets the removed of this DriverModel.  # noqa: E501

        Whether user is removed or not  # noqa: E501

        :return: The removed of this DriverModel.  # noqa: E501
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this DriverModel.

        Whether user is removed or not  # noqa: E501

        :param removed: The removed of this DriverModel.  # noqa: E501
        :type: bool
        """

        self._removed = removed

    @property
    def active(self):
        """Gets the active of this DriverModel.  # noqa: E501

        Whether user is still active or not  # noqa: E501

        :return: The active of this DriverModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DriverModel.

        Whether user is still active or not  # noqa: E501

        :param active: The active of this DriverModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def meta_data(self):
        """Gets the meta_data of this DriverModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this DriverModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this DriverModel.

          # noqa: E501

        :param meta_data: The meta_data of this DriverModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def files(self):
        """Gets the files of this DriverModel.  # noqa: E501

          # noqa: E501

        :return: The files of this DriverModel.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this DriverModel.

          # noqa: E501

        :param files: The files of this DriverModel.  # noqa: E501
        :type: list[FileModel]
        """

        self._files = files

    @property
    def driver_created_at(self):
        """Gets the driver_created_at of this DriverModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The driver_created_at of this DriverModel.  # noqa: E501
        :rtype: datetime
        """
        return self._driver_created_at

    @driver_created_at.setter
    def driver_created_at(self, driver_created_at):
        """Sets the driver_created_at of this DriverModel.

        created_at date time  # noqa: E501

        :param driver_created_at: The driver_created_at of this DriverModel.  # noqa: E501
        :type: datetime
        """

        self._driver_created_at = driver_created_at

    @property
    def driver_updated_at(self):
        """Gets the driver_updated_at of this DriverModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The driver_updated_at of this DriverModel.  # noqa: E501
        :rtype: datetime
        """
        return self._driver_updated_at

    @driver_updated_at.setter
    def driver_updated_at(self, driver_updated_at):
        """Sets the driver_updated_at of this DriverModel.

        updated_at date time  # noqa: E501

        :param driver_updated_at: The driver_updated_at of this DriverModel.  # noqa: E501
        :type: datetime
        """

        self._driver_updated_at = driver_updated_at

    @property
    def driver_created_by(self):
        """Gets the driver_created_by of this DriverModel.  # noqa: E501

        created_by user id  # noqa: E501

        :return: The driver_created_by of this DriverModel.  # noqa: E501
        :rtype: int
        """
        return self._driver_created_by

    @driver_created_by.setter
    def driver_created_by(self, driver_created_by):
        """Sets the driver_created_by of this DriverModel.

        created_by user id  # noqa: E501

        :param driver_created_by: The driver_created_by of this DriverModel.  # noqa: E501
        :type: int
        """

        self._driver_created_by = driver_created_by

    @property
    def driver_updated_by(self):
        """Gets the driver_updated_by of this DriverModel.  # noqa: E501

        created_by user id  # noqa: E501

        :return: The driver_updated_by of this DriverModel.  # noqa: E501
        :rtype: int
        """
        return self._driver_updated_by

    @driver_updated_by.setter
    def driver_updated_by(self, driver_updated_by):
        """Sets the driver_updated_by of this DriverModel.

        created_by user id  # noqa: E501

        :param driver_updated_by: The driver_updated_by of this DriverModel.  # noqa: E501
        :type: int
        """

        self._driver_updated_by = driver_updated_by

    @property
    def updated_by_name(self):
        """Gets the updated_by_name of this DriverModel.  # noqa: E501

        Driver updated by user full name  # noqa: E501

        :return: The updated_by_name of this DriverModel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_name

    @updated_by_name.setter
    def updated_by_name(self, updated_by_name):
        """Sets the updated_by_name of this DriverModel.

        Driver updated by user full name  # noqa: E501

        :param updated_by_name: The updated_by_name of this DriverModel.  # noqa: E501
        :type: str
        """

        self._updated_by_name = updated_by_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DriverModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriverModel):
            return True

        return self.to_dict() != other.to_dict()
