# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class AppliedCapacitiesModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route': 'list[AppliedCapacityModel]',
        'trailer': 'list[AppliedCapacityModel]',
        'vehicle': 'list[AppliedCapacityModel]',
        'equipment': 'list[AppliedCapacityModel]',
        'activity': 'list[AppliedCapacityModel]',
        'totals': 'list[AppliedCapacityModel]'
    }

    attribute_map = {
        'route': 'route',
        'trailer': 'trailer',
        'vehicle': 'vehicle',
        'equipment': 'equipment',
        'activity': 'activity',
        'totals': 'totals'
    }

    def __init__(self, route=None, trailer=None, vehicle=None, equipment=None, activity=None, totals=None, _configuration=None):  # noqa: E501
        """AppliedCapacitiesModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._route = None
        self._trailer = None
        self._vehicle = None
        self._equipment = None
        self._activity = None
        self._totals = None
        self.discriminator = None

        if route is not None:
            self.route = route
        if trailer is not None:
            self.trailer = trailer
        if vehicle is not None:
            self.vehicle = vehicle
        if equipment is not None:
            self.equipment = equipment
        if activity is not None:
            self.activity = activity
        if totals is not None:
            self.totals = totals

    @property
    def route(self):
        """Gets the route of this AppliedCapacitiesModel.  # noqa: E501

          # noqa: E501

        :return: The route of this AppliedCapacitiesModel.  # noqa: E501
        :rtype: list[AppliedCapacityModel]
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this AppliedCapacitiesModel.

          # noqa: E501

        :param route: The route of this AppliedCapacitiesModel.  # noqa: E501
        :type: list[AppliedCapacityModel]
        """

        self._route = route

    @property
    def trailer(self):
        """Gets the trailer of this AppliedCapacitiesModel.  # noqa: E501

          # noqa: E501

        :return: The trailer of this AppliedCapacitiesModel.  # noqa: E501
        :rtype: list[AppliedCapacityModel]
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """Sets the trailer of this AppliedCapacitiesModel.

          # noqa: E501

        :param trailer: The trailer of this AppliedCapacitiesModel.  # noqa: E501
        :type: list[AppliedCapacityModel]
        """

        self._trailer = trailer

    @property
    def vehicle(self):
        """Gets the vehicle of this AppliedCapacitiesModel.  # noqa: E501

          # noqa: E501

        :return: The vehicle of this AppliedCapacitiesModel.  # noqa: E501
        :rtype: list[AppliedCapacityModel]
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this AppliedCapacitiesModel.

          # noqa: E501

        :param vehicle: The vehicle of this AppliedCapacitiesModel.  # noqa: E501
        :type: list[AppliedCapacityModel]
        """

        self._vehicle = vehicle

    @property
    def equipment(self):
        """Gets the equipment of this AppliedCapacitiesModel.  # noqa: E501

          # noqa: E501

        :return: The equipment of this AppliedCapacitiesModel.  # noqa: E501
        :rtype: list[AppliedCapacityModel]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this AppliedCapacitiesModel.

          # noqa: E501

        :param equipment: The equipment of this AppliedCapacitiesModel.  # noqa: E501
        :type: list[AppliedCapacityModel]
        """

        self._equipment = equipment

    @property
    def activity(self):
        """Gets the activity of this AppliedCapacitiesModel.  # noqa: E501

          # noqa: E501

        :return: The activity of this AppliedCapacitiesModel.  # noqa: E501
        :rtype: list[AppliedCapacityModel]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this AppliedCapacitiesModel.

          # noqa: E501

        :param activity: The activity of this AppliedCapacitiesModel.  # noqa: E501
        :type: list[AppliedCapacityModel]
        """

        self._activity = activity

    @property
    def totals(self):
        """Gets the totals of this AppliedCapacitiesModel.  # noqa: E501

          # noqa: E501

        :return: The totals of this AppliedCapacitiesModel.  # noqa: E501
        :rtype: list[AppliedCapacityModel]
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this AppliedCapacitiesModel.

          # noqa: E501

        :param totals: The totals of this AppliedCapacitiesModel.  # noqa: E501
        :type: list[AppliedCapacityModel]
        """

        self._totals = totals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppliedCapacitiesModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppliedCapacitiesModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppliedCapacitiesModel):
            return True

        return self.to_dict() != other.to_dict()
