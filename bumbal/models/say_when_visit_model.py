# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class SayWhenVisitModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'current_state': 'str',
        'status': 'str',
        'offered_by_owner': 'str',
        'preferences_received': 'str',
        'planned_by_partner': 'str',
        'completed_by_partner': 'str'
    }

    attribute_map = {
        'id': 'id',
        'current_state': 'current_state',
        'status': 'status',
        'offered_by_owner': 'offered_by_owner',
        'preferences_received': 'preferences_received',
        'planned_by_partner': 'planned_by_partner',
        'completed_by_partner': 'completed_by_partner'
    }

    def __init__(self, id=None, current_state=None, status=None, offered_by_owner=None, preferences_received=None, planned_by_partner=None, completed_by_partner=None, _configuration=None):  # noqa: E501
        """SayWhenVisitModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._current_state = None
        self._status = None
        self._offered_by_owner = None
        self._preferences_received = None
        self._planned_by_partner = None
        self._completed_by_partner = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if current_state is not None:
            self.current_state = current_state
        if status is not None:
            self.status = status
        if offered_by_owner is not None:
            self.offered_by_owner = offered_by_owner
        if preferences_received is not None:
            self.preferences_received = preferences_received
        if planned_by_partner is not None:
            self.planned_by_partner = planned_by_partner
        if completed_by_partner is not None:
            self.completed_by_partner = completed_by_partner

    @property
    def id(self):
        """Gets the id of this SayWhenVisitModel.  # noqa: E501

        SayWhen Visit ID  # noqa: E501

        :return: The id of this SayWhenVisitModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SayWhenVisitModel.

        SayWhen Visit ID  # noqa: E501

        :param id: The id of this SayWhenVisitModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def current_state(self):
        """Gets the current_state of this SayWhenVisitModel.  # noqa: E501

          # noqa: E501

        :return: The current_state of this SayWhenVisitModel.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this SayWhenVisitModel.

          # noqa: E501

        :param current_state: The current_state of this SayWhenVisitModel.  # noqa: E501
        :type: str
        """

        self._current_state = current_state

    @property
    def status(self):
        """Gets the status of this SayWhenVisitModel.  # noqa: E501

          # noqa: E501

        :return: The status of this SayWhenVisitModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SayWhenVisitModel.

          # noqa: E501

        :param status: The status of this SayWhenVisitModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def offered_by_owner(self):
        """Gets the offered_by_owner of this SayWhenVisitModel.  # noqa: E501

        offered_by_owner  # noqa: E501

        :return: The offered_by_owner of this SayWhenVisitModel.  # noqa: E501
        :rtype: str
        """
        return self._offered_by_owner

    @offered_by_owner.setter
    def offered_by_owner(self, offered_by_owner):
        """Sets the offered_by_owner of this SayWhenVisitModel.

        offered_by_owner  # noqa: E501

        :param offered_by_owner: The offered_by_owner of this SayWhenVisitModel.  # noqa: E501
        :type: str
        """

        self._offered_by_owner = offered_by_owner

    @property
    def preferences_received(self):
        """Gets the preferences_received of this SayWhenVisitModel.  # noqa: E501

        preferences_received  # noqa: E501

        :return: The preferences_received of this SayWhenVisitModel.  # noqa: E501
        :rtype: str
        """
        return self._preferences_received

    @preferences_received.setter
    def preferences_received(self, preferences_received):
        """Sets the preferences_received of this SayWhenVisitModel.

        preferences_received  # noqa: E501

        :param preferences_received: The preferences_received of this SayWhenVisitModel.  # noqa: E501
        :type: str
        """

        self._preferences_received = preferences_received

    @property
    def planned_by_partner(self):
        """Gets the planned_by_partner of this SayWhenVisitModel.  # noqa: E501

        planned_by_partner  # noqa: E501

        :return: The planned_by_partner of this SayWhenVisitModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_by_partner

    @planned_by_partner.setter
    def planned_by_partner(self, planned_by_partner):
        """Sets the planned_by_partner of this SayWhenVisitModel.

        planned_by_partner  # noqa: E501

        :param planned_by_partner: The planned_by_partner of this SayWhenVisitModel.  # noqa: E501
        :type: str
        """

        self._planned_by_partner = planned_by_partner

    @property
    def completed_by_partner(self):
        """Gets the completed_by_partner of this SayWhenVisitModel.  # noqa: E501

        completed_by_partner  # noqa: E501

        :return: The completed_by_partner of this SayWhenVisitModel.  # noqa: E501
        :rtype: str
        """
        return self._completed_by_partner

    @completed_by_partner.setter
    def completed_by_partner(self, completed_by_partner):
        """Sets the completed_by_partner of this SayWhenVisitModel.

        completed_by_partner  # noqa: E501

        :param completed_by_partner: The completed_by_partner of this SayWhenVisitModel.  # noqa: E501
        :type: str
        """

        self._completed_by_partner = completed_by_partner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SayWhenVisitModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SayWhenVisitModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SayWhenVisitModel):
            return True

        return self.to_dict() != other.to_dict()
