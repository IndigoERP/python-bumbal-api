# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class QuestionnaireAnswerModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'active': 'bool',
        'questionnaire_id': 'int',
        'questionnaire_question_id': 'int',
        'order': 'int',
        'question': 'str',
        'answer': 'str',
        'chosen_options': 'list[int]',
        'answer_options': 'list[int]',
        'questionnaire_question_type_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'questionnaire_id': 'questionnaire_id',
        'questionnaire_question_id': 'questionnaire_question_id',
        'order': 'order',
        'question': 'question',
        'answer': 'answer',
        'chosen_options': 'chosen_options',
        'answer_options': 'answer_options',
        'questionnaire_question_type_name': 'questionnaire_question_type_name'
    }

    def __init__(self, id=None, active=None, questionnaire_id=None, questionnaire_question_id=None, order=None, question=None, answer=None, chosen_options=None, answer_options=None, questionnaire_question_type_name=None, _configuration=None):  # noqa: E501
        """QuestionnaireAnswerModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._active = None
        self._questionnaire_id = None
        self._questionnaire_question_id = None
        self._order = None
        self._question = None
        self._answer = None
        self._chosen_options = None
        self._answer_options = None
        self._questionnaire_question_type_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        if questionnaire_id is not None:
            self.questionnaire_id = questionnaire_id
        if questionnaire_question_id is not None:
            self.questionnaire_question_id = questionnaire_question_id
        if order is not None:
            self.order = order
        if question is not None:
            self.question = question
        if answer is not None:
            self.answer = answer
        if chosen_options is not None:
            self.chosen_options = chosen_options
        if answer_options is not None:
            self.answer_options = answer_options
        if questionnaire_question_type_name is not None:
            self.questionnaire_question_type_name = questionnaire_question_type_name

    @property
    def id(self):
        """Gets the id of this QuestionnaireAnswerModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionnaireAnswerModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this QuestionnaireAnswerModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this QuestionnaireAnswerModel.  # noqa: E501

        if active=0: QuestionnaireAnswer has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this QuestionnaireAnswerModel.

        if active=0: QuestionnaireAnswer has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this QuestionnaireAnswerModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this QuestionnaireAnswerModel.  # noqa: E501

        Questionnaire ID  # noqa: E501

        :return: The questionnaire_id of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: int
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this QuestionnaireAnswerModel.

        Questionnaire ID  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this QuestionnaireAnswerModel.  # noqa: E501
        :type: int
        """

        self._questionnaire_id = questionnaire_id

    @property
    def questionnaire_question_id(self):
        """Gets the questionnaire_question_id of this QuestionnaireAnswerModel.  # noqa: E501

        Questionnaire Question ID  # noqa: E501

        :return: The questionnaire_question_id of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: int
        """
        return self._questionnaire_question_id

    @questionnaire_question_id.setter
    def questionnaire_question_id(self, questionnaire_question_id):
        """Sets the questionnaire_question_id of this QuestionnaireAnswerModel.

        Questionnaire Question ID  # noqa: E501

        :param questionnaire_question_id: The questionnaire_question_id of this QuestionnaireAnswerModel.  # noqa: E501
        :type: int
        """

        self._questionnaire_question_id = questionnaire_question_id

    @property
    def order(self):
        """Gets the order of this QuestionnaireAnswerModel.  # noqa: E501

        Order  # noqa: E501

        :return: The order of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this QuestionnaireAnswerModel.

        Order  # noqa: E501

        :param order: The order of this QuestionnaireAnswerModel.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def question(self):
        """Gets the question of this QuestionnaireAnswerModel.  # noqa: E501

        Textuale representation of the question  # noqa: E501

        :return: The question of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this QuestionnaireAnswerModel.

        Textuale representation of the question  # noqa: E501

        :param question: The question of this QuestionnaireAnswerModel.  # noqa: E501
        :type: str
        """

        self._question = question

    @property
    def answer(self):
        """Gets the answer of this QuestionnaireAnswerModel.  # noqa: E501

        Textuale representation of the answer  # noqa: E501

        :return: The answer of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this QuestionnaireAnswerModel.

        Textuale representation of the answer  # noqa: E501

        :param answer: The answer of this QuestionnaireAnswerModel.  # noqa: E501
        :type: str
        """

        self._answer = answer

    @property
    def chosen_options(self):
        """Gets the chosen_options of this QuestionnaireAnswerModel.  # noqa: E501

        Chosen options id's  # noqa: E501

        :return: The chosen_options of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._chosen_options

    @chosen_options.setter
    def chosen_options(self, chosen_options):
        """Sets the chosen_options of this QuestionnaireAnswerModel.

        Chosen options id's  # noqa: E501

        :param chosen_options: The chosen_options of this QuestionnaireAnswerModel.  # noqa: E501
        :type: list[int]
        """

        self._chosen_options = chosen_options

    @property
    def answer_options(self):
        """Gets the answer_options of this QuestionnaireAnswerModel.  # noqa: E501

        Answer options  # noqa: E501

        :return: The answer_options of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._answer_options

    @answer_options.setter
    def answer_options(self, answer_options):
        """Sets the answer_options of this QuestionnaireAnswerModel.

        Answer options  # noqa: E501

        :param answer_options: The answer_options of this QuestionnaireAnswerModel.  # noqa: E501
        :type: list[int]
        """

        self._answer_options = answer_options

    @property
    def questionnaire_question_type_name(self):
        """Gets the questionnaire_question_type_name of this QuestionnaireAnswerModel.  # noqa: E501

        Question type name  # noqa: E501

        :return: The questionnaire_question_type_name of this QuestionnaireAnswerModel.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_question_type_name

    @questionnaire_question_type_name.setter
    def questionnaire_question_type_name(self, questionnaire_question_type_name):
        """Sets the questionnaire_question_type_name of this QuestionnaireAnswerModel.

        Question type name  # noqa: E501

        :param questionnaire_question_type_name: The questionnaire_question_type_name of this QuestionnaireAnswerModel.  # noqa: E501
        :type: str
        """

        self._questionnaire_question_type_name = questionnaire_question_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionnaireAnswerModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionnaireAnswerModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuestionnaireAnswerModel):
            return True

        return self.to_dict() != other.to_dict()
