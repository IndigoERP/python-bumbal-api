# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class NoteModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'object_type_name': 'str',
        'object_id': 'int',
        'object_link': 'LinkModel',
        'note_category_id': 'int',
        'note_category_name': 'str',
        'visible_for_driver': 'bool',
        'title': 'str',
        'updated_by_name': 'str',
        'content': 'str',
        'files': 'list[FileModel]',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]',
        'active': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'created_by': 'int',
        'updated_by': 'int'
    }

    attribute_map = {
        'id': 'id',
        'object_type_name': 'object_type_name',
        'object_id': 'object_id',
        'object_link': 'object_link',
        'note_category_id': 'note_category_id',
        'note_category_name': 'note_category_name',
        'visible_for_driver': 'visible_for_driver',
        'title': 'title',
        'updated_by_name': 'updated_by_name',
        'content': 'content',
        'files': 'files',
        'links': 'links',
        'meta_data': 'meta_data',
        'active': 'active',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'created_by': 'created_by',
        'updated_by': 'updated_by'
    }

    def __init__(self, id=None, object_type_name=None, object_id=None, object_link=None, note_category_id=None, note_category_name=None, visible_for_driver=None, title=None, updated_by_name=None, content=None, files=None, links=None, meta_data=None, active=None, created_at=None, updated_at=None, created_by=None, updated_by=None, _configuration=None):  # noqa: E501
        """NoteModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._object_type_name = None
        self._object_id = None
        self._object_link = None
        self._note_category_id = None
        self._note_category_name = None
        self._visible_for_driver = None
        self._title = None
        self._updated_by_name = None
        self._content = None
        self._files = None
        self._links = None
        self._meta_data = None
        self._active = None
        self._created_at = None
        self._updated_at = None
        self._created_by = None
        self._updated_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if object_type_name is not None:
            self.object_type_name = object_type_name
        if object_id is not None:
            self.object_id = object_id
        if object_link is not None:
            self.object_link = object_link
        if note_category_id is not None:
            self.note_category_id = note_category_id
        if note_category_name is not None:
            self.note_category_name = note_category_name
        if visible_for_driver is not None:
            self.visible_for_driver = visible_for_driver
        if title is not None:
            self.title = title
        if updated_by_name is not None:
            self.updated_by_name = updated_by_name
        if content is not None:
            self.content = content
        if files is not None:
            self.files = files
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data
        if active is not None:
            self.active = active
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def id(self):
        """Gets the id of this NoteModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this NoteModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this NoteModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def object_type_name(self):
        """Gets the object_type_name of this NoteModel.  # noqa: E501

        Object type name  # noqa: E501

        :return: The object_type_name of this NoteModel.  # noqa: E501
        :rtype: str
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this NoteModel.

        Object type name  # noqa: E501

        :param object_type_name: The object_type_name of this NoteModel.  # noqa: E501
        :type: str
        """

        self._object_type_name = object_type_name

    @property
    def object_id(self):
        """Gets the object_id of this NoteModel.  # noqa: E501

        Object ID  # noqa: E501

        :return: The object_id of this NoteModel.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this NoteModel.

        Object ID  # noqa: E501

        :param object_id: The object_id of this NoteModel.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def object_link(self):
        """Gets the object_link of this NoteModel.  # noqa: E501

          # noqa: E501

        :return: The object_link of this NoteModel.  # noqa: E501
        :rtype: LinkModel
        """
        return self._object_link

    @object_link.setter
    def object_link(self, object_link):
        """Sets the object_link of this NoteModel.

          # noqa: E501

        :param object_link: The object_link of this NoteModel.  # noqa: E501
        :type: LinkModel
        """

        self._object_link = object_link

    @property
    def note_category_id(self):
        """Gets the note_category_id of this NoteModel.  # noqa: E501

        Note category id  # noqa: E501

        :return: The note_category_id of this NoteModel.  # noqa: E501
        :rtype: int
        """
        return self._note_category_id

    @note_category_id.setter
    def note_category_id(self, note_category_id):
        """Sets the note_category_id of this NoteModel.

        Note category id  # noqa: E501

        :param note_category_id: The note_category_id of this NoteModel.  # noqa: E501
        :type: int
        """

        self._note_category_id = note_category_id

    @property
    def note_category_name(self):
        """Gets the note_category_name of this NoteModel.  # noqa: E501

        Note category name  # noqa: E501

        :return: The note_category_name of this NoteModel.  # noqa: E501
        :rtype: str
        """
        return self._note_category_name

    @note_category_name.setter
    def note_category_name(self, note_category_name):
        """Sets the note_category_name of this NoteModel.

        Note category name  # noqa: E501

        :param note_category_name: The note_category_name of this NoteModel.  # noqa: E501
        :type: str
        """

        self._note_category_name = note_category_name

    @property
    def visible_for_driver(self):
        """Gets the visible_for_driver of this NoteModel.  # noqa: E501

        Notition is visible in driver App  # noqa: E501

        :return: The visible_for_driver of this NoteModel.  # noqa: E501
        :rtype: bool
        """
        return self._visible_for_driver

    @visible_for_driver.setter
    def visible_for_driver(self, visible_for_driver):
        """Sets the visible_for_driver of this NoteModel.

        Notition is visible in driver App  # noqa: E501

        :param visible_for_driver: The visible_for_driver of this NoteModel.  # noqa: E501
        :type: bool
        """

        self._visible_for_driver = visible_for_driver

    @property
    def title(self):
        """Gets the title of this NoteModel.  # noqa: E501

        Note title  # noqa: E501

        :return: The title of this NoteModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NoteModel.

        Note title  # noqa: E501

        :param title: The title of this NoteModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_by_name(self):
        """Gets the updated_by_name of this NoteModel.  # noqa: E501

        Note updated by user full name  # noqa: E501

        :return: The updated_by_name of this NoteModel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_name

    @updated_by_name.setter
    def updated_by_name(self, updated_by_name):
        """Sets the updated_by_name of this NoteModel.

        Note updated by user full name  # noqa: E501

        :param updated_by_name: The updated_by_name of this NoteModel.  # noqa: E501
        :type: str
        """

        self._updated_by_name = updated_by_name

    @property
    def content(self):
        """Gets the content of this NoteModel.  # noqa: E501

        Note content  # noqa: E501

        :return: The content of this NoteModel.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NoteModel.

        Note content  # noqa: E501

        :param content: The content of this NoteModel.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def files(self):
        """Gets the files of this NoteModel.  # noqa: E501

          # noqa: E501

        :return: The files of this NoteModel.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this NoteModel.

          # noqa: E501

        :param files: The files of this NoteModel.  # noqa: E501
        :type: list[FileModel]
        """

        self._files = files

    @property
    def links(self):
        """Gets the links of this NoteModel.  # noqa: E501

          # noqa: E501

        :return: The links of this NoteModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this NoteModel.

          # noqa: E501

        :param links: The links of this NoteModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this NoteModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this NoteModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this NoteModel.

          # noqa: E501

        :param meta_data: The meta_data of this NoteModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def active(self):
        """Gets the active of this NoteModel.  # noqa: E501

        if active=0: note has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this NoteModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this NoteModel.

        if active=0: note has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this NoteModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this NoteModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The created_at of this NoteModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NoteModel.

        created_at date time  # noqa: E501

        :param created_at: The created_at of this NoteModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this NoteModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The updated_at of this NoteModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NoteModel.

        updated_at date time  # noqa: E501

        :param updated_at: The updated_at of this NoteModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def created_by(self):
        """Gets the created_by of this NoteModel.  # noqa: E501

        created_by user id  # noqa: E501

        :return: The created_by of this NoteModel.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this NoteModel.

        created_by user id  # noqa: E501

        :param created_by: The created_by of this NoteModel.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this NoteModel.  # noqa: E501

        updated_by user id  # noqa: E501

        :return: The updated_by of this NoteModel.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this NoteModel.

        updated_by user id  # noqa: E501

        :param updated_by: The updated_by of this NoteModel.  # noqa: E501
        :type: int
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NoteModel):
            return True

        return self.to_dict() != other.to_dict()
