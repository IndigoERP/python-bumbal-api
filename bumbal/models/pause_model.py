# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class PauseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'drive_time_mode': 'bool',
        'name': 'str',
        'initial_driving_duration': 'int',
        'max_driving_duration': 'int',
        'pause_duration': 'int',
        'possible_split': 'list[int]',
        'earliest_time': 'str',
        'latest_time': 'str',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]'
    }

    attribute_map = {
        'id': 'id',
        'drive_time_mode': 'drive_time_mode',
        'name': 'name',
        'initial_driving_duration': 'initial_driving_duration',
        'max_driving_duration': 'max_driving_duration',
        'pause_duration': 'pause_duration',
        'possible_split': 'possible_split',
        'earliest_time': 'earliest_time',
        'latest_time': 'latest_time',
        'links': 'links',
        'meta_data': 'meta_data'
    }

    def __init__(self, id=None, drive_time_mode=None, name=None, initial_driving_duration=None, max_driving_duration=None, pause_duration=None, possible_split=None, earliest_time=None, latest_time=None, links=None, meta_data=None, _configuration=None):  # noqa: E501
        """PauseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._drive_time_mode = None
        self._name = None
        self._initial_driving_duration = None
        self._max_driving_duration = None
        self._pause_duration = None
        self._possible_split = None
        self._earliest_time = None
        self._latest_time = None
        self._links = None
        self._meta_data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if drive_time_mode is not None:
            self.drive_time_mode = drive_time_mode
        if name is not None:
            self.name = name
        if initial_driving_duration is not None:
            self.initial_driving_duration = initial_driving_duration
        if max_driving_duration is not None:
            self.max_driving_duration = max_driving_duration
        if pause_duration is not None:
            self.pause_duration = pause_duration
        if possible_split is not None:
            self.possible_split = possible_split
        if earliest_time is not None:
            self.earliest_time = earliest_time
        if latest_time is not None:
            self.latest_time = latest_time
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data

    @property
    def id(self):
        """Gets the id of this PauseModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this PauseModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PauseModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this PauseModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def drive_time_mode(self):
        """Gets the drive_time_mode of this PauseModel.  # noqa: E501

        Determines if pause is a drivetime pause or a timewindow pause  # noqa: E501

        :return: The drive_time_mode of this PauseModel.  # noqa: E501
        :rtype: bool
        """
        return self._drive_time_mode

    @drive_time_mode.setter
    def drive_time_mode(self, drive_time_mode):
        """Sets the drive_time_mode of this PauseModel.

        Determines if pause is a drivetime pause or a timewindow pause  # noqa: E501

        :param drive_time_mode: The drive_time_mode of this PauseModel.  # noqa: E501
        :type: bool
        """

        self._drive_time_mode = drive_time_mode

    @property
    def name(self):
        """Gets the name of this PauseModel.  # noqa: E501

        Name of pause  # noqa: E501

        :return: The name of this PauseModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PauseModel.

        Name of pause  # noqa: E501

        :param name: The name of this PauseModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def initial_driving_duration(self):
        """Gets the initial_driving_duration of this PauseModel.  # noqa: E501

        initial driving time in minutes until first possibility of starting pause. (Only used in servicewindow pause)  # noqa: E501

        :return: The initial_driving_duration of this PauseModel.  # noqa: E501
        :rtype: int
        """
        return self._initial_driving_duration

    @initial_driving_duration.setter
    def initial_driving_duration(self, initial_driving_duration):
        """Sets the initial_driving_duration of this PauseModel.

        initial driving time in minutes until first possibility of starting pause. (Only used in servicewindow pause)  # noqa: E501

        :param initial_driving_duration: The initial_driving_duration of this PauseModel.  # noqa: E501
        :type: int
        """

        self._initial_driving_duration = initial_driving_duration

    @property
    def max_driving_duration(self):
        """Gets the max_driving_duration of this PauseModel.  # noqa: E501

        max driving time in minutes before a pause must be started  # noqa: E501

        :return: The max_driving_duration of this PauseModel.  # noqa: E501
        :rtype: int
        """
        return self._max_driving_duration

    @max_driving_duration.setter
    def max_driving_duration(self, max_driving_duration):
        """Sets the max_driving_duration of this PauseModel.

        max driving time in minutes before a pause must be started  # noqa: E501

        :param max_driving_duration: The max_driving_duration of this PauseModel.  # noqa: E501
        :type: int
        """

        self._max_driving_duration = max_driving_duration

    @property
    def pause_duration(self):
        """Gets the pause_duration of this PauseModel.  # noqa: E501

        (total) duration for pause(s) in minutes  # noqa: E501

        :return: The pause_duration of this PauseModel.  # noqa: E501
        :rtype: int
        """
        return self._pause_duration

    @pause_duration.setter
    def pause_duration(self, pause_duration):
        """Sets the pause_duration of this PauseModel.

        (total) duration for pause(s) in minutes  # noqa: E501

        :param pause_duration: The pause_duration of this PauseModel.  # noqa: E501
        :type: int
        """

        self._pause_duration = pause_duration

    @property
    def possible_split(self):
        """Gets the possible_split of this PauseModel.  # noqa: E501

        A list of durations in minutes by which the total duration of the pause may be split. (Only used in servicewindow pause)  # noqa: E501

        :return: The possible_split of this PauseModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._possible_split

    @possible_split.setter
    def possible_split(self, possible_split):
        """Sets the possible_split of this PauseModel.

        A list of durations in minutes by which the total duration of the pause may be split. (Only used in servicewindow pause)  # noqa: E501

        :param possible_split: The possible_split of this PauseModel.  # noqa: E501
        :type: list[int]
        """

        self._possible_split = possible_split

    @property
    def earliest_time(self):
        """Gets the earliest_time of this PauseModel.  # noqa: E501

        Earliest time. (Only used in drivetime pause)  # noqa: E501

        :return: The earliest_time of this PauseModel.  # noqa: E501
        :rtype: str
        """
        return self._earliest_time

    @earliest_time.setter
    def earliest_time(self, earliest_time):
        """Sets the earliest_time of this PauseModel.

        Earliest time. (Only used in drivetime pause)  # noqa: E501

        :param earliest_time: The earliest_time of this PauseModel.  # noqa: E501
        :type: str
        """

        self._earliest_time = earliest_time

    @property
    def latest_time(self):
        """Gets the latest_time of this PauseModel.  # noqa: E501

        Latest time. (Only used in drivetime pause)  # noqa: E501

        :return: The latest_time of this PauseModel.  # noqa: E501
        :rtype: str
        """
        return self._latest_time

    @latest_time.setter
    def latest_time(self, latest_time):
        """Sets the latest_time of this PauseModel.

        Latest time. (Only used in drivetime pause)  # noqa: E501

        :param latest_time: The latest_time of this PauseModel.  # noqa: E501
        :type: str
        """

        self._latest_time = latest_time

    @property
    def links(self):
        """Gets the links of this PauseModel.  # noqa: E501

          # noqa: E501

        :return: The links of this PauseModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PauseModel.

          # noqa: E501

        :param links: The links of this PauseModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this PauseModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this PauseModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this PauseModel.

          # noqa: E501

        :param meta_data: The meta_data of this PauseModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PauseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PauseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PauseModel):
            return True

        return self.to_dict() != other.to_dict()
