# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class PartyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'party_type_name': 'str',
        'party_type_id': 'int',
        'name_1': 'str',
        'name_2': 'str',
        'nr': 'str',
        'contact_person': 'str',
        'url': 'str',
        'tags': 'list[TagModel]',
        'tag_names': 'list[str]',
        'tag_ids': 'list[int]',
        'links': 'list[LinkModel]',
        'meta_data': 'list[MetaDataModel]',
        'notes': 'list[NoteModel]',
        'files': 'list[FileModel]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'party_created_by_user': 'UsersModel',
        'party_updated_by_user': 'UsersModel'
    }

    attribute_map = {
        'id': 'id',
        'party_type_name': 'party_type_name',
        'party_type_id': 'party_type_id',
        'name_1': 'name_1',
        'name_2': 'name_2',
        'nr': 'nr',
        'contact_person': 'contact_person',
        'url': 'url',
        'tags': 'tags',
        'tag_names': 'tag_names',
        'tag_ids': 'tag_ids',
        'links': 'links',
        'meta_data': 'meta_data',
        'notes': 'notes',
        'files': 'files',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'party_created_by_user': 'party_created_by_user',
        'party_updated_by_user': 'party_updated_by_user'
    }

    def __init__(self, id=None, party_type_name=None, party_type_id=None, name_1=None, name_2=None, nr=None, contact_person=None, url=None, tags=None, tag_names=None, tag_ids=None, links=None, meta_data=None, notes=None, files=None, created_at=None, updated_at=None, party_created_by_user=None, party_updated_by_user=None, _configuration=None):  # noqa: E501
        """PartyModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._party_type_name = None
        self._party_type_id = None
        self._name_1 = None
        self._name_2 = None
        self._nr = None
        self._contact_person = None
        self._url = None
        self._tags = None
        self._tag_names = None
        self._tag_ids = None
        self._links = None
        self._meta_data = None
        self._notes = None
        self._files = None
        self._created_at = None
        self._updated_at = None
        self._party_created_by_user = None
        self._party_updated_by_user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if party_type_name is not None:
            self.party_type_name = party_type_name
        if party_type_id is not None:
            self.party_type_id = party_type_id
        if name_1 is not None:
            self.name_1 = name_1
        if name_2 is not None:
            self.name_2 = name_2
        if nr is not None:
            self.nr = nr
        if contact_person is not None:
            self.contact_person = contact_person
        if url is not None:
            self.url = url
        if tags is not None:
            self.tags = tags
        if tag_names is not None:
            self.tag_names = tag_names
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if links is not None:
            self.links = links
        if meta_data is not None:
            self.meta_data = meta_data
        if notes is not None:
            self.notes = notes
        if files is not None:
            self.files = files
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if party_created_by_user is not None:
            self.party_created_by_user = party_created_by_user
        if party_updated_by_user is not None:
            self.party_updated_by_user = party_updated_by_user

    @property
    def id(self):
        """Gets the id of this PartyModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this PartyModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartyModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this PartyModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def party_type_name(self):
        """Gets the party_type_name of this PartyModel.  # noqa: E501

        Type of this party  # noqa: E501

        :return: The party_type_name of this PartyModel.  # noqa: E501
        :rtype: str
        """
        return self._party_type_name

    @party_type_name.setter
    def party_type_name(self, party_type_name):
        """Sets the party_type_name of this PartyModel.

        Type of this party  # noqa: E501

        :param party_type_name: The party_type_name of this PartyModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["contractor", "booking"]  # noqa: E501
        if (self._configuration.client_side_validation and
                party_type_name not in allowed_values):
            raise ValueError(
                "Invalid value for `party_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(party_type_name, allowed_values)
            )

        self._party_type_name = party_type_name

    @property
    def party_type_id(self):
        """Gets the party_type_id of this PartyModel.  # noqa: E501

        PartyTypeID of this party. 2 = contractor, 3 = booking  # noqa: E501

        :return: The party_type_id of this PartyModel.  # noqa: E501
        :rtype: int
        """
        return self._party_type_id

    @party_type_id.setter
    def party_type_id(self, party_type_id):
        """Sets the party_type_id of this PartyModel.

        PartyTypeID of this party. 2 = contractor, 3 = booking  # noqa: E501

        :param party_type_id: The party_type_id of this PartyModel.  # noqa: E501
        :type: int
        """

        self._party_type_id = party_type_id

    @property
    def name_1(self):
        """Gets the name_1 of this PartyModel.  # noqa: E501

        Name 1 for party  # noqa: E501

        :return: The name_1 of this PartyModel.  # noqa: E501
        :rtype: str
        """
        return self._name_1

    @name_1.setter
    def name_1(self, name_1):
        """Sets the name_1 of this PartyModel.

        Name 1 for party  # noqa: E501

        :param name_1: The name_1 of this PartyModel.  # noqa: E501
        :type: str
        """

        self._name_1 = name_1

    @property
    def name_2(self):
        """Gets the name_2 of this PartyModel.  # noqa: E501

        Name 2 for party  # noqa: E501

        :return: The name_2 of this PartyModel.  # noqa: E501
        :rtype: str
        """
        return self._name_2

    @name_2.setter
    def name_2(self, name_2):
        """Sets the name_2 of this PartyModel.

        Name 2 for party  # noqa: E501

        :param name_2: The name_2 of this PartyModel.  # noqa: E501
        :type: str
        """

        self._name_2 = name_2

    @property
    def nr(self):
        """Gets the nr of this PartyModel.  # noqa: E501

        Number of this party  # noqa: E501

        :return: The nr of this PartyModel.  # noqa: E501
        :rtype: str
        """
        return self._nr

    @nr.setter
    def nr(self, nr):
        """Sets the nr of this PartyModel.

        Number of this party  # noqa: E501

        :param nr: The nr of this PartyModel.  # noqa: E501
        :type: str
        """

        self._nr = nr

    @property
    def contact_person(self):
        """Gets the contact_person of this PartyModel.  # noqa: E501

        Contact person for party  # noqa: E501

        :return: The contact_person of this PartyModel.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this PartyModel.

        Contact person for party  # noqa: E501

        :param contact_person: The contact_person of this PartyModel.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def url(self):
        """Gets the url of this PartyModel.  # noqa: E501

        Url for party website  # noqa: E501

        :return: The url of this PartyModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PartyModel.

        Url for party website  # noqa: E501

        :param url: The url of this PartyModel.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def tags(self):
        """Gets the tags of this PartyModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this PartyModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PartyModel.

          # noqa: E501

        :param tags: The tags of this PartyModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def tag_names(self):
        """Gets the tag_names of this PartyModel.  # noqa: E501

        Tag names  # noqa: E501

        :return: The tag_names of this PartyModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this PartyModel.

        Tag names  # noqa: E501

        :param tag_names: The tag_names of this PartyModel.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def tag_ids(self):
        """Gets the tag_ids of this PartyModel.  # noqa: E501

        Tag ids  # noqa: E501

        :return: The tag_ids of this PartyModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this PartyModel.

        Tag ids  # noqa: E501

        :param tag_ids: The tag_ids of this PartyModel.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def links(self):
        """Gets the links of this PartyModel.  # noqa: E501

          # noqa: E501

        :return: The links of this PartyModel.  # noqa: E501
        :rtype: list[LinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PartyModel.

          # noqa: E501

        :param links: The links of this PartyModel.  # noqa: E501
        :type: list[LinkModel]
        """

        self._links = links

    @property
    def meta_data(self):
        """Gets the meta_data of this PartyModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this PartyModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this PartyModel.

          # noqa: E501

        :param meta_data: The meta_data of this PartyModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def notes(self):
        """Gets the notes of this PartyModel.  # noqa: E501

          # noqa: E501

        :return: The notes of this PartyModel.  # noqa: E501
        :rtype: list[NoteModel]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PartyModel.

          # noqa: E501

        :param notes: The notes of this PartyModel.  # noqa: E501
        :type: list[NoteModel]
        """

        self._notes = notes

    @property
    def files(self):
        """Gets the files of this PartyModel.  # noqa: E501

          # noqa: E501

        :return: The files of this PartyModel.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this PartyModel.

          # noqa: E501

        :param files: The files of this PartyModel.  # noqa: E501
        :type: list[FileModel]
        """

        self._files = files

    @property
    def created_at(self):
        """Gets the created_at of this PartyModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The created_at of this PartyModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PartyModel.

        created_at date time  # noqa: E501

        :param created_at: The created_at of this PartyModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PartyModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The updated_at of this PartyModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PartyModel.

        updated_at date time  # noqa: E501

        :param updated_at: The updated_at of this PartyModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def party_created_by_user(self):
        """Gets the party_created_by_user of this PartyModel.  # noqa: E501

          # noqa: E501

        :return: The party_created_by_user of this PartyModel.  # noqa: E501
        :rtype: UsersModel
        """
        return self._party_created_by_user

    @party_created_by_user.setter
    def party_created_by_user(self, party_created_by_user):
        """Sets the party_created_by_user of this PartyModel.

          # noqa: E501

        :param party_created_by_user: The party_created_by_user of this PartyModel.  # noqa: E501
        :type: UsersModel
        """

        self._party_created_by_user = party_created_by_user

    @property
    def party_updated_by_user(self):
        """Gets the party_updated_by_user of this PartyModel.  # noqa: E501

          # noqa: E501

        :return: The party_updated_by_user of this PartyModel.  # noqa: E501
        :rtype: UsersModel
        """
        return self._party_updated_by_user

    @party_updated_by_user.setter
    def party_updated_by_user(self, party_updated_by_user):
        """Sets the party_updated_by_user of this PartyModel.

          # noqa: E501

        :param party_updated_by_user: The party_updated_by_user of this PartyModel.  # noqa: E501
        :type: UsersModel
        """

        self._party_updated_by_user = party_updated_by_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartyModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartyModel):
            return True

        return self.to_dict() != other.to_dict()
