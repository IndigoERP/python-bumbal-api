# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class RecurrenceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type_id': 'int',
        'type_name': 'int',
        'recurrence_type_name': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'period_name': 'str',
        'period_id': 'int',
        'recurrence_period_name': 'str',
        'frequency': 'int',
        'count': 'int',
        'show_ahead': 'int',
        'current': 'int',
        'summary': 'str',
        'next_run': 'datetime',
        'last_run': 'datetime',
        'active': 'bool',
        'tags': 'list[TagModel]',
        'meta_data': 'list[MetaDataModel]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'updated_by_name': 'str',
        'object_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type_id': 'type_id',
        'type_name': 'type_name',
        'recurrence_type_name': 'recurrence_type_name',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'period_name': 'period_name',
        'period_id': 'period_id',
        'recurrence_period_name': 'recurrence_period_name',
        'frequency': 'frequency',
        'count': 'count',
        'show_ahead': 'show_ahead',
        'current': 'current',
        'summary': 'summary',
        'next_run': 'next_run',
        'last_run': 'last_run',
        'active': 'active',
        'tags': 'tags',
        'meta_data': 'meta_data',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'updated_by_name': 'updated_by_name',
        'object_id': 'object_id'
    }

    def __init__(self, id=None, name=None, type_id=None, type_name=None, recurrence_type_name=None, start_date=None, end_date=None, period_name=None, period_id=None, recurrence_period_name=None, frequency=None, count=None, show_ahead=None, current=None, summary=None, next_run=None, last_run=None, active=None, tags=None, meta_data=None, created_at=None, updated_at=None, updated_by_name=None, object_id=None, _configuration=None):  # noqa: E501
        """RecurrenceModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._type_id = None
        self._type_name = None
        self._recurrence_type_name = None
        self._start_date = None
        self._end_date = None
        self._period_name = None
        self._period_id = None
        self._recurrence_period_name = None
        self._frequency = None
        self._count = None
        self._show_ahead = None
        self._current = None
        self._summary = None
        self._next_run = None
        self._last_run = None
        self._active = None
        self._tags = None
        self._meta_data = None
        self._created_at = None
        self._updated_at = None
        self._updated_by_name = None
        self._object_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type_id is not None:
            self.type_id = type_id
        if type_name is not None:
            self.type_name = type_name
        if recurrence_type_name is not None:
            self.recurrence_type_name = recurrence_type_name
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if period_name is not None:
            self.period_name = period_name
        if period_id is not None:
            self.period_id = period_id
        if recurrence_period_name is not None:
            self.recurrence_period_name = recurrence_period_name
        if frequency is not None:
            self.frequency = frequency
        if count is not None:
            self.count = count
        if show_ahead is not None:
            self.show_ahead = show_ahead
        if current is not None:
            self.current = current
        if summary is not None:
            self.summary = summary
        if next_run is not None:
            self.next_run = next_run
        if last_run is not None:
            self.last_run = last_run
        if active is not None:
            self.active = active
        if tags is not None:
            self.tags = tags
        if meta_data is not None:
            self.meta_data = meta_data
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by_name is not None:
            self.updated_by_name = updated_by_name
        if object_id is not None:
            self.object_id = object_id

    @property
    def id(self):
        """Gets the id of this RecurrenceModel.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecurrenceModel.

        Unique Identifier  # noqa: E501

        :param id: The id of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RecurrenceModel.  # noqa: E501

        Recurrence name  # noqa: E501

        :return: The name of this RecurrenceModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecurrenceModel.

        Recurrence name  # noqa: E501

        :param name: The name of this RecurrenceModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type_id(self):
        """Gets the type_id of this RecurrenceModel.  # noqa: E501

        recurrence type_id, 11:activity, 24:route  # noqa: E501

        :return: The type_id of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this RecurrenceModel.

        recurrence type_id, 11:activity, 24:route  # noqa: E501

        :param type_id: The type_id of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def type_name(self):
        """Gets the type_name of this RecurrenceModel.  # noqa: E501

        recurrence type_name, activity, route  # noqa: E501

        :return: The type_name of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this RecurrenceModel.

        recurrence type_name, activity, route  # noqa: E501

        :param type_name: The type_name of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._type_name = type_name

    @property
    def recurrence_type_name(self):
        """Gets the recurrence_type_name of this RecurrenceModel.  # noqa: E501

        recurrence typename, activity or route  # noqa: E501

        :return: The recurrence_type_name of this RecurrenceModel.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_type_name

    @recurrence_type_name.setter
    def recurrence_type_name(self, recurrence_type_name):
        """Sets the recurrence_type_name of this RecurrenceModel.

        recurrence typename, activity or route  # noqa: E501

        :param recurrence_type_name: The recurrence_type_name of this RecurrenceModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["activity", "route"]  # noqa: E501
        if (self._configuration.client_side_validation and
                recurrence_type_name not in allowed_values):
            raise ValueError(
                "Invalid value for `recurrence_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence_type_name, allowed_values)
            )

        self._recurrence_type_name = recurrence_type_name

    @property
    def start_date(self):
        """Gets the start_date of this RecurrenceModel.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this RecurrenceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this RecurrenceModel.

        Start date  # noqa: E501

        :param start_date: The start_date of this RecurrenceModel.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this RecurrenceModel.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this RecurrenceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this RecurrenceModel.

        End date  # noqa: E501

        :param end_date: The end_date of this RecurrenceModel.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def period_name(self):
        """Gets the period_name of this RecurrenceModel.  # noqa: E501

        period name  # noqa: E501

        :return: The period_name of this RecurrenceModel.  # noqa: E501
        :rtype: str
        """
        return self._period_name

    @period_name.setter
    def period_name(self, period_name):
        """Sets the period_name of this RecurrenceModel.

        period name  # noqa: E501

        :param period_name: The period_name of this RecurrenceModel.  # noqa: E501
        :type: str
        """

        self._period_name = period_name

    @property
    def period_id(self):
        """Gets the period_id of this RecurrenceModel.  # noqa: E501

        recurrence period_id, 1:day, 2:week, 3:month  # noqa: E501

        :return: The period_id of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._period_id

    @period_id.setter
    def period_id(self, period_id):
        """Sets the period_id of this RecurrenceModel.

        recurrence period_id, 1:day, 2:week, 3:month  # noqa: E501

        :param period_id: The period_id of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._period_id = period_id

    @property
    def recurrence_period_name(self):
        """Gets the recurrence_period_name of this RecurrenceModel.  # noqa: E501

        recurrence period name: day, week or month  # noqa: E501

        :return: The recurrence_period_name of this RecurrenceModel.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_period_name

    @recurrence_period_name.setter
    def recurrence_period_name(self, recurrence_period_name):
        """Sets the recurrence_period_name of this RecurrenceModel.

        recurrence period name: day, week or month  # noqa: E501

        :param recurrence_period_name: The recurrence_period_name of this RecurrenceModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["day", "week", "month"]  # noqa: E501
        if (self._configuration.client_side_validation and
                recurrence_period_name not in allowed_values):
            raise ValueError(
                "Invalid value for `recurrence_period_name` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence_period_name, allowed_values)
            )

        self._recurrence_period_name = recurrence_period_name

    @property
    def frequency(self):
        """Gets the frequency of this RecurrenceModel.  # noqa: E501

        period frequency of recurrence (2 = repeat each 2 days/weeks/months)  # noqa: E501

        :return: The frequency of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RecurrenceModel.

        period frequency of recurrence (2 = repeat each 2 days/weeks/months)  # noqa: E501

        :param frequency: The frequency of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def count(self):
        """Gets the count of this RecurrenceModel.  # noqa: E501

        nr of last recurrence to be created  # noqa: E501

        :return: The count of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RecurrenceModel.

        nr of last recurrence to be created  # noqa: E501

        :param count: The count of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def show_ahead(self):
        """Gets the show_ahead of this RecurrenceModel.  # noqa: E501

        nr of recurrences to show ahead in system  # noqa: E501

        :return: The show_ahead of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._show_ahead

    @show_ahead.setter
    def show_ahead(self, show_ahead):
        """Sets the show_ahead of this RecurrenceModel.

        nr of recurrences to show ahead in system  # noqa: E501

        :param show_ahead: The show_ahead of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._show_ahead = show_ahead

    @property
    def current(self):
        """Gets the current of this RecurrenceModel.  # noqa: E501

        last created recurrence nr  # noqa: E501

        :return: The current of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this RecurrenceModel.

        last created recurrence nr  # noqa: E501

        :param current: The current of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._current = current

    @property
    def summary(self):
        """Gets the summary of this RecurrenceModel.  # noqa: E501

        summary of recurrence  # noqa: E501

        :return: The summary of this RecurrenceModel.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this RecurrenceModel.

        summary of recurrence  # noqa: E501

        :param summary: The summary of this RecurrenceModel.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def next_run(self):
        """Gets the next_run of this RecurrenceModel.  # noqa: E501

        Next date on which a new recurrence will be added  # noqa: E501

        :return: The next_run of this RecurrenceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this RecurrenceModel.

        Next date on which a new recurrence will be added  # noqa: E501

        :param next_run: The next_run of this RecurrenceModel.  # noqa: E501
        :type: datetime
        """

        self._next_run = next_run

    @property
    def last_run(self):
        """Gets the last_run of this RecurrenceModel.  # noqa: E501

        Last date on which a new recurrence was added  # noqa: E501

        :return: The last_run of this RecurrenceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this RecurrenceModel.

        Last date on which a new recurrence was added  # noqa: E501

        :param last_run: The last_run of this RecurrenceModel.  # noqa: E501
        :type: datetime
        """

        self._last_run = last_run

    @property
    def active(self):
        """Gets the active of this RecurrenceModel.  # noqa: E501

        if active=0: recurrence has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :return: The active of this RecurrenceModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RecurrenceModel.

        if active=0: recurrence has been removed and is no longer visible in any bumbal interface  # noqa: E501

        :param active: The active of this RecurrenceModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def tags(self):
        """Gets the tags of this RecurrenceModel.  # noqa: E501

          # noqa: E501

        :return: The tags of this RecurrenceModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RecurrenceModel.

          # noqa: E501

        :param tags: The tags of this RecurrenceModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def meta_data(self):
        """Gets the meta_data of this RecurrenceModel.  # noqa: E501

          # noqa: E501

        :return: The meta_data of this RecurrenceModel.  # noqa: E501
        :rtype: list[MetaDataModel]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this RecurrenceModel.

          # noqa: E501

        :param meta_data: The meta_data of this RecurrenceModel.  # noqa: E501
        :type: list[MetaDataModel]
        """

        self._meta_data = meta_data

    @property
    def created_at(self):
        """Gets the created_at of this RecurrenceModel.  # noqa: E501

        created_at date time  # noqa: E501

        :return: The created_at of this RecurrenceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RecurrenceModel.

        created_at date time  # noqa: E501

        :param created_at: The created_at of this RecurrenceModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this RecurrenceModel.  # noqa: E501

        updated_at date time  # noqa: E501

        :return: The updated_at of this RecurrenceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RecurrenceModel.

        updated_at date time  # noqa: E501

        :param updated_at: The updated_at of this RecurrenceModel.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by_name(self):
        """Gets the updated_by_name of this RecurrenceModel.  # noqa: E501

        Recurrence updated by user full name  # noqa: E501

        :return: The updated_by_name of this RecurrenceModel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_name

    @updated_by_name.setter
    def updated_by_name(self, updated_by_name):
        """Sets the updated_by_name of this RecurrenceModel.

        Recurrence updated by user full name  # noqa: E501

        :param updated_by_name: The updated_by_name of this RecurrenceModel.  # noqa: E501
        :type: str
        """

        self._updated_by_name = updated_by_name

    @property
    def object_id(self):
        """Gets the object_id of this RecurrenceModel.  # noqa: E501

        ID of the object  # noqa: E501

        :return: The object_id of this RecurrenceModel.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this RecurrenceModel.

        ID of the object  # noqa: E501

        :param object_id: The object_id of this RecurrenceModel.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecurrenceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurrenceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecurrenceModel):
            return True

        return self.to_dict() != other.to_dict()
