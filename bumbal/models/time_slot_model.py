# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class TimeSlotModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'time_slot_type': 'str',
        'time_slot_type_id': 'int',
        'activity_id': 'int',
        'date_from': 'date',
        'time_from': 'str',
        'date_time_from': 'datetime',
        'date_to': 'date',
        'time_to': 'str',
        'date_time_to': 'datetime',
        'planned': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'time_slot_type': 'time_slot_type',
        'time_slot_type_id': 'time_slot_type_id',
        'activity_id': 'activity_id',
        'date_from': 'date_from',
        'time_from': 'time_from',
        'date_time_from': 'date_time_from',
        'date_to': 'date_to',
        'time_to': 'time_to',
        'date_time_to': 'date_time_to',
        'planned': 'planned'
    }

    def __init__(self, id=None, time_slot_type=None, time_slot_type_id=None, activity_id=None, date_from=None, time_from=None, date_time_from=None, date_to=None, time_to=None, date_time_to=None, planned=None, _configuration=None):  # noqa: E501
        """TimeSlotModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._time_slot_type = None
        self._time_slot_type_id = None
        self._activity_id = None
        self._date_from = None
        self._time_from = None
        self._date_time_from = None
        self._date_to = None
        self._time_to = None
        self._date_time_to = None
        self._planned = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if time_slot_type is not None:
            self.time_slot_type = time_slot_type
        if time_slot_type_id is not None:
            self.time_slot_type_id = time_slot_type_id
        if activity_id is not None:
            self.activity_id = activity_id
        if date_from is not None:
            self.date_from = date_from
        if time_from is not None:
            self.time_from = time_from
        if date_time_from is not None:
            self.date_time_from = date_time_from
        if date_to is not None:
            self.date_to = date_to
        if time_to is not None:
            self.time_to = time_to
        if date_time_to is not None:
            self.date_time_to = date_time_to
        if planned is not None:
            self.planned = planned

    @property
    def id(self):
        """Gets the id of this TimeSlotModel.  # noqa: E501

          # noqa: E501

        :return: The id of this TimeSlotModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeSlotModel.

          # noqa: E501

        :param id: The id of this TimeSlotModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def time_slot_type(self):
        """Gets the time_slot_type of this TimeSlotModel.  # noqa: E501

        Time Slot Type. first-entry (:1), planned (:2), actual (:3)  # noqa: E501

        :return: The time_slot_type of this TimeSlotModel.  # noqa: E501
        :rtype: str
        """
        return self._time_slot_type

    @time_slot_type.setter
    def time_slot_type(self, time_slot_type):
        """Sets the time_slot_type of this TimeSlotModel.

        Time Slot Type. first-entry (:1), planned (:2), actual (:3)  # noqa: E501

        :param time_slot_type: The time_slot_type of this TimeSlotModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["first-entry", "planned", "actual"]  # noqa: E501
        if (self._configuration.client_side_validation and
                time_slot_type not in allowed_values):
            raise ValueError(
                "Invalid value for `time_slot_type` ({0}), must be one of {1}"  # noqa: E501
                .format(time_slot_type, allowed_values)
            )

        self._time_slot_type = time_slot_type

    @property
    def time_slot_type_id(self):
        """Gets the time_slot_type_id of this TimeSlotModel.  # noqa: E501

        Time Slot Type ID, by default 1 if left out of the request. 1: first-entry, 2: planned, 3: actual  # noqa: E501

        :return: The time_slot_type_id of this TimeSlotModel.  # noqa: E501
        :rtype: int
        """
        return self._time_slot_type_id

    @time_slot_type_id.setter
    def time_slot_type_id(self, time_slot_type_id):
        """Sets the time_slot_type_id of this TimeSlotModel.

        Time Slot Type ID, by default 1 if left out of the request. 1: first-entry, 2: planned, 3: actual  # noqa: E501

        :param time_slot_type_id: The time_slot_type_id of this TimeSlotModel.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                time_slot_type_id not in allowed_values):
            raise ValueError(
                "Invalid value for `time_slot_type_id` ({0}), must be one of {1}"  # noqa: E501
                .format(time_slot_type_id, allowed_values)
            )

        self._time_slot_type_id = time_slot_type_id

    @property
    def activity_id(self):
        """Gets the activity_id of this TimeSlotModel.  # noqa: E501

        Activity ID to which this TimeSlot belongs  # noqa: E501

        :return: The activity_id of this TimeSlotModel.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this TimeSlotModel.

        Activity ID to which this TimeSlot belongs  # noqa: E501

        :param activity_id: The activity_id of this TimeSlotModel.  # noqa: E501
        :type: int
        """

        self._activity_id = activity_id

    @property
    def date_from(self):
        """Gets the date_from of this TimeSlotModel.  # noqa: E501

          # noqa: E501

        :return: The date_from of this TimeSlotModel.  # noqa: E501
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this TimeSlotModel.

          # noqa: E501

        :param date_from: The date_from of this TimeSlotModel.  # noqa: E501
        :type: date
        """

        self._date_from = date_from

    @property
    def time_from(self):
        """Gets the time_from of this TimeSlotModel.  # noqa: E501

          # noqa: E501

        :return: The time_from of this TimeSlotModel.  # noqa: E501
        :rtype: str
        """
        return self._time_from

    @time_from.setter
    def time_from(self, time_from):
        """Sets the time_from of this TimeSlotModel.

          # noqa: E501

        :param time_from: The time_from of this TimeSlotModel.  # noqa: E501
        :type: str
        """

        self._time_from = time_from

    @property
    def date_time_from(self):
        """Gets the date_time_from of this TimeSlotModel.  # noqa: E501

          # noqa: E501

        :return: The date_time_from of this TimeSlotModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_from

    @date_time_from.setter
    def date_time_from(self, date_time_from):
        """Sets the date_time_from of this TimeSlotModel.

          # noqa: E501

        :param date_time_from: The date_time_from of this TimeSlotModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_from = date_time_from

    @property
    def date_to(self):
        """Gets the date_to of this TimeSlotModel.  # noqa: E501

          # noqa: E501

        :return: The date_to of this TimeSlotModel.  # noqa: E501
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this TimeSlotModel.

          # noqa: E501

        :param date_to: The date_to of this TimeSlotModel.  # noqa: E501
        :type: date
        """

        self._date_to = date_to

    @property
    def time_to(self):
        """Gets the time_to of this TimeSlotModel.  # noqa: E501

          # noqa: E501

        :return: The time_to of this TimeSlotModel.  # noqa: E501
        :rtype: str
        """
        return self._time_to

    @time_to.setter
    def time_to(self, time_to):
        """Sets the time_to of this TimeSlotModel.

          # noqa: E501

        :param time_to: The time_to of this TimeSlotModel.  # noqa: E501
        :type: str
        """

        self._time_to = time_to

    @property
    def date_time_to(self):
        """Gets the date_time_to of this TimeSlotModel.  # noqa: E501

          # noqa: E501

        :return: The date_time_to of this TimeSlotModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_to

    @date_time_to.setter
    def date_time_to(self, date_time_to):
        """Sets the date_time_to of this TimeSlotModel.

          # noqa: E501

        :param date_time_to: The date_time_to of this TimeSlotModel.  # noqa: E501
        :type: datetime
        """

        self._date_time_to = date_time_to

    @property
    def planned(self):
        """Gets the planned of this TimeSlotModel.  # noqa: E501

        true if this time_slot was used to plan the activity within  # noqa: E501

        :return: The planned of this TimeSlotModel.  # noqa: E501
        :rtype: bool
        """
        return self._planned

    @planned.setter
    def planned(self, planned):
        """Sets the planned of this TimeSlotModel.

        true if this time_slot was used to plan the activity within  # noqa: E501

        :param planned: The planned of this TimeSlotModel.  # noqa: E501
        :type: bool
        """

        self._planned = planned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSlotModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSlotModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeSlotModel):
            return True

        return self.to_dict() != other.to_dict()
