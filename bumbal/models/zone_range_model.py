# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ZoneRangeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'zipcode_from': 'int',
        'zipcode_to': 'int',
        'iso_country': 'str'
    }

    attribute_map = {
        'id': 'id',
        'zipcode_from': 'zipcode_from',
        'zipcode_to': 'zipcode_to',
        'iso_country': 'iso_country'
    }

    def __init__(self, id=None, zipcode_from=None, zipcode_to=None, iso_country=None, _configuration=None):  # noqa: E501
        """ZoneRangeModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._zipcode_from = None
        self._zipcode_to = None
        self._iso_country = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if zipcode_from is not None:
            self.zipcode_from = zipcode_from
        if zipcode_to is not None:
            self.zipcode_to = zipcode_to
        if iso_country is not None:
            self.iso_country = iso_country

    @property
    def id(self):
        """Gets the id of this ZoneRangeModel.  # noqa: E501

        Unique Zone type ID  # noqa: E501

        :return: The id of this ZoneRangeModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ZoneRangeModel.

        Unique Zone type ID  # noqa: E501

        :param id: The id of this ZoneRangeModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def zipcode_from(self):
        """Gets the zipcode_from of this ZoneRangeModel.  # noqa: E501

        Zipcode range start  # noqa: E501

        :return: The zipcode_from of this ZoneRangeModel.  # noqa: E501
        :rtype: int
        """
        return self._zipcode_from

    @zipcode_from.setter
    def zipcode_from(self, zipcode_from):
        """Sets the zipcode_from of this ZoneRangeModel.

        Zipcode range start  # noqa: E501

        :param zipcode_from: The zipcode_from of this ZoneRangeModel.  # noqa: E501
        :type: int
        """

        self._zipcode_from = zipcode_from

    @property
    def zipcode_to(self):
        """Gets the zipcode_to of this ZoneRangeModel.  # noqa: E501

        Zipcode range end  # noqa: E501

        :return: The zipcode_to of this ZoneRangeModel.  # noqa: E501
        :rtype: int
        """
        return self._zipcode_to

    @zipcode_to.setter
    def zipcode_to(self, zipcode_to):
        """Sets the zipcode_to of this ZoneRangeModel.

        Zipcode range end  # noqa: E501

        :param zipcode_to: The zipcode_to of this ZoneRangeModel.  # noqa: E501
        :type: int
        """

        self._zipcode_to = zipcode_to

    @property
    def iso_country(self):
        """Gets the iso_country of this ZoneRangeModel.  # noqa: E501

          # noqa: E501

        :return: The iso_country of this ZoneRangeModel.  # noqa: E501
        :rtype: str
        """
        return self._iso_country

    @iso_country.setter
    def iso_country(self, iso_country):
        """Sets the iso_country of this ZoneRangeModel.

          # noqa: E501

        :param iso_country: The iso_country of this ZoneRangeModel.  # noqa: E501
        :type: str
        """

        self._iso_country = iso_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZoneRangeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoneRangeModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ZoneRangeModel):
            return True

        return self.to_dict() != other.to_dict()
