# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ServiceWindowModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'service_windows_scheme_id': 'int',
        'week_day': 'int',
        'time_from': 'str',
        'time_to': 'str'
    }

    attribute_map = {
        'id': 'id',
        'service_windows_scheme_id': 'service_windows_scheme_id',
        'week_day': 'week_day',
        'time_from': 'time_from',
        'time_to': 'time_to'
    }

    def __init__(self, id=None, service_windows_scheme_id=None, week_day=None, time_from=None, time_to=None, _configuration=None):  # noqa: E501
        """ServiceWindowModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._service_windows_scheme_id = None
        self._week_day = None
        self._time_from = None
        self._time_to = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if service_windows_scheme_id is not None:
            self.service_windows_scheme_id = service_windows_scheme_id
        if week_day is not None:
            self.week_day = week_day
        if time_from is not None:
            self.time_from = time_from
        if time_to is not None:
            self.time_to = time_to

    @property
    def id(self):
        """Gets the id of this ServiceWindowModel.  # noqa: E501

        Unique ID  # noqa: E501

        :return: The id of this ServiceWindowModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceWindowModel.

        Unique ID  # noqa: E501

        :param id: The id of this ServiceWindowModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def service_windows_scheme_id(self):
        """Gets the service_windows_scheme_id of this ServiceWindowModel.  # noqa: E501

        Service windows scheme ID  # noqa: E501

        :return: The service_windows_scheme_id of this ServiceWindowModel.  # noqa: E501
        :rtype: int
        """
        return self._service_windows_scheme_id

    @service_windows_scheme_id.setter
    def service_windows_scheme_id(self, service_windows_scheme_id):
        """Sets the service_windows_scheme_id of this ServiceWindowModel.

        Service windows scheme ID  # noqa: E501

        :param service_windows_scheme_id: The service_windows_scheme_id of this ServiceWindowModel.  # noqa: E501
        :type: int
        """

        self._service_windows_scheme_id = service_windows_scheme_id

    @property
    def week_day(self):
        """Gets the week_day of this ServiceWindowModel.  # noqa: E501

        Week day  # noqa: E501

        :return: The week_day of this ServiceWindowModel.  # noqa: E501
        :rtype: int
        """
        return self._week_day

    @week_day.setter
    def week_day(self, week_day):
        """Sets the week_day of this ServiceWindowModel.

        Week day  # noqa: E501

        :param week_day: The week_day of this ServiceWindowModel.  # noqa: E501
        :type: int
        """

        self._week_day = week_day

    @property
    def time_from(self):
        """Gets the time_from of this ServiceWindowModel.  # noqa: E501

        time from  # noqa: E501

        :return: The time_from of this ServiceWindowModel.  # noqa: E501
        :rtype: str
        """
        return self._time_from

    @time_from.setter
    def time_from(self, time_from):
        """Sets the time_from of this ServiceWindowModel.

        time from  # noqa: E501

        :param time_from: The time_from of this ServiceWindowModel.  # noqa: E501
        :type: str
        """

        self._time_from = time_from

    @property
    def time_to(self):
        """Gets the time_to of this ServiceWindowModel.  # noqa: E501

        time to  # noqa: E501

        :return: The time_to of this ServiceWindowModel.  # noqa: E501
        :rtype: str
        """
        return self._time_to

    @time_to.setter
    def time_to(self, time_to):
        """Sets the time_to of this ServiceWindowModel.

        time to  # noqa: E501

        :param time_to: The time_to of this ServiceWindowModel.  # noqa: E501
        :type: str
        """

        self._time_to = time_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceWindowModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceWindowModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceWindowModel):
            return True

        return self.to_dict() != other.to_dict()
