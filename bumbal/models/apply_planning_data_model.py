# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ApplyPlanningDataModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned': 'object',
        'unassigned': 'object',
        'routes': 'object',
        'after_updates': 'object'
    }

    attribute_map = {
        'assigned': 'assigned',
        'unassigned': 'unassigned',
        'routes': 'routes',
        'after_updates': 'after_updates'
    }

    def __init__(self, assigned=None, unassigned=None, routes=None, after_updates=None, _configuration=None):  # noqa: E501
        """ApplyPlanningDataModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assigned = None
        self._unassigned = None
        self._routes = None
        self._after_updates = None
        self.discriminator = None

        if assigned is not None:
            self.assigned = assigned
        if unassigned is not None:
            self.unassigned = unassigned
        if routes is not None:
            self.routes = routes
        if after_updates is not None:
            self.after_updates = after_updates

    @property
    def assigned(self):
        """Gets the assigned of this ApplyPlanningDataModel.  # noqa: E501

          # noqa: E501

        :return: The assigned of this ApplyPlanningDataModel.  # noqa: E501
        :rtype: object
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """Sets the assigned of this ApplyPlanningDataModel.

          # noqa: E501

        :param assigned: The assigned of this ApplyPlanningDataModel.  # noqa: E501
        :type: object
        """

        self._assigned = assigned

    @property
    def unassigned(self):
        """Gets the unassigned of this ApplyPlanningDataModel.  # noqa: E501

          # noqa: E501

        :return: The unassigned of this ApplyPlanningDataModel.  # noqa: E501
        :rtype: object
        """
        return self._unassigned

    @unassigned.setter
    def unassigned(self, unassigned):
        """Sets the unassigned of this ApplyPlanningDataModel.

          # noqa: E501

        :param unassigned: The unassigned of this ApplyPlanningDataModel.  # noqa: E501
        :type: object
        """

        self._unassigned = unassigned

    @property
    def routes(self):
        """Gets the routes of this ApplyPlanningDataModel.  # noqa: E501

          # noqa: E501

        :return: The routes of this ApplyPlanningDataModel.  # noqa: E501
        :rtype: object
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this ApplyPlanningDataModel.

          # noqa: E501

        :param routes: The routes of this ApplyPlanningDataModel.  # noqa: E501
        :type: object
        """

        self._routes = routes

    @property
    def after_updates(self):
        """Gets the after_updates of this ApplyPlanningDataModel.  # noqa: E501

          # noqa: E501

        :return: The after_updates of this ApplyPlanningDataModel.  # noqa: E501
        :rtype: object
        """
        return self._after_updates

    @after_updates.setter
    def after_updates(self, after_updates):
        """Sets the after_updates of this ApplyPlanningDataModel.

          # noqa: E501

        :param after_updates: The after_updates of this ApplyPlanningDataModel.  # noqa: E501
        :type: object
        """

        self._after_updates = after_updates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplyPlanningDataModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplyPlanningDataModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplyPlanningDataModel):
            return True

        return self.to_dict() != other.to_dict()
