# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bumbal.configuration import Configuration


class ActivityEtaModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'eta_date_time': 'datetime',
        'sequence_nr': 'int'
    }

    attribute_map = {
        'id': 'id',
        'eta_date_time': 'eta_date_time',
        'sequence_nr': 'sequence_nr'
    }

    def __init__(self, id=None, eta_date_time=None, sequence_nr=None, _configuration=None):  # noqa: E501
        """ActivityEtaModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._eta_date_time = None
        self._sequence_nr = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if eta_date_time is not None:
            self.eta_date_time = eta_date_time
        if sequence_nr is not None:
            self.sequence_nr = sequence_nr

    @property
    def id(self):
        """Gets the id of this ActivityEtaModel.  # noqa: E501

        Unique ID of Activity  # noqa: E501

        :return: The id of this ActivityEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityEtaModel.

        Unique ID of Activity  # noqa: E501

        :param id: The id of this ActivityEtaModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def eta_date_time(self):
        """Gets the eta_date_time of this ActivityEtaModel.  # noqa: E501

          # noqa: E501

        :return: The eta_date_time of this ActivityEtaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._eta_date_time

    @eta_date_time.setter
    def eta_date_time(self, eta_date_time):
        """Sets the eta_date_time of this ActivityEtaModel.

          # noqa: E501

        :param eta_date_time: The eta_date_time of this ActivityEtaModel.  # noqa: E501
        :type: datetime
        """

        self._eta_date_time = eta_date_time

    @property
    def sequence_nr(self):
        """Gets the sequence_nr of this ActivityEtaModel.  # noqa: E501

        Position of activity on route  # noqa: E501

        :return: The sequence_nr of this ActivityEtaModel.  # noqa: E501
        :rtype: int
        """
        return self._sequence_nr

    @sequence_nr.setter
    def sequence_nr(self, sequence_nr):
        """Sets the sequence_nr of this ActivityEtaModel.

        Position of activity on route  # noqa: E501

        :param sequence_nr: The sequence_nr of this ActivityEtaModel.  # noqa: E501
        :type: int
        """

        self._sequence_nr = sequence_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEtaModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEtaModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivityEtaModel):
            return True

        return self.to_dict() != other.to_dict()
