# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bumbal.api_client import ApiClient


class RouteApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def block_routes(self, filters, **kwargs):  # noqa: E501
        """Block routes which satisfy set filters  # noqa: E501

        Block routes which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.block_routes(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.block_routes_with_http_info(filters, **kwargs)  # noqa: E501
        else:
            (data) = self.block_routes_with_http_info(filters, **kwargs)  # noqa: E501
            return data

    def block_routes_with_http_info(self, filters, **kwargs):  # noqa: E501
        """Block routes which satisfy set filters  # noqa: E501

        Block routes which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.block_routes_with_http_info(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method block_routes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `block_routes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filters' in params:
            body_params = params['filters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/block-routes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_route(self, **kwargs):  # noqa: E501
        """Add a new Route  # noqa: E501

        Add a new Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_route(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteModel body: Route object that needs to be created
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_route_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_route_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_route_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new Route  # noqa: E501

        Add a new Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_route_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteModel body: Route object that needs to be created
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_route" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_route(self, route_id, cancel_activities, **kwargs):  # noqa: E501
        """Delete an Route  # noqa: E501

        Delete an Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_route(route_id, cancel_activities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int route_id: ID of route to update (required)
        :param bool cancel_activities: Cancel activities on Route (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_route_with_http_info(route_id, cancel_activities, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_route_with_http_info(route_id, cancel_activities, **kwargs)  # noqa: E501
            return data

    def delete_route_with_http_info(self, route_id, cancel_activities, **kwargs):  # noqa: E501
        """Delete an Route  # noqa: E501

        Delete an Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_route_with_http_info(route_id, cancel_activities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int route_id: ID of route to update (required)
        :param bool cancel_activities: Cancel activities on Route (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['route_id', 'cancel_activities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'route_id' is set
        if self.api_client.client_side_validation and ('route_id' not in params or
                                                       params['route_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `route_id` when calling `delete_route`")  # noqa: E501
        # verify the required parameter 'cancel_activities' is set
        if self.api_client.client_side_validation and ('cancel_activities' not in params or
                                                       params['cancel_activities'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cancel_activities` when calling `delete_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'route_id' in params:
            path_params['routeId'] = params['route_id']  # noqa: E501

        query_params = []
        if 'cancel_activities' in params:
            query_params.append(('cancel_activities', params['cancel_activities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/{routeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_executable_activities(self, arguments, **kwargs):  # noqa: E501
        """Returns all activities in this route which hav enot been executed yet.  # noqa: E501

        Returns all activities in this route which have not been executed yet. This will be in execution order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_executable_activities(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetExecutableActivitiesArguments arguments: Request Arguments (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_executable_activities_with_http_info(arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_executable_activities_with_http_info(arguments, **kwargs)  # noqa: E501
            return data

    def get_executable_activities_with_http_info(self, arguments, **kwargs):  # noqa: E501
        """Returns all activities in this route which hav enot been executed yet.  # noqa: E501

        Returns all activities in this route which have not been executed yet. This will be in execution order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_executable_activities_with_http_info(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetExecutableActivitiesArguments arguments: Request Arguments (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arguments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_executable_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arguments' is set
        if self.api_client.client_side_validation and ('arguments' not in params or
                                                       params['arguments'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `arguments` when calling `get_executable_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'arguments' in params:
            body_params = params['arguments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/get-executable-activities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_list_route(self, arguments, **kwargs):  # noqa: E501
        """Retrieve List of Routes  # noqa: E501

        Retrieve List of Routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_list_route(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteRetrieveListArguments arguments: Route RetrieveList Arguments (required)
        :return: RouteListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_list_route_with_http_info(arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_list_route_with_http_info(arguments, **kwargs)  # noqa: E501
            return data

    def retrieve_list_route_with_http_info(self, arguments, **kwargs):  # noqa: E501
        """Retrieve List of Routes  # noqa: E501

        Retrieve List of Routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_list_route_with_http_info(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteRetrieveListArguments arguments: Route RetrieveList Arguments (required)
        :return: RouteListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arguments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_list_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arguments' is set
        if self.api_client.client_side_validation and ('arguments' not in params or
                                                       params['arguments'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `arguments` when calling `retrieve_list_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'arguments' in params:
            body_params = params['arguments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RouteListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_route(self, route_id, include_address_object, include_route_status, include_route_tags, include_driver_info, include_equipment_info_car, include_gps_locations, include_activity_ids, include_latest_position, **kwargs):  # noqa: E501
        """Retrieve a Route  # noqa: E501

        Retrieve an Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_route(route_id, include_address_object, include_route_status, include_route_tags, include_driver_info, include_equipment_info_car, include_gps_locations, include_activity_ids, include_latest_position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int route_id: ID of route to retrieve (required)
        :param bool include_address_object: Include Address Objects (required)
        :param bool include_route_status: Include Status Name (required)
        :param bool include_route_tags: Include Tags (required)
        :param bool include_driver_info: Include Driver info (required)
        :param bool include_equipment_info_car: Include Equipment info car (required)
        :param bool include_gps_locations: Include GPS locations (required)
        :param bool include_activity_ids: Include Activity IDs (required)
        :param bool include_latest_position: Include Latest Known GPS location (required)
        :return: RouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_route_with_http_info(route_id, include_address_object, include_route_status, include_route_tags, include_driver_info, include_equipment_info_car, include_gps_locations, include_activity_ids, include_latest_position, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_route_with_http_info(route_id, include_address_object, include_route_status, include_route_tags, include_driver_info, include_equipment_info_car, include_gps_locations, include_activity_ids, include_latest_position, **kwargs)  # noqa: E501
            return data

    def retrieve_route_with_http_info(self, route_id, include_address_object, include_route_status, include_route_tags, include_driver_info, include_equipment_info_car, include_gps_locations, include_activity_ids, include_latest_position, **kwargs):  # noqa: E501
        """Retrieve a Route  # noqa: E501

        Retrieve an Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_route_with_http_info(route_id, include_address_object, include_route_status, include_route_tags, include_driver_info, include_equipment_info_car, include_gps_locations, include_activity_ids, include_latest_position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int route_id: ID of route to retrieve (required)
        :param bool include_address_object: Include Address Objects (required)
        :param bool include_route_status: Include Status Name (required)
        :param bool include_route_tags: Include Tags (required)
        :param bool include_driver_info: Include Driver info (required)
        :param bool include_equipment_info_car: Include Equipment info car (required)
        :param bool include_gps_locations: Include GPS locations (required)
        :param bool include_activity_ids: Include Activity IDs (required)
        :param bool include_latest_position: Include Latest Known GPS location (required)
        :return: RouteModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['route_id', 'include_address_object', 'include_route_status', 'include_route_tags', 'include_driver_info', 'include_equipment_info_car', 'include_gps_locations', 'include_activity_ids', 'include_latest_position']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'route_id' is set
        if self.api_client.client_side_validation and ('route_id' not in params or
                                                       params['route_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `route_id` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_address_object' is set
        if self.api_client.client_side_validation and ('include_address_object' not in params or
                                                       params['include_address_object'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_address_object` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_route_status' is set
        if self.api_client.client_side_validation and ('include_route_status' not in params or
                                                       params['include_route_status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_route_status` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_route_tags' is set
        if self.api_client.client_side_validation and ('include_route_tags' not in params or
                                                       params['include_route_tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_route_tags` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_driver_info' is set
        if self.api_client.client_side_validation and ('include_driver_info' not in params or
                                                       params['include_driver_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_driver_info` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_equipment_info_car' is set
        if self.api_client.client_side_validation and ('include_equipment_info_car' not in params or
                                                       params['include_equipment_info_car'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_equipment_info_car` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_gps_locations' is set
        if self.api_client.client_side_validation and ('include_gps_locations' not in params or
                                                       params['include_gps_locations'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_gps_locations` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_activity_ids' is set
        if self.api_client.client_side_validation and ('include_activity_ids' not in params or
                                                       params['include_activity_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_ids` when calling `retrieve_route`")  # noqa: E501
        # verify the required parameter 'include_latest_position' is set
        if self.api_client.client_side_validation and ('include_latest_position' not in params or
                                                       params['include_latest_position'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_latest_position` when calling `retrieve_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'route_id' in params:
            path_params['routeId'] = params['route_id']  # noqa: E501

        query_params = []
        if 'include_address_object' in params:
            query_params.append(('include_address_object', params['include_address_object']))  # noqa: E501
        if 'include_route_status' in params:
            query_params.append(('include_route_status', params['include_route_status']))  # noqa: E501
        if 'include_route_tags' in params:
            query_params.append(('include_route_tags', params['include_route_tags']))  # noqa: E501
        if 'include_driver_info' in params:
            query_params.append(('include_driver_info', params['include_driver_info']))  # noqa: E501
        if 'include_equipment_info_car' in params:
            query_params.append(('include_equipment_info_car', params['include_equipment_info_car']))  # noqa: E501
        if 'include_gps_locations' in params:
            query_params.append(('include_gps_locations', params['include_gps_locations']))  # noqa: E501
        if 'include_activity_ids' in params:
            query_params.append(('include_activity_ids', params['include_activity_ids']))  # noqa: E501
        if 'include_latest_position' in params:
            query_params.append(('include_latest_position', params['include_latest_position']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/{routeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RouteModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def route_store_geo_locations(self, arguments, **kwargs):  # noqa: E501
        """Store tracked Geo Locations in bulk  # noqa: E501

        Store tracked Geo Locations in bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.route_store_geo_locations(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteStoreGeoLocations arguments: Request Arguments (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.route_store_geo_locations_with_http_info(arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.route_store_geo_locations_with_http_info(arguments, **kwargs)  # noqa: E501
            return data

    def route_store_geo_locations_with_http_info(self, arguments, **kwargs):  # noqa: E501
        """Store tracked Geo Locations in bulk  # noqa: E501

        Store tracked Geo Locations in bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.route_store_geo_locations_with_http_info(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteStoreGeoLocations arguments: Request Arguments (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arguments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method route_store_geo_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arguments' is set
        if self.api_client.client_side_validation and ('arguments' not in params or
                                                       params['arguments'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `arguments` when calling `route_store_geo_locations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'arguments' in params:
            body_params = params['arguments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/store-geo-locations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_route(self, **kwargs):  # noqa: E501
        """Set (create or update) an Route  # noqa: E501

        Set (create or update) an Route. If id or links are set in the data, and a corresponding route is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_route(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteModel body: Route object
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_route_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_route_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_route_with_http_info(self, **kwargs):  # noqa: E501
        """Set (create or update) an Route  # noqa: E501

        Set (create or update) an Route. If id or links are set in the data, and a corresponding route is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_route_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteModel body: Route object
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_route" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unblock_routes(self, filters, **kwargs):  # noqa: E501
        """Unblock routes which satisfy set filters  # noqa: E501

        Unblock routes which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unblock_routes(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unblock_routes_with_http_info(filters, **kwargs)  # noqa: E501
        else:
            (data) = self.unblock_routes_with_http_info(filters, **kwargs)  # noqa: E501
            return data

    def unblock_routes_with_http_info(self, filters, **kwargs):  # noqa: E501
        """Unblock routes which satisfy set filters  # noqa: E501

        Unblock routes which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unblock_routes_with_http_info(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unblock_routes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `unblock_routes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filters' in params:
            body_params = params['filters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/unblock-routes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_route(self, route_id, **kwargs):  # noqa: E501
        """Update a Route  # noqa: E501

        Update an Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_route(route_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int route_id: ID of route to update (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_route_with_http_info(route_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_route_with_http_info(route_id, **kwargs)  # noqa: E501
            return data

    def update_route_with_http_info(self, route_id, **kwargs):  # noqa: E501
        """Update a Route  # noqa: E501

        Update an Route  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_route_with_http_info(route_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int route_id: ID of route to update (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['route_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'route_id' is set
        if self.api_client.client_side_validation and ('route_id' not in params or
                                                       params['route_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `route_id` when calling `update_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'route_id' in params:
            path_params['routeId'] = params['route_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/route/{routeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
