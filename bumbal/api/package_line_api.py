# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bumbal.api_client import ApiClient


class PackageLineApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_package_line(self, **kwargs):  # noqa: E501
        """Create or update an Package Line  # noqa: E501

        Create or update an PackageLine. If id or links are set in the data, and a corresponding package-line    *     is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_package_line(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineModel body: PackageLine model
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_package_line_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_package_line_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_package_line_with_http_info(self, **kwargs):  # noqa: E501
        """Create or update an Package Line  # noqa: E501

        Create or update an PackageLine. If id or links are set in the data, and a corresponding package-line    *     is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_package_line_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineModel body: PackageLine model
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_package_line" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/package-line', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_package_line(self, package_line_id, **kwargs):  # noqa: E501
        """Delete an package-line  # noqa: E501

        Delete an package-line  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_package_line(package_line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int package_line_id: ID of the package-line to delete (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_package_line_with_http_info(package_line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_package_line_with_http_info(package_line_id, **kwargs)  # noqa: E501
            return data

    def delete_package_line_with_http_info(self, package_line_id, **kwargs):  # noqa: E501
        """Delete an package-line  # noqa: E501

        Delete an package-line  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_package_line_with_http_info(package_line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int package_line_id: ID of the package-line to delete (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_package_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_line_id' is set
        if self.api_client.client_side_validation and ('package_line_id' not in params or
                                                       params['package_line_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `package_line_id` when calling `delete_package_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_line_id' in params:
            path_params['packageLineId'] = params['package_line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/package-line/{packageLineId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_list_package_line(self, arguments, **kwargs):  # noqa: E501
        """Retrieve List of PackageLines  # noqa: E501

        Retrieve List of PackageLines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_list_package_line(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineRetrieveListArguments arguments: PackageLine RetrieveList Arguments (required)
        :return: PackageLineListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_list_package_line_with_http_info(arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_list_package_line_with_http_info(arguments, **kwargs)  # noqa: E501
            return data

    def retrieve_list_package_line_with_http_info(self, arguments, **kwargs):  # noqa: E501
        """Retrieve List of PackageLines  # noqa: E501

        Retrieve List of PackageLines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_list_package_line_with_http_info(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineRetrieveListArguments arguments: PackageLine RetrieveList Arguments (required)
        :return: PackageLineListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arguments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_list_package_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arguments' is set
        if self.api_client.client_side_validation and ('arguments' not in params or
                                                       params['arguments'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `arguments` when calling `retrieve_list_package_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'arguments' in params:
            body_params = params['arguments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/package-line', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageLineListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_package_line(self, package_line_id, include_package_line_status, include_package_line_type_name, include_package_line_meta_data, include_address_object, include_time_slots, include_time_slot_tags, include_route_info, include_driver_info, include_communication, include_package_line_links, include_package_lines_info, include_package_line_files, include_package_line_files_meta_data, **kwargs):  # noqa: E501
        """Find package-line by ID  # noqa: E501

        Returns a single package-line  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_package_line(package_line_id, include_package_line_status, include_package_line_type_name, include_package_line_meta_data, include_address_object, include_time_slots, include_time_slot_tags, include_route_info, include_driver_info, include_communication, include_package_line_links, include_package_lines_info, include_package_line_files, include_package_line_files_meta_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int package_line_id: ID of package-line to return (required)
        :param bool include_package_line_status: Show the text value of the status (required)
        :param bool include_package_line_type_name: Show the text value of the package-line type (required)
        :param bool include_package_line_meta_data: Include meta data connected to this PackageLine (required)
        :param bool include_address_object: Include address data (required)
        :param bool include_time_slots: Include TimeSlots (required)
        :param bool include_time_slot_tags: Include tags from TimeSlots (required)
        :param bool include_route_info: Include route data (required)
        :param bool include_driver_info: Include driver data (required)
        :param bool include_communication: Include Communication Settings (required)
        :param bool include_package_line_links: Include Link Data (required)
        :param bool include_package_lines_info: Include PackageLines (required)
        :param bool include_package_line_files: Include files (required)
        :param bool include_package_line_files_meta_data: Include files meta data (required)
        :return: PackageLineModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_package_line_with_http_info(package_line_id, include_package_line_status, include_package_line_type_name, include_package_line_meta_data, include_address_object, include_time_slots, include_time_slot_tags, include_route_info, include_driver_info, include_communication, include_package_line_links, include_package_lines_info, include_package_line_files, include_package_line_files_meta_data, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_package_line_with_http_info(package_line_id, include_package_line_status, include_package_line_type_name, include_package_line_meta_data, include_address_object, include_time_slots, include_time_slot_tags, include_route_info, include_driver_info, include_communication, include_package_line_links, include_package_lines_info, include_package_line_files, include_package_line_files_meta_data, **kwargs)  # noqa: E501
            return data

    def retrieve_package_line_with_http_info(self, package_line_id, include_package_line_status, include_package_line_type_name, include_package_line_meta_data, include_address_object, include_time_slots, include_time_slot_tags, include_route_info, include_driver_info, include_communication, include_package_line_links, include_package_lines_info, include_package_line_files, include_package_line_files_meta_data, **kwargs):  # noqa: E501
        """Find package-line by ID  # noqa: E501

        Returns a single package-line  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_package_line_with_http_info(package_line_id, include_package_line_status, include_package_line_type_name, include_package_line_meta_data, include_address_object, include_time_slots, include_time_slot_tags, include_route_info, include_driver_info, include_communication, include_package_line_links, include_package_lines_info, include_package_line_files, include_package_line_files_meta_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int package_line_id: ID of package-line to return (required)
        :param bool include_package_line_status: Show the text value of the status (required)
        :param bool include_package_line_type_name: Show the text value of the package-line type (required)
        :param bool include_package_line_meta_data: Include meta data connected to this PackageLine (required)
        :param bool include_address_object: Include address data (required)
        :param bool include_time_slots: Include TimeSlots (required)
        :param bool include_time_slot_tags: Include tags from TimeSlots (required)
        :param bool include_route_info: Include route data (required)
        :param bool include_driver_info: Include driver data (required)
        :param bool include_communication: Include Communication Settings (required)
        :param bool include_package_line_links: Include Link Data (required)
        :param bool include_package_lines_info: Include PackageLines (required)
        :param bool include_package_line_files: Include files (required)
        :param bool include_package_line_files_meta_data: Include files meta data (required)
        :return: PackageLineModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_line_id', 'include_package_line_status', 'include_package_line_type_name', 'include_package_line_meta_data', 'include_address_object', 'include_time_slots', 'include_time_slot_tags', 'include_route_info', 'include_driver_info', 'include_communication', 'include_package_line_links', 'include_package_lines_info', 'include_package_line_files', 'include_package_line_files_meta_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_package_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_line_id' is set
        if self.api_client.client_side_validation and ('package_line_id' not in params or
                                                       params['package_line_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `package_line_id` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_package_line_status' is set
        if self.api_client.client_side_validation and ('include_package_line_status' not in params or
                                                       params['include_package_line_status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_line_status` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_package_line_type_name' is set
        if self.api_client.client_side_validation and ('include_package_line_type_name' not in params or
                                                       params['include_package_line_type_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_line_type_name` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_package_line_meta_data' is set
        if self.api_client.client_side_validation and ('include_package_line_meta_data' not in params or
                                                       params['include_package_line_meta_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_line_meta_data` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_address_object' is set
        if self.api_client.client_side_validation and ('include_address_object' not in params or
                                                       params['include_address_object'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_address_object` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_time_slots' is set
        if self.api_client.client_side_validation and ('include_time_slots' not in params or
                                                       params['include_time_slots'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_time_slots` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_time_slot_tags' is set
        if self.api_client.client_side_validation and ('include_time_slot_tags' not in params or
                                                       params['include_time_slot_tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_time_slot_tags` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_route_info' is set
        if self.api_client.client_side_validation and ('include_route_info' not in params or
                                                       params['include_route_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_route_info` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_driver_info' is set
        if self.api_client.client_side_validation and ('include_driver_info' not in params or
                                                       params['include_driver_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_driver_info` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_communication' is set
        if self.api_client.client_side_validation and ('include_communication' not in params or
                                                       params['include_communication'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_communication` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_package_line_links' is set
        if self.api_client.client_side_validation and ('include_package_line_links' not in params or
                                                       params['include_package_line_links'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_line_links` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_package_lines_info' is set
        if self.api_client.client_side_validation and ('include_package_lines_info' not in params or
                                                       params['include_package_lines_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_lines_info` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_package_line_files' is set
        if self.api_client.client_side_validation and ('include_package_line_files' not in params or
                                                       params['include_package_line_files'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_line_files` when calling `retrieve_package_line`")  # noqa: E501
        # verify the required parameter 'include_package_line_files_meta_data' is set
        if self.api_client.client_side_validation and ('include_package_line_files_meta_data' not in params or
                                                       params['include_package_line_files_meta_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_line_files_meta_data` when calling `retrieve_package_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_line_id' in params:
            path_params['packageLineId'] = params['package_line_id']  # noqa: E501

        query_params = []
        if 'include_package_line_status' in params:
            query_params.append(('include_package_line_status', params['include_package_line_status']))  # noqa: E501
        if 'include_package_line_type_name' in params:
            query_params.append(('include_package_line_type_name', params['include_package_line_type_name']))  # noqa: E501
        if 'include_package_line_meta_data' in params:
            query_params.append(('include_package_line_meta_data', params['include_package_line_meta_data']))  # noqa: E501
        if 'include_address_object' in params:
            query_params.append(('include_address_object', params['include_address_object']))  # noqa: E501
        if 'include_time_slots' in params:
            query_params.append(('include_time_slots', params['include_time_slots']))  # noqa: E501
        if 'include_time_slot_tags' in params:
            query_params.append(('include_time_slot_tags', params['include_time_slot_tags']))  # noqa: E501
        if 'include_route_info' in params:
            query_params.append(('include_route_info', params['include_route_info']))  # noqa: E501
        if 'include_driver_info' in params:
            query_params.append(('include_driver_info', params['include_driver_info']))  # noqa: E501
        if 'include_communication' in params:
            query_params.append(('include_communication', params['include_communication']))  # noqa: E501
        if 'include_package_line_links' in params:
            query_params.append(('include_package_line_links', params['include_package_line_links']))  # noqa: E501
        if 'include_package_lines_info' in params:
            query_params.append(('include_package_lines_info', params['include_package_lines_info']))  # noqa: E501
        if 'include_package_line_files' in params:
            query_params.append(('include_package_line_files', params['include_package_line_files']))  # noqa: E501
        if 'include_package_line_files_meta_data' in params:
            query_params.append(('include_package_line_files_meta_data', params['include_package_line_files_meta_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/package-line/{packageLineId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageLineModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_package_line(self, **kwargs):  # noqa: E501
        """Set (create or update) an PackageLine  # noqa: E501

        Set (create or update) an PackageLine. If id or links are set in the data, and a corresponding package-line is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_package_line(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineModel body: PackageLine model
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_package_line_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_package_line_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_package_line_with_http_info(self, **kwargs):  # noqa: E501
        """Set (create or update) an PackageLine  # noqa: E501

        Set (create or update) an PackageLine. If id or links are set in the data, and a corresponding package-line is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_package_line_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineModel body: PackageLine model
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_package_line" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/package-line/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_package_line(self, **kwargs):  # noqa: E501
        """Update package-lines in bulk  # noqa: E501

        Update package-lines in bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package_line(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineUpdateArguments body: PackageLine Update object that contains all information about this update
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_package_line_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_package_line_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_package_line_with_http_info(self, **kwargs):  # noqa: E501
        """Update package-lines in bulk  # noqa: E501

        Update package-lines in bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package_line_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PackageLineUpdateArguments body: PackageLine Update object that contains all information about this update
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_package_line" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/package-line/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
