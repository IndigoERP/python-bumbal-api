# coding: utf-8

"""
    Bumbal Client Api

    Bumbal API documentation  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: gerb@bumbal.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bumbal.api_client import ApiClient


class ActivityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_activity(self, activity_id, **kwargs):  # noqa: E501
        """Delete an activity  # noqa: E501

        Delete an activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activity(activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_id: ID of the activity to delete (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_activity_with_http_info(activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_activity_with_http_info(activity_id, **kwargs)  # noqa: E501
            return data

    def delete_activity_with_http_info(self, activity_id, **kwargs):  # noqa: E501
        """Delete an activity  # noqa: E501

        Delete an activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activity_with_http_info(activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_id: ID of the activity to delete (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if self.api_client.client_side_validation and ('activity_id' not in params or
                                                       params['activity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `activity_id` when calling `delete_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/{activityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lock_activity(self, filters, **kwargs):  # noqa: E501
        """Lock activities which satisfy set filters  # noqa: E501

        Lock activities which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_activity(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lock_activity_with_http_info(filters, **kwargs)  # noqa: E501
        else:
            (data) = self.lock_activity_with_http_info(filters, **kwargs)  # noqa: E501
            return data

    def lock_activity_with_http_info(self, filters, **kwargs):  # noqa: E501
        """Lock activities which satisfy set filters  # noqa: E501

        Lock activities which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_activity_with_http_info(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lock_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `lock_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filters' in params:
            body_params = params['filters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/lock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lock_activity_on_route(self, filters, **kwargs):  # noqa: E501
        """Lock activities on route which satisfy set filters  # noqa: E501

        Lock activities on route which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_activity_on_route(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lock_activity_on_route_with_http_info(filters, **kwargs)  # noqa: E501
        else:
            (data) = self.lock_activity_on_route_with_http_info(filters, **kwargs)  # noqa: E501
            return data

    def lock_activity_on_route_with_http_info(self, filters, **kwargs):  # noqa: E501
        """Lock activities on route which satisfy set filters  # noqa: E501

        Lock activities on route which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_activity_on_route_with_http_info(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lock_activity_on_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `lock_activity_on_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filters' in params:
            body_params = params['filters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/lock-on-route', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lock_activity_on_route_and_time(self, filters, **kwargs):  # noqa: E501
        """Lock activities on route and time which satisfy set filters  # noqa: E501

        Lock activities on route and time which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_activity_on_route_and_time(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lock_activity_on_route_and_time_with_http_info(filters, **kwargs)  # noqa: E501
        else:
            (data) = self.lock_activity_on_route_and_time_with_http_info(filters, **kwargs)  # noqa: E501
            return data

    def lock_activity_on_route_and_time_with_http_info(self, filters, **kwargs):  # noqa: E501
        """Lock activities on route and time which satisfy set filters  # noqa: E501

        Lock activities on route and time which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_activity_on_route_and_time_with_http_info(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lock_activity_on_route_and_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `lock_activity_on_route_and_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filters' in params:
            body_params = params['filters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/lock-on-route-and-time', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_activity(self, activity_id, include_activity_status=True, include_activity_type_name=True, include_activity_meta_data=True, include_address_object=True, include_time_slots=True, include_route_info=True, include_route=True, include_package_lines=True, include_package_lines_info=True, include_driver_info=True, include_communication=True, include_communication_object=True, include_activity_links=True, include_activity_files=True, include_activity_files_meta_data=True, include_assignment_nr=True, include_assignment=True, include_activity_tags=True, include_tag_type_name=True, include_activity_record_info=True, include_activity_notes=True, include_activity_note_tags=True, include_depot_address_object=True, include_capacity_object=True, include_zones=True, include_brand=True, include_brand_colours=True, include_brand_files=True, include_relations=True, **kwargs):  # noqa: E501
        """Find activity by ID  # noqa: E501

        Returns a single activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_activity(activity_id, include_activity_status, include_activity_type_name, include_activity_meta_data, include_address_object, include_time_slots, include_route_info, include_route, include_package_lines, include_package_lines_info, include_driver_info, include_communication, include_communication_object, include_activity_links, include_activity_files, include_activity_files_meta_data, include_assignment_nr, include_assignment, include_activity_tags, include_tag_type_name, include_activity_record_info, include_activity_notes, include_activity_note_tags, include_depot_address_object, include_capacity_object, include_zones, include_brand, include_brand_colours, include_brand_files, include_relations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_id: ID of activity to return (required)
        :param bool include_activity_status: Show the text value of the status (required)
        :param bool include_activity_type_name: Show the text value of the activity type (required)
        :param bool include_activity_meta_data: Include meta data connected to this Activity (required)
        :param bool include_address_object: Include address data (required)
        :param bool include_time_slots: Include TimeSlots (required)
        :param bool include_route_info: Include route data (required)
        :param bool include_route: Include Route (required)
        :param bool include_package_lines: Include package lines (required)
        :param bool include_package_lines_info: Include PackageLines (required)
        :param bool include_driver_info: Include driver data (required)
        :param bool include_communication: Include Communication Settings (required)
        :param bool include_communication_object: Include Communication Object (required)
        :param bool include_activity_links: Include Link Data (required)
        :param bool include_activity_files: Include files (required)
        :param bool include_activity_files_meta_data: Include files meta data (required)
        :param bool include_assignment_nr: Include Assignment Nr (required)
        :param bool include_assignment: Include Assignment (required)
        :param bool include_activity_tags: Include Activity Tags (required)
        :param bool include_tag_type_name: Include Activity Tag type names (required)
        :param bool include_activity_record_info: Include Activity Info (required)
        :param bool include_activity_notes: Include Activity Notes (required)
        :param bool include_activity_note_tags: Include Activity Note Tags (required)
        :param bool include_depot_address_object: Include Depot Address Object (required)
        :param bool include_capacity_object: Include Capacity Object (required)
        :param bool include_zones: Include Zones (required)
        :param bool include_brand: Include brand (required)
        :param bool include_brand_colours: Include brand colours (required)
        :param bool include_brand_files: Include brand files (required)
        :param bool include_relations: Include activity_before and activity_after (required)
        :return: ActivityModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_activity_with_http_info(activity_id, include_activity_status, include_activity_type_name, include_activity_meta_data, include_address_object, include_time_slots, include_route_info, include_route, include_package_lines, include_package_lines_info, include_driver_info, include_communication, include_communication_object, include_activity_links, include_activity_files, include_activity_files_meta_data, include_assignment_nr, include_assignment, include_activity_tags, include_tag_type_name, include_activity_record_info, include_activity_notes, include_activity_note_tags, include_depot_address_object, include_capacity_object, include_zones, include_brand, include_brand_colours, include_brand_files, include_relations, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_activity_with_http_info(activity_id, include_activity_status, include_activity_type_name, include_activity_meta_data, include_address_object, include_time_slots, include_route_info, include_route, include_package_lines, include_package_lines_info, include_driver_info, include_communication, include_communication_object, include_activity_links, include_activity_files, include_activity_files_meta_data, include_assignment_nr, include_assignment, include_activity_tags, include_tag_type_name, include_activity_record_info, include_activity_notes, include_activity_note_tags, include_depot_address_object, include_capacity_object, include_zones, include_brand, include_brand_colours, include_brand_files, include_relations, **kwargs)  # noqa: E501
            return data

    def retrieve_activity_with_http_info(self, activity_id, include_activity_status, include_activity_type_name, include_activity_meta_data, include_address_object, include_time_slots, include_route_info, include_route, include_package_lines, include_package_lines_info, include_driver_info, include_communication, include_communication_object, include_activity_links, include_activity_files, include_activity_files_meta_data, include_assignment_nr, include_assignment, include_activity_tags, include_tag_type_name, include_activity_record_info, include_activity_notes, include_activity_note_tags, include_depot_address_object, include_capacity_object, include_zones, include_brand, include_brand_colours, include_brand_files, include_relations, **kwargs):  # noqa: E501
        """Find activity by ID  # noqa: E501

        Returns a single activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_activity_with_http_info(activity_id, include_activity_status, include_activity_type_name, include_activity_meta_data, include_address_object, include_time_slots, include_route_info, include_route, include_package_lines, include_package_lines_info, include_driver_info, include_communication, include_communication_object, include_activity_links, include_activity_files, include_activity_files_meta_data, include_assignment_nr, include_assignment, include_activity_tags, include_tag_type_name, include_activity_record_info, include_activity_notes, include_activity_note_tags, include_depot_address_object, include_capacity_object, include_zones, include_brand, include_brand_colours, include_brand_files, include_relations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_id: ID of activity to return (required)
        :param bool include_activity_status: Show the text value of the status (required)
        :param bool include_activity_type_name: Show the text value of the activity type (required)
        :param bool include_activity_meta_data: Include meta data connected to this Activity (required)
        :param bool include_address_object: Include address data (required)
        :param bool include_time_slots: Include TimeSlots (required)
        :param bool include_route_info: Include route data (required)
        :param bool include_route: Include Route (required)
        :param bool include_package_lines: Include package lines (required)
        :param bool include_package_lines_info: Include PackageLines (required)
        :param bool include_driver_info: Include driver data (required)
        :param bool include_communication: Include Communication Settings (required)
        :param bool include_communication_object: Include Communication Object (required)
        :param bool include_activity_links: Include Link Data (required)
        :param bool include_activity_files: Include files (required)
        :param bool include_activity_files_meta_data: Include files meta data (required)
        :param bool include_assignment_nr: Include Assignment Nr (required)
        :param bool include_assignment: Include Assignment (required)
        :param bool include_activity_tags: Include Activity Tags (required)
        :param bool include_tag_type_name: Include Activity Tag type names (required)
        :param bool include_activity_record_info: Include Activity Info (required)
        :param bool include_activity_notes: Include Activity Notes (required)
        :param bool include_activity_note_tags: Include Activity Note Tags (required)
        :param bool include_depot_address_object: Include Depot Address Object (required)
        :param bool include_capacity_object: Include Capacity Object (required)
        :param bool include_zones: Include Zones (required)
        :param bool include_brand: Include brand (required)
        :param bool include_brand_colours: Include brand colours (required)
        :param bool include_brand_files: Include brand files (required)
        :param bool include_relations: Include activity_before and activity_after (required)
        :return: ActivityModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id', 'include_activity_status', 'include_activity_type_name', 'include_activity_meta_data', 'include_address_object', 'include_time_slots', 'include_route_info', 'include_route', 'include_package_lines', 'include_package_lines_info', 'include_driver_info', 'include_communication', 'include_communication_object', 'include_activity_links', 'include_activity_files', 'include_activity_files_meta_data', 'include_assignment_nr', 'include_assignment', 'include_activity_tags', 'include_tag_type_name', 'include_activity_record_info', 'include_activity_notes', 'include_activity_note_tags', 'include_depot_address_object', 'include_capacity_object', 'include_zones', 'include_brand', 'include_brand_colours', 'include_brand_files', 'include_relations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if self.api_client.client_side_validation and ('activity_id' not in params or
                                                       params['activity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `activity_id` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_status' is set
        if self.api_client.client_side_validation and ('include_activity_status' not in params or
                                                       params['include_activity_status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_status` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_type_name' is set
        if self.api_client.client_side_validation and ('include_activity_type_name' not in params or
                                                       params['include_activity_type_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_type_name` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_meta_data' is set
        if self.api_client.client_side_validation and ('include_activity_meta_data' not in params or
                                                       params['include_activity_meta_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_meta_data` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_address_object' is set
        if self.api_client.client_side_validation and ('include_address_object' not in params or
                                                       params['include_address_object'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_address_object` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_time_slots' is set
        if self.api_client.client_side_validation and ('include_time_slots' not in params or
                                                       params['include_time_slots'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_time_slots` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_route_info' is set
        if self.api_client.client_side_validation and ('include_route_info' not in params or
                                                       params['include_route_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_route_info` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_route' is set
        if self.api_client.client_side_validation and ('include_route' not in params or
                                                       params['include_route'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_route` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_package_lines' is set
        if self.api_client.client_side_validation and ('include_package_lines' not in params or
                                                       params['include_package_lines'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_lines` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_package_lines_info' is set
        if self.api_client.client_side_validation and ('include_package_lines_info' not in params or
                                                       params['include_package_lines_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_package_lines_info` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_driver_info' is set
        if self.api_client.client_side_validation and ('include_driver_info' not in params or
                                                       params['include_driver_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_driver_info` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_communication' is set
        if self.api_client.client_side_validation and ('include_communication' not in params or
                                                       params['include_communication'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_communication` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_communication_object' is set
        if self.api_client.client_side_validation and ('include_communication_object' not in params or
                                                       params['include_communication_object'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_communication_object` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_links' is set
        if self.api_client.client_side_validation and ('include_activity_links' not in params or
                                                       params['include_activity_links'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_links` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_files' is set
        if self.api_client.client_side_validation and ('include_activity_files' not in params or
                                                       params['include_activity_files'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_files` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_files_meta_data' is set
        if self.api_client.client_side_validation and ('include_activity_files_meta_data' not in params or
                                                       params['include_activity_files_meta_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_files_meta_data` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_assignment_nr' is set
        if self.api_client.client_side_validation and ('include_assignment_nr' not in params or
                                                       params['include_assignment_nr'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_assignment_nr` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_assignment' is set
        if self.api_client.client_side_validation and ('include_assignment' not in params or
                                                       params['include_assignment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_assignment` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_tags' is set
        if self.api_client.client_side_validation and ('include_activity_tags' not in params or
                                                       params['include_activity_tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_tags` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_tag_type_name' is set
        if self.api_client.client_side_validation and ('include_tag_type_name' not in params or
                                                       params['include_tag_type_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_tag_type_name` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_record_info' is set
        if self.api_client.client_side_validation and ('include_activity_record_info' not in params or
                                                       params['include_activity_record_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_record_info` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_notes' is set
        if self.api_client.client_side_validation and ('include_activity_notes' not in params or
                                                       params['include_activity_notes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_notes` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_activity_note_tags' is set
        if self.api_client.client_side_validation and ('include_activity_note_tags' not in params or
                                                       params['include_activity_note_tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_activity_note_tags` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_depot_address_object' is set
        if self.api_client.client_side_validation and ('include_depot_address_object' not in params or
                                                       params['include_depot_address_object'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_depot_address_object` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_capacity_object' is set
        if self.api_client.client_side_validation and ('include_capacity_object' not in params or
                                                       params['include_capacity_object'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_capacity_object` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_zones' is set
        if self.api_client.client_side_validation and ('include_zones' not in params or
                                                       params['include_zones'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_zones` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_brand' is set
        if self.api_client.client_side_validation and ('include_brand' not in params or
                                                       params['include_brand'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_brand` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_brand_colours' is set
        if self.api_client.client_side_validation and ('include_brand_colours' not in params or
                                                       params['include_brand_colours'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_brand_colours` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_brand_files' is set
        if self.api_client.client_side_validation and ('include_brand_files' not in params or
                                                       params['include_brand_files'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_brand_files` when calling `retrieve_activity`")  # noqa: E501
        # verify the required parameter 'include_relations' is set
        if self.api_client.client_side_validation and ('include_relations' not in params or
                                                       params['include_relations'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `include_relations` when calling `retrieve_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []
        if 'include_activity_status' in params:
            query_params.append(('include_activity_status', params['include_activity_status']))  # noqa: E501
        if 'include_activity_type_name' in params:
            query_params.append(('include_activity_type_name', params['include_activity_type_name']))  # noqa: E501
        if 'include_activity_meta_data' in params:
            query_params.append(('include_activity_meta_data', params['include_activity_meta_data']))  # noqa: E501
        if 'include_address_object' in params:
            query_params.append(('include_address_object', params['include_address_object']))  # noqa: E501
        if 'include_time_slots' in params:
            query_params.append(('include_time_slots', params['include_time_slots']))  # noqa: E501
        if 'include_route_info' in params:
            query_params.append(('include_route_info', params['include_route_info']))  # noqa: E501
        if 'include_route' in params:
            query_params.append(('include_route', params['include_route']))  # noqa: E501
        if 'include_package_lines' in params:
            query_params.append(('include_package_lines', params['include_package_lines']))  # noqa: E501
        if 'include_package_lines_info' in params:
            query_params.append(('include_package_lines_info', params['include_package_lines_info']))  # noqa: E501
        if 'include_driver_info' in params:
            query_params.append(('include_driver_info', params['include_driver_info']))  # noqa: E501
        if 'include_communication' in params:
            query_params.append(('include_communication', params['include_communication']))  # noqa: E501
        if 'include_communication_object' in params:
            query_params.append(('include_communication_object', params['include_communication_object']))  # noqa: E501
        if 'include_activity_links' in params:
            query_params.append(('include_activity_links', params['include_activity_links']))  # noqa: E501
        if 'include_activity_files' in params:
            query_params.append(('include_activity_files', params['include_activity_files']))  # noqa: E501
        if 'include_activity_files_meta_data' in params:
            query_params.append(('include_activity_files_meta_data', params['include_activity_files_meta_data']))  # noqa: E501
        if 'include_assignment_nr' in params:
            query_params.append(('include_assignment_nr', params['include_assignment_nr']))  # noqa: E501
        if 'include_assignment' in params:
            query_params.append(('include_assignment', params['include_assignment']))  # noqa: E501
        if 'include_activity_tags' in params:
            query_params.append(('include_activity_tags', params['include_activity_tags']))  # noqa: E501
        if 'include_tag_type_name' in params:
            query_params.append(('include_tag_type_name', params['include_tag_type_name']))  # noqa: E501
        if 'include_activity_record_info' in params:
            query_params.append(('include_activity_record_info', params['include_activity_record_info']))  # noqa: E501
        if 'include_activity_notes' in params:
            query_params.append(('include_activity_notes', params['include_activity_notes']))  # noqa: E501
        if 'include_activity_note_tags' in params:
            query_params.append(('include_activity_note_tags', params['include_activity_note_tags']))  # noqa: E501
        if 'include_depot_address_object' in params:
            query_params.append(('include_depot_address_object', params['include_depot_address_object']))  # noqa: E501
        if 'include_capacity_object' in params:
            query_params.append(('include_capacity_object', params['include_capacity_object']))  # noqa: E501
        if 'include_zones' in params:
            query_params.append(('include_zones', params['include_zones']))  # noqa: E501
        if 'include_brand' in params:
            query_params.append(('include_brand', params['include_brand']))  # noqa: E501
        if 'include_brand_colours' in params:
            query_params.append(('include_brand_colours', params['include_brand_colours']))  # noqa: E501
        if 'include_brand_files' in params:
            query_params.append(('include_brand_files', params['include_brand_files']))  # noqa: E501
        if 'include_relations' in params:
            query_params.append(('include_relations', params['include_relations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/{activityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActivityModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_list_activity(self, arguments, **kwargs):  # noqa: E501
        """Retrieve List of Activities  # noqa: E501

        Retrieve List of Activities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_list_activity(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityRetrieveListArguments arguments: Activity RetrieveList Arguments (required)
        :return: ActivityListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_list_activity_with_http_info(arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_list_activity_with_http_info(arguments, **kwargs)  # noqa: E501
            return data

    def retrieve_list_activity_with_http_info(self, arguments, **kwargs):  # noqa: E501
        """Retrieve List of Activities  # noqa: E501

        Retrieve List of Activities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_list_activity_with_http_info(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityRetrieveListArguments arguments: Activity RetrieveList Arguments (required)
        :return: ActivityListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arguments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_list_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arguments' is set
        if self.api_client.client_side_validation and ('arguments' not in params or
                                                       params['arguments'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `arguments` when calling `retrieve_list_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'arguments' in params:
            body_params = params['arguments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActivityListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_activity(self, **kwargs):  # noqa: E501
        """Set (create or update) an Activity  # noqa: E501

        Set (create or update) an Activity. If id or links are set in the data, and a corresponding activity is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_activity(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityModel body: Activity object
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_activity_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_activity_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_activity_with_http_info(self, **kwargs):  # noqa: E501
        """Set (create or update) an Activity  # noqa: E501

        Set (create or update) an Activity. If id or links are set in the data, and a corresponding activity is found in Bumbal, an update will be performed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_activity_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityModel body: Activity object
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_activity" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlock_activity(self, filters, **kwargs):  # noqa: E501
        """Unlock activities which satisfy set filters  # noqa: E501

        Unlock activities which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_activity(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlock_activity_with_http_info(filters, **kwargs)  # noqa: E501
        else:
            (data) = self.unlock_activity_with_http_info(filters, **kwargs)  # noqa: E501
            return data

    def unlock_activity_with_http_info(self, filters, **kwargs):  # noqa: E501
        """Unlock activities which satisfy set filters  # noqa: E501

        Unlock activities which satisfy set filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_activity_with_http_info(filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityFiltersModel filters: Request Filters (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlock_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `unlock_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filters' in params:
            body_params = params['filters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/unlock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unsuccessful(self, arguments, **kwargs):  # noqa: E501
        """Report an unsuccessful activity  # noqa: E501

        Report an unsuccessful activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unsuccessful(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnsuccessfulModel arguments: Request Arguments (required)
        :return: UnsuccessfulResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unsuccessful_with_http_info(arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.unsuccessful_with_http_info(arguments, **kwargs)  # noqa: E501
            return data

    def unsuccessful_with_http_info(self, arguments, **kwargs):  # noqa: E501
        """Report an unsuccessful activity  # noqa: E501

        Report an unsuccessful activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unsuccessful_with_http_info(arguments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnsuccessfulModel arguments: Request Arguments (required)
        :return: UnsuccessfulResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arguments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsuccessful" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arguments' is set
        if self.api_client.client_side_validation and ('arguments' not in params or
                                                       params['arguments'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `arguments` when calling `unsuccessful`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'arguments' in params:
            body_params = params['arguments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/unsuccessful', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnsuccessfulResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_activity(self, activity_id, **kwargs):  # noqa: E501
        """Update a activity  # noqa: E501

        Update a activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_activity(activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_id: ID of activity to update (required)
        :param ActivityModel body: Activity object that needs to be updated
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_activity_with_http_info(activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_activity_with_http_info(activity_id, **kwargs)  # noqa: E501
            return data

    def update_activity_with_http_info(self, activity_id, **kwargs):  # noqa: E501
        """Update a activity  # noqa: E501

        Update a activity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_activity_with_http_info(activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_id: ID of activity to update (required)
        :param ActivityModel body: Activity object that needs to be updated
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if self.api_client.client_side_validation and ('activity_id' not in params or
                                                       params['activity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `activity_id` when calling `update_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/activity/{activityId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
